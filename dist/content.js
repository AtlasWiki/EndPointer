const R=/["']((\/|(\w+\/))[\w./\-_?=&]*)["']/g,S=/(https?:\/\/[^\s'"){}(]+)/g;let a=new Set,h=new Set,u=new Map;const y=3,T=3e3,f=300,F=1e3;let d;chrome.storage.local.get("requests",e=>{d=e.requests||1,console.log(`Loading setting: ${d} concurrent requests`)});function L(){console.log("Checking Scope..."),chrome.storage.local.get("scope",e=>{const t=e.scope||[],o=document.location.hostname,r=o.split(".").slice(-2).join(".");t.length===0||t.some(c=>r===c.toLowerCase()||o===c.toLowerCase())?(m(0,"Parsing..."),console.log("Parsing URLs..."),P().then(()=>E()).then(()=>{m(100,"Done"),console.log("Parsing completed"),setTimeout(p,2e3)})):p()})}function A(){a=new Set,console.log("Checking Scope..."),chrome.storage.local.get("scope",e=>{const t=e.scope||[],o=document.location.hostname,r=o.split(".").slice(-2).join(".");t.length===0||t.some(c=>r===c.toLowerCase()||o===c.toLowerCase())?(m(0,"Parsing..."),console.log("Parsing URLs..."),P().then(()=>E()).then(()=>{m(100,"Done"),console.log("Parsing completed"),setTimeout(p,2e3)})):p()})}async function P(){const e=document.documentElement.outerHTML,t=Array.from(e.matchAll(S),s=>s[1]),o=Array.from(e.matchAll(R),s=>s[1]),r=new Set([...t,...o]),c=encodeURIComponent(document.location.href);return console.log("URLs from current page: ",r),new Promise(s=>{chrome.storage.local.get("URL-PARSER",n=>{const l=n["URL-PARSER"]||{};l[c]||(l[c]={currPage:[],externalJSFiles:{}}),l.current=c,l[c].currPage=Array.from(r),chrome.storage.local.set({"URL-PARSER":l},()=>{console.log("Saved endpoints from the current page."),w(r.size),s()})})})}async function E(){let e=document.getElementsByTagName("script");console.log("Found initial script tags: "+e.length);let t=Array.from(e).filter(s=>s.src).map(s=>s.src);console.log("Initial JS files: "+t.length);const o=new MutationObserver(s=>{for(let n of s)if(n.type==="childList"){const i=Array.from(n.addedNodes).filter(g=>g.nodeName==="SCRIPT"&&g instanceof HTMLScriptElement&&g.src!=="").map(g=>g.src).filter(g=>!t.includes(g));i.length>0&&(console.log(`Found ${i.length} new script(s):`,i),t=[...t,...i])}});o.observe(document.documentElement,{childList:!0,subtree:!0});const r=Date.now();let c=r;for(;a.size<t.length&&a.size<f&&Date.now()-r<F;){const s=t.filter(n=>!a.has(n)&&(!u.has(n)||u.get(n)<y)).slice(0,f-a.size);for(let n=0;n<s.length;n+=d){const l=s.slice(n,n+d);if(await Promise.all(l.map(i=>C(i))),Date.now()-c>200||n+d>=s.length){const i=a.size/t.length*100;console.log(`Processed ${a.size} out of ${t.length} JS files. ${h.size} successful, ${u.size} failed.`),m(i,`Parsing... (${a.size}/${t.length})`),c=Date.now()}}}o.disconnect(),console.log("Final statistics:"),console.log(`Total JS files found: ${t.length}`),console.log(`Files processed: ${a.size}`),console.log(`Successfully fetched: ${h.size}`),console.log(`Failed to fetch: ${u.size}`),console.log(`Processing time: ${(Date.now()-r)/1e3} seconds`),U(h.size)}async function C(e){if(a.has(e))console.log(`File already processed: ${e}`);else try{console.log(`Fetching file: ${e}`);const t=await b(e);h.add(e);const o=Array.from(t.matchAll(R),n=>n[1]),r=Array.from(t.matchAll(S),n=>n[1]),c=new Set([...o,...r]);console.log(`Found ${c.size} URLs in ${e}`);const s=encodeURIComponent(e);console.log(`Saving to storage: ${s}`),await x(s,Array.from(c)),a.add(e),console.log(`Successfully processed and saved: ${e}`)}catch(t){console.error(`Error processing script: ${e}`,t);const o=(u.get(e)||0)+1;u.set(e,o)}}async function b(e){const t=new AbortController,o=setTimeout(()=>t.abort(),T);try{const r=await fetch(e,{signal:t.signal});return clearTimeout(o),await r.text()}catch(r){throw clearTimeout(o),r}}async function x(e,t){return new Promise((o,r)=>{chrome.storage.local.get("URL-PARSER",c=>{const s=c["URL-PARSER"]||{},n=s.current;s[n]||(s[n]={currPage:[],externalJSFiles:{}}),s[n].externalJSFiles||(s[n].externalJSFiles={}),s[n].externalJSFiles[e]=t,chrome.storage.local.set({"URL-PARSER":s},()=>{chrome.runtime.lastError?(console.error("Error saving to storage:",chrome.runtime.lastError),r(chrome.runtime.lastError)):(console.log(`Saved ${t.length} endpoints from external JS file: ${e}`),o())})})})}function w(e){chrome.runtime.sendMessage({action:"updateURLCount",count:e})}function U(e){chrome.runtime.sendMessage({action:"updateJSFileCount",count:e})}function $(){chrome.storage.local.get("URL-PARSER",e=>{const t=e["URL-PARSER"]||{},o=t.current;if(o&&t[o]){const r=t[o].currPage.length,c=Object.values(t[o].externalJSFiles).reduce((s,n)=>s+n.length,0);w(r+c)}})}function v(){const e=document.getElementsByTagName("script"),t=Array.from(e).filter(o=>o.src).length;U(t)}function M(){const e=document.createElement("div");e.id="parsing-progress-container",e.style.cssText=`
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background-color: #353535;
    padding: 25px;
    z-index: 9999;
    font-family: Arial, sans-serif;
  `;const t=document.createElement("div");t.style.cssText=`
    text-align: center;
    margin-bottom: 5px;
    font-weight: bold;
    font-size: 2em;
    color: white;
  `;const o=document.createElement("div");o.style.cssText=`
    height: 10px;
    background-color: #e5e7eb;
    border-radius: 5px;
    overflow: hidden;
  `;const r=document.createElement("div");return r.style.cssText=`
    height: 100%;
    width: 0%;
    background-color: #3b82f6;
    transition: width 0.3s ease-in-out;
  `,o.appendChild(r),e.appendChild(t),e.appendChild(o),e.setProgress=c=>{r.style.width=`${Math.min(100,Math.max(0,c))}%`},e.setStatus=c=>{t.textContent=c},document.body.insertBefore(e,document.body.firstChild),e}function m(e,t){let o=document.getElementById("parsing-progress-container");o||(o=M()),o.setProgress(e),o.setStatus(t)}function p(){const e=document.getElementById("parsing-progress-container");e&&e.remove()}function z(){chrome.runtime.onMessage.addListener((e,t,o)=>{switch(console.log("Content script received message:",e),e.action){case"getCurrTabData":L(),o({data:"Parsed URLs"});break;case"countURLs":$();break;case"countJSFiles":v();break;case"parseURLs":A(),o({data:"Parsed URLs"});break}})}z();window.onload=function(){chrome.storage.local.get("urlParser",e=>{e.urlParser&&L()})};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbXBvbmVudHMvc2hhcmVkVHlwZXMvcmVnZXhfY29uc3RhbnRzLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29udGVudC91cmxQYXJzZXIudHMiLCIuLi9zcmMvY29tcG9uZW50cy9jb250ZW50L21lc3NhZ2VIYW5kbGVyLnRzIiwiLi4vc3JjL2NvbnRlbnQtbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgUkVMX1JFR0VYID0gL1tcIiddKChcXC98KFxcdytcXC8pKVtcXHcuL1xcLV8/PSZdKilbXCInXS9nO1xyXG5leHBvcnQgY29uc3QgQUJTX1JFR0VYID0gLyhodHRwcz86XFwvXFwvW15cXHMnXCIpe30oXSspL2c7IiwiaW1wb3J0IHsgRXh0ZW5zaW9uU3RhdGUgfSBmcm9tICcuLi9zaGFyZWRUeXBlcy9tZXNzYWdlX3R5cGVzJztcclxuaW1wb3J0IHsgUkVMX1JFR0VYLCBBQlNfUkVHRVggfSBmcm9tICcuLi9zaGFyZWRUeXBlcy9yZWdleF9jb25zdGFudHMnO1xyXG5cclxubGV0IHBhcnNlZEpTRmlsZXM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xyXG5sZXQgc3VjY2Vzc2Z1bGx5RmV0Y2hlZEZpbGVzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcclxubGV0IGZhaWxlZEZldGNoQXR0ZW1wdHM6IE1hcDxzdHJpbmcsIG51bWJlcj4gPSBuZXcgTWFwKCk7XHJcbmNvbnN0IE1BWF9SRVRSWV9BVFRFTVBUUyA9IDM7XHJcbmNvbnN0IEZFVENIX1RJTUVPVVQgPSAzMDAwOyAvLyAzIHNlY29uZHNcclxuY29uc3QgTUFYX0ZJTEVTX1RPX1BST0NFU1MgPSAzMDA7IC8vIFNldCBhIGhhcmQgbGltaXQgb24gdGhlIG51bWJlciBvZiBmaWxlcyB0byBwcm9jZXNzXHJcbmNvbnN0IE1BWF9QUk9DRVNTSU5HX1RJTUUgPSAxMDAwOyAvLyAxIHNlY29uZFxyXG5sZXQgQ09OQ1VSUkVOVF9SRVFVRVNUUzogbnVtYmVyO1xyXG5cclxuY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KFwicmVxdWVzdHNcIiwgKHJlc3VsdCkgPT4ge1xyXG4gIENPTkNVUlJFTlRfUkVRVUVTVFMgPSByZXN1bHQucmVxdWVzdHMgfHwgMTtcclxuICBjb25zb2xlLmxvZyhgTG9hZGluZyBzZXR0aW5nOiAke0NPTkNVUlJFTlRfUkVRVUVTVFN9IGNvbmN1cnJlbnQgcmVxdWVzdHNgKVxyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVSTHMoKTogdm9pZCB7XHJcbiAgY29uc29sZS5sb2coXCJDaGVja2luZyBTY29wZS4uLlwiKTtcclxuICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoXCJzY29wZVwiLCAocmVzdWx0KSA9PiB7XHJcbiAgICBjb25zdCBzY29wZXM6IHN0cmluZ1tdID0gcmVzdWx0LnNjb3BlIHx8IFtdO1xyXG4gICAgY29uc3QgaG9zdDogc3RyaW5nID0gZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWU7XHJcbiAgICBjb25zdCBiYXNlRG9tYWluOiBzdHJpbmcgPSBob3N0LnNwbGl0KCcuJykuc2xpY2UoLTIpLmpvaW4oJy4nKTtcclxuICAgIGlmIChzY29wZXMubGVuZ3RoID09PSAwIHx8IHNjb3Blcy5zb21lKHNjb3BlID0+IGJhc2VEb21haW4gPT09IHNjb3BlLnRvTG93ZXJDYXNlKCkgfHwgaG9zdCA9PT0gc2NvcGUudG9Mb3dlckNhc2UoKSkpIHtcclxuICAgICAgdXBkYXRlUHJvZ3Jlc3MoMCwgJ1BhcnNpbmcuLi4nKTtcclxuICAgICAgY29uc29sZS5sb2coXCJQYXJzaW5nIFVSTHMuLi5cIik7XHJcbiAgICAgIHBhcnNlX2N1cnJfcGFnZSgpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4gcGFyc2VfZXh0ZXJuYWxfZmlsZXMoKSlcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICB1cGRhdGVQcm9ncmVzcygxMDAsICdEb25lJyk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlBhcnNpbmcgY29tcGxldGVkXCIpO1xyXG4gICAgICAgICAgc2V0VGltZW91dChyZW1vdmVQcm9ncmVzc0JhciwgMjAwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZW1vdmVQcm9ncmVzc0JhcigpOyAvLyBSZW1vdmUgcHJvZ3Jlc3MgYmFyIGlmIG5vdCBpbiBzY29wZVxyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVUkxzTWFudWFsbHkoKTogdm9pZCB7XHJcbiAgcGFyc2VkSlNGaWxlcyA9IG5ldyBTZXQoKTtcclxuICBjb25zb2xlLmxvZyhcIkNoZWNraW5nIFNjb3BlLi4uXCIpO1xyXG4gIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChcInNjb3BlXCIsIChyZXN1bHQpID0+IHtcclxuICAgIGNvbnN0IHNjb3Blczogc3RyaW5nW10gPSByZXN1bHQuc2NvcGUgfHwgW107XHJcbiAgICBjb25zdCBob3N0OiBzdHJpbmcgPSBkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZTtcclxuICAgIGNvbnN0IGJhc2VEb21haW46IHN0cmluZyA9IGhvc3Quc3BsaXQoJy4nKS5zbGljZSgtMikuam9pbignLicpO1xyXG4gICAgaWYgKHNjb3Blcy5sZW5ndGggPT09IDAgfHwgc2NvcGVzLnNvbWUoc2NvcGUgPT4gYmFzZURvbWFpbiA9PT0gc2NvcGUudG9Mb3dlckNhc2UoKSB8fCBob3N0ID09PSBzY29wZS50b0xvd2VyQ2FzZSgpKSkge1xyXG4gICAgICB1cGRhdGVQcm9ncmVzcygwLCAnUGFyc2luZy4uLicpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlBhcnNpbmcgVVJMcy4uLlwiKTtcclxuICAgICAgcGFyc2VfY3Vycl9wYWdlKClcclxuICAgICAgICAudGhlbigoKSA9PiBwYXJzZV9leHRlcm5hbF9maWxlcygpKVxyXG4gICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgIHVwZGF0ZVByb2dyZXNzKDEwMCwgJ0RvbmUnKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiUGFyc2luZyBjb21wbGV0ZWRcIik7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KHJlbW92ZVByb2dyZXNzQmFyLCAyMDAwKTtcclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlbW92ZVByb2dyZXNzQmFyKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiBwYXJzZV9jdXJyX3BhZ2UoKSB7XHJcbiAgY29uc3QgcGFnZUNvbnRlbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub3V0ZXJIVE1MO1xyXG4gIGNvbnN0IGFiUGFnZVVSTHMgPSBBcnJheS5mcm9tKHBhZ2VDb250ZW50Lm1hdGNoQWxsKEFCU19SRUdFWCksIG1hdGNoID0+IG1hdGNoWzFdKTtcclxuICBjb25zdCByZWxQYWdlVVJMcyA9IEFycmF5LmZyb20ocGFnZUNvbnRlbnQubWF0Y2hBbGwoUkVMX1JFR0VYKSwgbWF0Y2ggPT4gbWF0Y2hbMV0pO1xyXG4gIGNvbnN0IHBhZ2VVUkxzID0gbmV3IFNldChbLi4uYWJQYWdlVVJMcywgLi4ucmVsUGFnZVVSTHNdKTtcclxuXHJcbiAgY29uc3QgY3VyclBhZ2UgPSBlbmNvZGVVUklDb21wb25lbnQoZG9jdW1lbnQubG9jYXRpb24uaHJlZik7XHJcbiAgY29uc29sZS5sb2coXCJVUkxzIGZyb20gY3VycmVudCBwYWdlOiBcIiwgcGFnZVVSTHMpO1xyXG5cclxuICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcclxuICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCgnVVJMLVBBUlNFUicsIChyZXN1bHQpID0+IHtcclxuICAgICAgY29uc3QgdXJsUGFyc2VyID0gcmVzdWx0WydVUkwtUEFSU0VSJ10gfHwge307XHJcbiAgICAgIGlmICghdXJsUGFyc2VyW2N1cnJQYWdlXSkge1xyXG4gICAgICAgIHVybFBhcnNlcltjdXJyUGFnZV0gPSB7IGN1cnJQYWdlOiBbXSwgZXh0ZXJuYWxKU0ZpbGVzOiB7fSB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB1cmxQYXJzZXJbXCJjdXJyZW50XCJdID0gY3VyclBhZ2U7XHJcbiAgICAgIHVybFBhcnNlcltjdXJyUGFnZV0uY3VyclBhZ2UgPSBBcnJheS5mcm9tKHBhZ2VVUkxzKTtcclxuXHJcbiAgICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7ICdVUkwtUEFSU0VSJzogdXJsUGFyc2VyIH0sICgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlNhdmVkIGVuZHBvaW50cyBmcm9tIHRoZSBjdXJyZW50IHBhZ2UuXCIpO1xyXG4gICAgICAgIHVwZGF0ZVVSTENvdW50KHBhZ2VVUkxzLnNpemUpO1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gcGFyc2VfZXh0ZXJuYWxfZmlsZXMoKSB7XHJcbiAgbGV0IHNjcmlwdFRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XHJcbiAgY29uc29sZS5sb2coXCJGb3VuZCBpbml0aWFsIHNjcmlwdCB0YWdzOiBcIiArIHNjcmlwdFRhZ3MubGVuZ3RoKTtcclxuXHJcbiAgbGV0IGpzX2ZpbGVzID0gQXJyYXkuZnJvbShzY3JpcHRUYWdzKS5maWx0ZXIoc2NyaXB0ID0+IHNjcmlwdC5zcmMpLm1hcChzY3JpcHQgPT4gc2NyaXB0LnNyYyk7XHJcbiAgY29uc29sZS5sb2coXCJJbml0aWFsIEpTIGZpbGVzOiBcIiArIGpzX2ZpbGVzLmxlbmd0aCk7XHJcblxyXG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucykgPT4ge1xyXG4gICAgZm9yIChsZXQgbXV0YXRpb24gb2YgbXV0YXRpb25zKSB7XHJcbiAgICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xyXG4gICAgICAgIGNvbnN0IGFkZGVkU2NyaXB0cyA9IEFycmF5LmZyb20obXV0YXRpb24uYWRkZWROb2RlcylcclxuICAgICAgICAgIC5maWx0ZXIoKG5vZGUpOiBub2RlIGlzIEhUTUxTY3JpcHRFbGVtZW50ID0+IFxyXG4gICAgICAgICAgICBub2RlLm5vZGVOYW1lID09PSAnU0NSSVBUJyAmJiBcclxuICAgICAgICAgICAgbm9kZSBpbnN0YW5jZW9mIEhUTUxTY3JpcHRFbGVtZW50ICYmIFxyXG4gICAgICAgICAgICBub2RlLnNyYyAhPT0gJydcclxuICAgICAgICAgIClcclxuICAgICAgICAgIC5tYXAoc2NyaXB0ID0+IHNjcmlwdC5zcmMpO1xyXG4gICAgICAgIGNvbnN0IG5ld0ZpbGVzID0gYWRkZWRTY3JpcHRzLmZpbHRlcihzcmMgPT4gIWpzX2ZpbGVzLmluY2x1ZGVzKHNyYykpO1xyXG4gICAgICAgIGlmIChuZXdGaWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgRm91bmQgJHtuZXdGaWxlcy5sZW5ndGh9IG5ldyBzY3JpcHQocyk6YCwgbmV3RmlsZXMpO1xyXG4gICAgICAgICAganNfZmlsZXMgPSBbLi4uanNfZmlsZXMsIC4uLm5ld0ZpbGVzXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHtcclxuICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgIHN1YnRyZWU6IHRydWVcclxuICB9KTtcclxuXHJcbiAgY29uc3QgcHJvY2Vzc2luZ1N0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICBsZXQgbGFzdExvZ1RpbWUgPSBwcm9jZXNzaW5nU3RhcnQ7XHJcblxyXG4gIHdoaWxlIChwYXJzZWRKU0ZpbGVzLnNpemUgPCBqc19maWxlcy5sZW5ndGggJiYgXHJcbiAgICAgICAgIHBhcnNlZEpTRmlsZXMuc2l6ZSA8IE1BWF9GSUxFU19UT19QUk9DRVNTICYmIFxyXG4gICAgICAgICAoRGF0ZS5ub3coKSAtIHByb2Nlc3NpbmdTdGFydCkgPCBNQVhfUFJPQ0VTU0lOR19USU1FKSB7XHJcbiAgICBcclxuICAgIGNvbnN0IHVucGFyc2VkRmlsZXMgPSBqc19maWxlc1xyXG4gICAgICAuZmlsdGVyKGZpbGUgPT4gIXBhcnNlZEpTRmlsZXMuaGFzKGZpbGUpICYmICghZmFpbGVkRmV0Y2hBdHRlbXB0cy5oYXMoZmlsZSkgfHwgZmFpbGVkRmV0Y2hBdHRlbXB0cy5nZXQoZmlsZSkhIDwgTUFYX1JFVFJZX0FUVEVNUFRTKSlcclxuICAgICAgLnNsaWNlKDAsIE1BWF9GSUxFU19UT19QUk9DRVNTIC0gcGFyc2VkSlNGaWxlcy5zaXplKTtcclxuICAgIFxyXG4gICAgLy8gUHJvY2VzcyBmaWxlcyBjb25jdXJyZW50bHkgaW4gYmF0Y2hlc1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bnBhcnNlZEZpbGVzLmxlbmd0aDsgaSArPSBDT05DVVJSRU5UX1JFUVVFU1RTKSB7XHJcbiAgICAgIGNvbnN0IGJhdGNoID0gdW5wYXJzZWRGaWxlcy5zbGljZShpLCBpICsgQ09OQ1VSUkVOVF9SRVFVRVNUUyk7XHJcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKGJhdGNoLm1hcChqc19maWxlID0+IHByb2Nlc3NKU0ZpbGUoanNfZmlsZSkpKTtcclxuXHJcbiAgICAgIC8vIExvZyBwcm9ncmVzcyBldmVyeSAzMDAgbWlsaXNlY29uZHNcclxuICAgICAgaWYgKERhdGUubm93KCkgLSBsYXN0TG9nVGltZSA+IDIwMCB8fCBpICsgQ09OQ1VSUkVOVF9SRVFVRVNUUyA+PSB1bnBhcnNlZEZpbGVzLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IHByb2dyZXNzID0gKHBhcnNlZEpTRmlsZXMuc2l6ZSAvIGpzX2ZpbGVzLmxlbmd0aCkgKiAxMDA7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFByb2Nlc3NlZCAke3BhcnNlZEpTRmlsZXMuc2l6ZX0gb3V0IG9mICR7anNfZmlsZXMubGVuZ3RofSBKUyBmaWxlcy4gJHtzdWNjZXNzZnVsbHlGZXRjaGVkRmlsZXMuc2l6ZX0gc3VjY2Vzc2Z1bCwgJHtmYWlsZWRGZXRjaEF0dGVtcHRzLnNpemV9IGZhaWxlZC5gKTtcclxuICAgICAgICB1cGRhdGVQcm9ncmVzcyhwcm9ncmVzcywgYFBhcnNpbmcuLi4gKCR7cGFyc2VkSlNGaWxlcy5zaXplfS8ke2pzX2ZpbGVzLmxlbmd0aH0pYCk7XHJcbiAgICAgICAgbGFzdExvZ1RpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcblxyXG4gIGNvbnNvbGUubG9nKFwiRmluYWwgc3RhdGlzdGljczpcIik7XHJcbiAgY29uc29sZS5sb2coYFRvdGFsIEpTIGZpbGVzIGZvdW5kOiAke2pzX2ZpbGVzLmxlbmd0aH1gKTtcclxuICBjb25zb2xlLmxvZyhgRmlsZXMgcHJvY2Vzc2VkOiAke3BhcnNlZEpTRmlsZXMuc2l6ZX1gKTtcclxuICBjb25zb2xlLmxvZyhgU3VjY2Vzc2Z1bGx5IGZldGNoZWQ6ICR7c3VjY2Vzc2Z1bGx5RmV0Y2hlZEZpbGVzLnNpemV9YCk7XHJcbiAgY29uc29sZS5sb2coYEZhaWxlZCB0byBmZXRjaDogJHtmYWlsZWRGZXRjaEF0dGVtcHRzLnNpemV9YCk7XHJcbiAgY29uc29sZS5sb2coYFByb2Nlc3NpbmcgdGltZTogJHsoRGF0ZS5ub3coKSAtIHByb2Nlc3NpbmdTdGFydCkgLyAxMDAwfSBzZWNvbmRzYCk7XHJcbiAgXHJcbiAgdXBkYXRlSlNGaWxlQ291bnQoc3VjY2Vzc2Z1bGx5RmV0Y2hlZEZpbGVzLnNpemUpO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBwcm9jZXNzSlNGaWxlKGpzX2ZpbGU6IHN0cmluZykge1xyXG4gIGlmICghcGFyc2VkSlNGaWxlcy5oYXMoanNfZmlsZSkpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBGZXRjaGluZyBmaWxlOiAke2pzX2ZpbGV9YCk7XHJcbiAgICAgIGNvbnN0IGNvZGUgPSBhd2FpdCBmZXRjaFdpdGhUaW1lb3V0KGpzX2ZpbGUpO1xyXG4gICAgICBzdWNjZXNzZnVsbHlGZXRjaGVkRmlsZXMuYWRkKGpzX2ZpbGUpO1xyXG4gICAgICBcclxuICAgICAgY29uc3QganNGaWxlUmVsVVJMcyA9IEFycmF5LmZyb20oY29kZS5tYXRjaEFsbChSRUxfUkVHRVgpLCBtYXRjaCA9PiBtYXRjaFsxXSk7XHJcbiAgICAgIGNvbnN0IGpzRmlsZUFiVVJMcyA9IEFycmF5LmZyb20oY29kZS5tYXRjaEFsbChBQlNfUkVHRVgpLCBtYXRjaCA9PiBtYXRjaFsxXSk7XHJcbiAgICAgIGNvbnN0IGpzRmlsZVVSTHMgPSBuZXcgU2V0KFsuLi5qc0ZpbGVSZWxVUkxzLCAuLi5qc0ZpbGVBYlVSTHNdKTtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCAke2pzRmlsZVVSTHMuc2l6ZX0gVVJMcyBpbiAke2pzX2ZpbGV9YCk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBlbmNvZGVkVVJMID0gZW5jb2RlVVJJQ29tcG9uZW50KGpzX2ZpbGUpO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coYFNhdmluZyB0byBzdG9yYWdlOiAke2VuY29kZWRVUkx9YCk7XHJcbiAgICAgIGF3YWl0IHNhdmVUb1N0b3JhZ2UoZW5jb2RlZFVSTCwgQXJyYXkuZnJvbShqc0ZpbGVVUkxzKSk7XHJcblxyXG4gICAgICBwYXJzZWRKU0ZpbGVzLmFkZChqc19maWxlKTtcclxuICAgICAgY29uc29sZS5sb2coYFN1Y2Nlc3NmdWxseSBwcm9jZXNzZWQgYW5kIHNhdmVkOiAke2pzX2ZpbGV9YCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBwcm9jZXNzaW5nIHNjcmlwdDogJHtqc19maWxlfWAsIGVycm9yKTtcclxuICAgICAgY29uc3QgYXR0ZW1wdHMgPSAoZmFpbGVkRmV0Y2hBdHRlbXB0cy5nZXQoanNfZmlsZSkgfHwgMCkgKyAxO1xyXG4gICAgICBmYWlsZWRGZXRjaEF0dGVtcHRzLnNldChqc19maWxlLCBhdHRlbXB0cyk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnNvbGUubG9nKGBGaWxlIGFscmVhZHkgcHJvY2Vzc2VkOiAke2pzX2ZpbGV9YCk7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBmZXRjaFdpdGhUaW1lb3V0KGZpbGU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcclxuICBjb25zdCBpZCA9IHNldFRpbWVvdXQoKCkgPT4gY29udHJvbGxlci5hYm9ydCgpLCBGRVRDSF9USU1FT1VUKTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZmlsZSwgeyBzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsIH0pO1xyXG4gICAgY2xlYXJUaW1lb3V0KGlkKTtcclxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNsZWFyVGltZW91dChpZCk7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHNhdmVUb1N0b3JhZ2UoZW5jb2RlZFVSTDogc3RyaW5nLCB1cmxzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoXCJVUkwtUEFSU0VSXCIsIChyZXN1bHQpID0+IHtcclxuICAgICAgY29uc3QgdXJsUGFyc2VyID0gcmVzdWx0W1wiVVJMLVBBUlNFUlwiXSB8fCB7fTtcclxuICAgICAgY29uc3QgY3VycmVudFVSTCA9IHVybFBhcnNlcltcImN1cnJlbnRcIl07XHJcbiAgICAgIFxyXG4gICAgICBpZiAoIXVybFBhcnNlcltjdXJyZW50VVJMXSkge1xyXG4gICAgICAgIHVybFBhcnNlcltjdXJyZW50VVJMXSA9IHsgY3VyclBhZ2U6IFtdLCBleHRlcm5hbEpTRmlsZXM6IHt9IH07XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmICghdXJsUGFyc2VyW2N1cnJlbnRVUkxdLmV4dGVybmFsSlNGaWxlcykge1xyXG4gICAgICAgIHVybFBhcnNlcltjdXJyZW50VVJMXS5leHRlcm5hbEpTRmlsZXMgPSB7fTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdXJsUGFyc2VyW2N1cnJlbnRVUkxdLmV4dGVybmFsSlNGaWxlc1tlbmNvZGVkVVJMXSA9IHVybHM7XHJcblxyXG4gICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBcIlVSTC1QQVJTRVJcIjogdXJsUGFyc2VyIH0sICgpID0+IHtcclxuICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2F2aW5nIHRvIHN0b3JhZ2U6XCIsIGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcik7XHJcbiAgICAgICAgICByZWplY3QoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYFNhdmVkICR7dXJscy5sZW5ndGh9IGVuZHBvaW50cyBmcm9tIGV4dGVybmFsIEpTIGZpbGU6ICR7ZW5jb2RlZFVSTH1gKTtcclxuICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVVSTENvdW50KGNvdW50OiBudW1iZXIpIHtcclxuICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7IGFjdGlvbjogJ3VwZGF0ZVVSTENvdW50JywgY291bnQgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUpTRmlsZUNvdW50KGNvdW50OiBudW1iZXIpIHtcclxuICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7IGFjdGlvbjogJ3VwZGF0ZUpTRmlsZUNvdW50JywgY291bnQgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3VudFVSTHMoKSB7XHJcbiAgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KCdVUkwtUEFSU0VSJywgKHJlc3VsdCkgPT4ge1xyXG4gICAgY29uc3QgdXJsUGFyc2VyID0gcmVzdWx0WydVUkwtUEFSU0VSJ10gfHwge307XHJcbiAgICBjb25zdCBjdXJyZW50VVJMID0gdXJsUGFyc2VyW1wiY3VycmVudFwiXTtcclxuICAgIGlmIChjdXJyZW50VVJMICYmIHVybFBhcnNlcltjdXJyZW50VVJMXSkge1xyXG4gICAgICBjb25zdCBwYWdlVVJMcyA9IHVybFBhcnNlcltjdXJyZW50VVJMXS5jdXJyUGFnZS5sZW5ndGg7XHJcbiAgICAgIGNvbnN0IGV4dGVybmFsVVJMcyA9IE9iamVjdC52YWx1ZXModXJsUGFyc2VyW2N1cnJlbnRVUkxdLmV4dGVybmFsSlNGaWxlcylcclxuICAgICAgICAucmVkdWNlKCh0b3RhbCwgdXJscykgPT4gKHRvdGFsIGFzIG51bWJlcikgKyAodXJscyBhcyBzdHJpbmdbXSkubGVuZ3RoLCAwKTtcclxuICAgICAgdXBkYXRlVVJMQ291bnQocGFnZVVSTHMgKyBleHRlcm5hbFVSTHMpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY291bnRKU0ZpbGVzKCkge1xyXG4gIGNvbnN0IHNjcmlwdFRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XHJcbiAgY29uc3QganNGaWxlQ291bnQgPSBBcnJheS5mcm9tKHNjcmlwdFRhZ3MpLmZpbHRlcihzY3JpcHQgPT4gc2NyaXB0LnNyYykubGVuZ3RoO1xyXG4gIHVwZGF0ZUpTRmlsZUNvdW50KGpzRmlsZUNvdW50KTtcclxufVxyXG5cclxuaW50ZXJmYWNlIFByb2dyZXNzQmFyRWxlbWVudCBleHRlbmRzIEhUTUxEaXZFbGVtZW50IHtcclxuICBzZXRQcm9ncmVzczogKHByb2dyZXNzOiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgc2V0U3RhdHVzOiAoc3RhdHVzOiBzdHJpbmcpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVByb2dyZXNzQmFyKCk6IFByb2dyZXNzQmFyRWxlbWVudCB7XHJcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgYXMgUHJvZ3Jlc3NCYXJFbGVtZW50O1xyXG4gIGNvbnRhaW5lci5pZCA9ICdwYXJzaW5nLXByb2dyZXNzLWNvbnRhaW5lcic7XHJcbiAgY29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBgXHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgcmlnaHQ6IDA7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzUzNTM1O1xyXG4gICAgcGFkZGluZzogMjVweDtcclxuICAgIHotaW5kZXg6IDk5OTk7XHJcbiAgICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7XHJcbiAgYDtcclxuXHJcbiAgY29uc3Qgc3RhdHVzVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIHN0YXR1c1RleHQuc3R5bGUuY3NzVGV4dCA9IGBcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1zaXplOiAyZW07XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBwcm9ncmVzc0Jhci5zdHlsZS5jc3NUZXh0ID0gYFxyXG4gICAgaGVpZ2h0OiAxMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U1ZTdlYjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgcHJvZ3Jlc3NGaWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgcHJvZ3Jlc3NGaWxsLnN0eWxlLmNzc1RleHQgPSBgXHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB3aWR0aDogMCU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2I4MmY2O1xyXG4gICAgdHJhbnNpdGlvbjogd2lkdGggMC4zcyBlYXNlLWluLW91dDtcclxuICBgO1xyXG5cclxuICBwcm9ncmVzc0Jhci5hcHBlbmRDaGlsZChwcm9ncmVzc0ZpbGwpO1xyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChzdGF0dXNUZXh0KTtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQocHJvZ3Jlc3NCYXIpO1xyXG5cclxuICBjb250YWluZXIuc2V0UHJvZ3Jlc3MgPSAocHJvZ3Jlc3M6IG51bWJlcikgPT4ge1xyXG4gICAgcHJvZ3Jlc3NGaWxsLnN0eWxlLndpZHRoID0gYCR7TWF0aC5taW4oMTAwLCBNYXRoLm1heCgwLCBwcm9ncmVzcykpfSVgO1xyXG4gIH07XHJcblxyXG4gIGNvbnRhaW5lci5zZXRTdGF0dXMgPSAoc3RhdHVzOiBzdHJpbmcpID0+IHtcclxuICAgIHN0YXR1c1RleHQudGV4dENvbnRlbnQgPSBzdGF0dXM7XHJcbiAgfTtcclxuXHJcbiAgZG9jdW1lbnQuYm9keS5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCBkb2N1bWVudC5ib2R5LmZpcnN0Q2hpbGQpO1xyXG4gIHJldHVybiBjb250YWluZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKHByb2dyZXNzOiBudW1iZXIsIHN0YXR1czogc3RyaW5nKTogdm9pZCB7XHJcbiAgbGV0IHByb2dyZXNzQmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhcnNpbmctcHJvZ3Jlc3MtY29udGFpbmVyJykgYXMgUHJvZ3Jlc3NCYXJFbGVtZW50O1xyXG4gIGlmICghcHJvZ3Jlc3NCYXIpIHtcclxuICAgIHByb2dyZXNzQmFyID0gY3JlYXRlUHJvZ3Jlc3NCYXIoKTtcclxuICB9XHJcbiAgcHJvZ3Jlc3NCYXIuc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MpO1xyXG4gIHByb2dyZXNzQmFyLnNldFN0YXR1cyhzdGF0dXMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVQcm9ncmVzc0JhcigpOiB2b2lkIHtcclxuICBjb25zdCBwcm9ncmVzc0JhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXJzaW5nLXByb2dyZXNzLWNvbnRhaW5lcicpO1xyXG4gIGlmIChwcm9ncmVzc0Jhcikge1xyXG4gICAgcHJvZ3Jlc3NCYXIucmVtb3ZlKCk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgcGFyc2VVUkxzLCBjb3VudFVSTHMsIGNvdW50SlNGaWxlcywgcGFyc2VVUkxzTWFudWFsbHkgfSBmcm9tICcuL3VybFBhcnNlcic7XHJcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICcuLi9zaGFyZWRUeXBlcy9tZXNzYWdlX3R5cGVzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cE1lc3NhZ2VMaXN0ZW5lcnMoKSB7XHJcbiAgY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKChtZXNzYWdlOiBNZXNzYWdlLCBzZW5kZXIsIHNlbmRSZXNwb25zZSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ0NvbnRlbnQgc2NyaXB0IHJlY2VpdmVkIG1lc3NhZ2U6JywgbWVzc2FnZSk7XHJcblxyXG4gICAgc3dpdGNoIChtZXNzYWdlLmFjdGlvbikge1xyXG4gICAgICBjYXNlICdnZXRDdXJyVGFiRGF0YSc6XHJcbiAgICAgICAgcGFyc2VVUkxzKCk7XHJcbiAgICAgICAgc2VuZFJlc3BvbnNlKHsgZGF0YTogJ1BhcnNlZCBVUkxzJyB9KTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnY291bnRVUkxzJzpcclxuICAgICAgICBjb3VudFVSTHMoKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnY291bnRKU0ZpbGVzJzpcclxuICAgICAgICBjb3VudEpTRmlsZXMoKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAncGFyc2VVUkxzJzpcclxuICAgICAgICAvLyBwYXJzZVVSTHMoKTtcclxuICAgICAgICBwYXJzZVVSTHNNYW51YWxseSgpXHJcbiAgICAgICAgc2VuZFJlc3BvbnNlKHsgZGF0YTogJ1BhcnNlZCBVUkxzJyB9KTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9KTtcclxufSIsImltcG9ydCB7IHNldHVwTWVzc2FnZUxpc3RlbmVycyB9IGZyb20gJy4vY29tcG9uZW50cy9jb250ZW50L21lc3NhZ2VIYW5kbGVyJztcclxuaW1wb3J0IHsgcGFyc2VVUkxzIH0gZnJvbSAnLi9jb21wb25lbnRzL2NvbnRlbnQvdXJsUGFyc2VyJztcclxuXHJcbi8vIFNldCB1cCBtZXNzYWdlIGxpc3RlbmVyc1xyXG5zZXR1cE1lc3NhZ2VMaXN0ZW5lcnMoKTtcclxuXHJcbi8vIFBhcnNlIFVSTHMgb24gcGFnZSBsb2FkIGlmIHVybFBhcnNlciBpcyBlbmFibGVkXHJcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KFwidXJsUGFyc2VyXCIsICh1cmxQYXJzZXJTdGF0ZSkgPT4ge1xyXG4gICAgaWYgKHVybFBhcnNlclN0YXRlLnVybFBhcnNlcikge1xyXG4gICAgICBwYXJzZVVSTHMoKTtcclxuICAgIH1cclxuICB9KTtcclxufTsiXSwibmFtZXMiOlsiUkVMX1JFR0VYIiwiQUJTX1JFR0VYIiwicGFyc2VkSlNGaWxlcyIsInN1Y2Nlc3NmdWxseUZldGNoZWRGaWxlcyIsImZhaWxlZEZldGNoQXR0ZW1wdHMiLCJNQVhfUkVUUllfQVRURU1QVFMiLCJGRVRDSF9USU1FT1VUIiwiTUFYX0ZJTEVTX1RPX1BST0NFU1MiLCJNQVhfUFJPQ0VTU0lOR19USU1FIiwiQ09OQ1VSUkVOVF9SRVFVRVNUUyIsInJlc3VsdCIsInBhcnNlVVJMcyIsInNjb3BlcyIsImhvc3QiLCJiYXNlRG9tYWluIiwic2NvcGUiLCJ1cGRhdGVQcm9ncmVzcyIsInBhcnNlX2N1cnJfcGFnZSIsInBhcnNlX2V4dGVybmFsX2ZpbGVzIiwicmVtb3ZlUHJvZ3Jlc3NCYXIiLCJwYXJzZVVSTHNNYW51YWxseSIsInBhZ2VDb250ZW50IiwiYWJQYWdlVVJMcyIsIm1hdGNoIiwicmVsUGFnZVVSTHMiLCJwYWdlVVJMcyIsImN1cnJQYWdlIiwicmVzb2x2ZSIsInVybFBhcnNlciIsInVwZGF0ZVVSTENvdW50Iiwic2NyaXB0VGFncyIsImpzX2ZpbGVzIiwic2NyaXB0Iiwib2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJtdXRhdGlvbiIsIm5ld0ZpbGVzIiwibm9kZSIsInNyYyIsInByb2Nlc3NpbmdTdGFydCIsImxhc3RMb2dUaW1lIiwidW5wYXJzZWRGaWxlcyIsImZpbGUiLCJpIiwiYmF0Y2giLCJwcm9jZXNzSlNGaWxlIiwianNfZmlsZSIsInByb2dyZXNzIiwidXBkYXRlSlNGaWxlQ291bnQiLCJjb2RlIiwiZmV0Y2hXaXRoVGltZW91dCIsImpzRmlsZVJlbFVSTHMiLCJqc0ZpbGVBYlVSTHMiLCJqc0ZpbGVVUkxzIiwiZW5jb2RlZFVSTCIsInNhdmVUb1N0b3JhZ2UiLCJlcnJvciIsImF0dGVtcHRzIiwiY29udHJvbGxlciIsImlkIiwicmVzcG9uc2UiLCJ1cmxzIiwicmVqZWN0IiwiY3VycmVudFVSTCIsImNvdW50IiwiY291bnRVUkxzIiwiZXh0ZXJuYWxVUkxzIiwidG90YWwiLCJjb3VudEpTRmlsZXMiLCJqc0ZpbGVDb3VudCIsImNyZWF0ZVByb2dyZXNzQmFyIiwiY29udGFpbmVyIiwic3RhdHVzVGV4dCIsInByb2dyZXNzQmFyIiwicHJvZ3Jlc3NGaWxsIiwic3RhdHVzIiwic2V0dXBNZXNzYWdlTGlzdGVuZXJzIiwibWVzc2FnZSIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsInVybFBhcnNlclN0YXRlIl0sIm1hcHBpbmdzIjoiQUFBTyxNQUFNQSxFQUFZLHVDQUNaQyxFQUFZLDZCQ0V6QixJQUFJQyxNQUFpQyxJQUNqQ0MsTUFBNEMsSUFDNUNDLE1BQStDLElBQ25ELE1BQU1DLEVBQXFCLEVBQ3JCQyxFQUFnQixJQUNoQkMsRUFBdUIsSUFDdkJDLEVBQXNCLElBQzVCLElBQUlDLEVBRUosT0FBTyxRQUFRLE1BQU0sSUFBSSxXQUFhQyxHQUFXLENBQy9DRCxFQUFzQkMsRUFBTyxVQUFZLEVBQ2pDLFFBQUEsSUFBSSxvQkFBb0JELENBQW1CLHNCQUFzQixDQUMzRSxDQUFDLEVBRU0sU0FBU0UsR0FBa0IsQ0FDaEMsUUFBUSxJQUFJLG1CQUFtQixFQUMvQixPQUFPLFFBQVEsTUFBTSxJQUFJLFFBQVVELEdBQVcsQ0FDdEMsTUFBQUUsRUFBbUJGLEVBQU8sT0FBUyxHQUNuQ0csRUFBZSxTQUFTLFNBQVMsU0FDakNDLEVBQXFCRCxFQUFLLE1BQU0sR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLEtBQUssR0FBRyxFQUN6REQsRUFBTyxTQUFXLEdBQUtBLEVBQU8sS0FBY0csR0FBQUQsSUFBZUMsRUFBTSxZQUFBLEdBQWlCRixJQUFTRSxFQUFNLFlBQWEsQ0FBQSxHQUNoSEMsRUFBZSxFQUFHLFlBQVksRUFDOUIsUUFBUSxJQUFJLGlCQUFpQixFQUM3QkMsRUFBQSxFQUNHLEtBQUssSUFBTUMsR0FBc0IsRUFDakMsS0FBSyxJQUFNLENBQ1ZGLEVBQWUsSUFBSyxNQUFNLEVBQzFCLFFBQVEsSUFBSSxtQkFBbUIsRUFDL0IsV0FBV0csRUFBbUIsR0FBSSxDQUFBLENBQ25DLEdBRWVBLEdBQ3BCLENBQ0QsQ0FDSCxDQUVPLFNBQVNDLEdBQTBCLENBQ3hDbEIsTUFBb0IsSUFDcEIsUUFBUSxJQUFJLG1CQUFtQixFQUMv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
