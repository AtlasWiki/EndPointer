import{r as l,j as e,L as se,a as Z,c as xe,H as me,R as ue,b as A}from"../assets/index.BR82A1KU.js";function pe(){const[d,j]=l.useState(0);l.useEffect(()=>{chrome.storage.local.get("URL-PARSER",S=>{const m=S["URL-PARSER"];let b=0;Object.keys(m).forEach(o=>{if(o!=="current"){const R=m[o].currPage,u=m[o].externalJSFiles,L=R.length,U=Object.values(u).flat().length;b+=L+U}}),j(b)});const f=S=>{if(console.log("Storage changes detected:",S),S["URL-PARSER"]){const m=S["URL-PARSER"].newValue;console.log("'URL-PARSER' key changed. New value is:",m);let b=0;Object.keys(m).forEach(o=>{if(console.log("Processing key:",o),o!=="current"){const R=m[o].currPage,u=m[o].externalJSFiles;console.log(`For key ${o}: currPage URLs:`,R),console.log(`For key ${o}: externalJSFiles URLs:`,u);const L=R.length,U=Object.values(u).flat().length;console.log(`Total URLs in currPage for ${o}:`,L),console.log(`Total URLs in externalJSFiles for ${o}:`,U),b+=L+U}}),console.log("Total URL count after processing:",b),j(b)}else console.log("'URL-PARSER' key did not change.")};return chrome.storage.onChanged.addListener(f),()=>{chrome.storage.onChanged.removeListener(f)}},[]);function p(){chrome.storage.local.clear(()=>{alert("Cache cleared"),location.reload()})}function T(){chrome.storage.local.remove("URL-PARSER",function(){console.log("Key has been removed."),alert("Deleted urls"),window.location.reload()})}return e.jsxs("div",{className:"w-full md:h-screen m-0 flex flex-col px-5 mt-5",children:[e.jsxs("div",{className:"flex gap-1",children:[e.jsx("button",{className:"a-item a-color",onClick:()=>location.reload(),children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsxs("g",{fill:"none",stroke:"#4d4c4c",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"2",children:[e.jsx("path",{d:"M19.933 13.041a8 8 0 1 1-9.925-8.788c3.899-1 7.935 1.007 9.425 4.747"}),e.jsx("path",{d:"M20 4v5h-5"})]})})}),e.jsx("button",{className:"a-item a-color",onClick:p,children:"Clear Cache"}),e.jsx("button",{className:"a-item a-color p-2 rounded-md",onClick:T,children:e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"20",height:"20",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"none",stroke:"#F43F5E","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M4 7h16m-10 4v6m4-6v6M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2l1-12M9 7V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3"}),e.jsx("title",{children:"Delete URLs"})]})})]}),e.jsxs("div",{className:"mt-10 mb-10 w-full",children:[e.jsx("h1",{className:"text-3xl md:text-6xl mb-3 font-bold",children:"EndPointer Dashboard"}),e.jsx("p",{className:"text-gray-400/60 md:text-lg",children:"An endpoint parser and extractor with many flexible features by AtlasWiki/mrunoriginal and LordCat"}),e.jsx("hr",{className:"w-full mt-5"})]}),e.jsx("div",{className:"mt-5 flex flex-col gap-20 mx-0",children:e.jsxs("div",{className:"flex flex-col gap-1 md:gap-5",children:[e.jsx("h2",{className:"text-xl md:text-4xl",children:"Endpoint parsing"}),e.jsx("div",{className:"text-md flex gap-2",children:e.jsxs(se,{className:"a-item a-color font-semibold",to:"urls",children:[e.jsx("span",{className:"text-violet-500",children:"URLs"})," (",d,")"]})})]})})]})}function G(){return e.jsx("div",{children:e.jsx("nav",{children:e.jsx(se,{to:"/",children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsx("path",{fill:"#4d4c4c",d:"m7.825 13l5.6 5.6L12 20l-8-8l8-8l1.425 1.4l-5.6 5.6H20v2z"})})})})})}function te(){function d({endpoint:s,searchQuery:a}){const c=".^$*+?\\|()[]{}";let h="";for(const t of a)c.includes(t)&&(h+="\\"),h+=t;const y=s.url.split(new RegExp(`(${h})`,"gi")),[N,P]=l.useState(!1),[g,J]=l.useState(!1),[H,k]=l.useState(!1),[M,F]=l.useState({GET:0,POST:0,PUT:0,OPTIONS:0}),[D,K]=l.useState({GET:"",POST:"",PUT:"",OPTIONS:""}),[re,ae]=l.useState({GET:"",POST:"",PUT:"",OPTIONS:""}),[Y,ne]=l.useState("GET"),q=()=>{P(!1),J(!1),k(!1)},[oe,X]=l.useState({GET:[],POST:[],PUT:[],OPTIONS:[]}),$=()=>{let t;const n=s.webpage.replace(/\/$/,"").split("#")[0];return s.url&&(s.url.startsWith("http://")||s.url.startsWith("https://"))?t=s.url:s.url.startsWith("/")?t=n+s.url:t=n+"/"+s.url,t=t.replace(/([^:]\/)\/+/g,"$1"),t};l.useEffect(()=>{const t=async n=>{const B=$();try{const v=await fetch(B,{method:n}),W=[];v.headers.forEach((C,he)=>{W.push(`${he}: ${C}`)}),X(C=>({...C,[n]:W})),F(C=>({...C,[n]:v.status})),K(C=>({...C,[n]:v.statusText}));const O=await v.text(),de=Z.js(O,{indent_size:2,indent_char:" ",preserve_newlines:!0,max_preserve_newlines:2,end_with_newline:!0,wrap_line_length:0});ae(C=>({...C,[n]:de}))}catch(v){const W=v.message||"An unknown error occurred";X(O=>({...O,[n]:[`Error: ${W}`]})),F(O=>({...O,[n]:0})),K(O=>({...O,[n]:"Failed to fetch"}))}};H&&(t("GET"),t("POST"),t("PUT"),t("OPTIONS"))},[H]);const[ce,ie]=l.useState([]);return l.useEffect(()=>{g&&fetch(s.foundAt).then(t=>t.text()).then(t=>{const n=Z.js(t),B=new RegExp(`(?:^.*?(?:\\n.*?){0,1}(${s.url}).*?(?:\\n.*?){0,1})`,"gs");console.log(n);const v=n.match(B);ie(v||[])}).catch(()=>{console.error("request failed")})},[g]),e.jsxs("tr",{children:[e.jsxs("td",{className:"break-words max-w-lg",children:[y.map((t,n)=>t.toLowerCase()===a.toLowerCase()?e.jsx("span",{className:"text-red-500 font-semibold",children:t},n):e.jsx("span",{children:t},n)),e.jsxs("div",{className:"flex mt-2 items-center gap-1",children:[e.jsx("button",{className:"i-button",onClick:()=>J(!0),children:e.jsxs("svg",{className:"cursor-pointer hover:opacity-80",xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"#3da28f",d:"m8 18l-6-6l6-6l1.425 1.425l-4.6 4.6L9.4 16.6zm8 0l-1.425-1.425l4.6-4.6L14.6 7.4L16 6l6 6z"}),e.jsx("title",{children:"View Code Snippet"})]})}),e.jsx("button",{className:"i-button",onClick:()=>k(!0),children:e.jsxs("svg",{className:"cursor-pointer hover:opacity-80",xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"#3da28f",d:"M20 4H6c-1.103 0-2 .897-2 2v5h2V8l6.4 4.8a1 1 0 0 0 1.2 0L20 8v9h-8v2h8c1.103 0 2-.897 2-2V6c0-1.103-.897-2-2-2m-7 6.75L6.666 6h12.668z"}),e.jsx("path",{fill:"#3da28f",d:"M2 12h7v2H2zm2 3h6v2H4zm3 3h4v2H7z"}),e.jsx("title",{children:"See Response"})]})})]}),N&&e.jsx("div",{className:"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50",onClick:q,children:e.jsxs("div",{className:"bg-white p-5 rounded-lg shadow-lg",onClick:t=>t.stopPropagation(),children:[e.jsxs("h2",{className:"text-xl font-semibold text-black",children:["Generate Report for ",$()]}),e.jsx("p",{className:"text-black",children:"Content for Generate Report modal."}),e.jsx("button",{className:"mt-3 px-4 py-2 bg-blue-500 text-white rounded",onClick:()=>P(!1),children:"Close"})]})}),g&&e.jsx("div",{className:"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50",onClick:q,children:e.jsxs("div",{className:"bg-[#363333] opacity-85 p-5 rounded-lg shadow-lg max-w-6xl max-h-screen overflow-auto",onClick:t=>t.stopPropagation(),children:[e.jsxs("h2",{className:"text-lg font-semibold text-gray-400 mb-5",children:["View Code Snippet for ",$()]}),e.jsx("p",{className:"font-semibold text-gray-400",children:"Content for View Code Snippet modal."}),e.jsx("div",{children:ce.map((t,n)=>e.jsx("pre",{children:e.jsx("code",{children:t})},n))}),e.jsx("button",{className:"mt-3 px-4 py-2 bg-black text-white rounded",onClick:()=>J(!1),children:"Close"})]})}),H&&e.jsx("div",{className:"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50",onClick:q,children:e.jsxs("div",{className:"bg-[#363333] opacity-85 p-5 rounded-lg shadow-lg max-w-6xl max-h-screen overflow-auto",onClick:t=>t.stopPropagation(),children:[e.jsxs("h2",{className:"text-xl font-bold text-gray-400",children:["See Response for ",$()]}),e.jsxs("div",{className:"mt-3",children:[e.jsx("h3",{className:"text-lg font-semibold text-gray-400 mb-5",children:"Response"}),e.jsxs("ul",{className:"text-black overflow-y-auto p-2 bg-[#363333] opacity-85 rounded-md max-h-160",children:[e.jsxs("select",{className:"font-bold text-2xl text-purple-200 mb-4 bg-gray-600 w-full py-2 px-2",value:Y,onChange:t=>ne(t.target.value),children:[e.jsxs("option",{value:"GET",children:["[",M.GET,"] ",D.GET," GET"]}),e.jsxs("option",{value:"POST",children:["[",M.POST,"] ",D.POST," POST"]}),e.jsxs("option",{value:"PUT",children:["[",M.PUT,"] ",D.PUT," PUT"]}),e.jsxs("option",{value:"OPTIONS",children:["[",M.OPTIONS,"] ",D.OPTIONS," OPTIONS"]})]}),oe[Y].map((t,n)=>{const[B,...v]=t.split(": ");return e.jsxs("li",{className:"p-1",children:[e.jsxs("span",{className:"font-bold text-purple-200",children:[B,":"]}),e.jsxs("span",{className:"text-gray-200",children:[" ",v.join(": ")]})]},n)}),e.jsx("li",{children:e.jsx("pre",{className:"mt-5",children:e.jsx("span",{className:"text-gray-200",children:re[Y]})})})]})]}),e.jsx("button",{className:"mt-3 px-4 py-2 bg-black text-white rounded",onClick:()=>k(!1),children:"Close"})]})})]}),e.jsx("td",{className:"break-words max-w-lg",children:s.foundAt}),e.jsx("td",{className:"break-words max-w-lg text-center",children:s.webpage})]})}function j({url:s,onClick:a}){return e.jsx("div",{onClick:a,className:"bg-gray-500 text-white p-2 cursor-pointer text-ellipsis overflow-hidden whitespace-nowrap hover:bg-gray-600",children:s})}const[p,T]=l.useState([]),[f,S]=l.useState([]),[m,b]=l.useState("All"),[o,R]=l.useState(!1),[u,L]=l.useState(""),[U,z]=l.useState([]),[E,I]=l.useState(0),V=100,_=l.useRef(null);l.useEffect(()=>{const s=()=>{let c=[],h=[];chrome.storage.local.get("URL-PARSER",y=>{const N=y["URL-PARSER"];Object.keys(N).forEach(g=>{if(g!=="current"){const J=N[g].currPage,H=N[g].externalJSFiles;h.push(decodeURIComponent(g)),c.push(...J.map(k=>({url:k,foundAt:decodeURIComponent(g),webpage:decodeURIComponent(g)}))),Object.entries(H).forEach(([k,M])=>{const F=decodeURIComponent(k);h.includes(F)||h.push(F),c.push(...M.map(D=>({url:D,foundAt:F,webpage:decodeURIComponent(g)})))})}});const P=Array.from(new Set(["All",...h]));T(c),S(P)})};s();const a=c=>{c["URL-PARSER"]&&s()};return chrome.storage.onChanged.addListener(a),()=>{chrome.storage.onChanged.removeListener(a)}},[]);const Q=s=>{b(s),R(!1)},r=s=>{L(s.target.value)},x=p.filter(s=>{const a=m==="All"||s.foundAt===m,c=s.url.toLowerCase().includes(u.toLowerCase());return a&&c});l.useEffect(()=>{z(x.slice(E,E+V))},[p,m,u,E]);const i=()=>{if(_.current){const{scrollTop:s,scrollHeight:a,clientHeight:c}=_.current;a-s-c<200?I(N=>Math.min(N+20,p.length-V)):s<200&&E>0&&I(N=>Math.max(N-20,0))}};function w(){chrome.storage.local.set({"URL-PARSER":{}},()=>{console.log("Clear endpoints")})}return e.jsxs("div",{className:"w-full min-h-screen",children:[e.jsxs("div",{className:"ml-2 mt-2",children:[e.jsx(G,{}),e.jsx("button",{className:"a-item a-color mt-2",onClick:()=>location.reload(),children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsxs("g",{fill:"none",stroke:"#4d4c4c",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"2",children:[e.jsx("path",{d:"M19.933 13.041a8 8 0 1 1-9.925-8.788c3.899-1 7.935 1.007 9.425 4.747"}),e.jsx("path",{d:"M20 4v5h-5"})]})})}),e.jsx("thead",{children:e.jsxs("tr",{className:"text-5xl",children:[e.jsxs("th",{className:"border-b-2 pb-10",children:["ENDPOINT ",e.jsxs("span",{className:"text-[#3da28f]",children:["(",x.length,")"]})]}),e.jsxs("th",{className:"border-b-2 pb-10",children:["SOURCE ",e.jsxs("span",{className:"text-[#3da28f]",children:["(",f.length,")"]})]}),e.jsx("th",{className:"border-b-2 pb-10",children:"WEBPAGE"})]})})]}),e.jsx("div",{className:"mt-5 flex",children:e.jsxs("div",{className:"py-1 w-full flex flex-col gap-10",children:[e.jsxs("div",{className:"w-full max-h-[760px] overflow-auto",ref:_,onScroll:i,children:["  ",e.jsx("table",{className:"w-full border-collapse",children:e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx("div",{className:"mt-5 w-full",children:e.jsx("input",{type:"text",value:u,onChange:r,className:`px-2 border-2 border-gray-300 bg-transparent text-lg w-full pb-3 pt-3 rounded-md\r
                          cursor-pointer text-gray-300 hover:border-gray-500 outline-none focus:border-gray-500 transition-all duration-400`,placeholder:"Search endpoints..."})})}),e.jsx("td",{children:e.jsxs("div",{className:"relative w-full max-w-lg mt-5",children:[e.jsx("button",{onClick:()=>R(!o),className:"a-item w-full px-2 border-2 border-gray-300 bg-transparent text-lg rounded-md overflow-hidden text-ellipsis whitespace-nowrap",children:m}),o&&e.jsx("div",{className:"absolute mt-1 w-full bg-white border-2 border-gray-500 rounded-md shadow-lg z-10 max-h-60 overflow-auto",children:f.map((s,a)=>e.jsx(j,{url:s,onClick:()=>Q(s)},a))})]})})]}),U.map((s,a)=>e.jsx(d,{endpoint:s,searchQuery:u},E+a))]})})]}),e.jsxs("div",{className:"text-lg flex items-center space-x-4 px-5",children:[e.jsx("a",{href:document.location.origin+"/PopUp/popup.html#urls",target:"_blank",className:"bg-gray-950 p-3 rounded-md font-semibold text-[#646cff]",children:"WEBPAGE PANEL"}),e.jsx("button",{className:"a-item bg-gray-600 p-3 rounded-md",onClick:w,children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsx("path",{fill:"none",stroke:"black","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M4 7h16m-10 4v6m4-6v6M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2l1-12M9 7V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3"})})}),e.jsx("a",{href:document.location.origin+"/PopUp/popup.html#urls/output",target:"_blank",className:"a-item bg-gray-600 p-3 rounded-md font-semibold text-gray-300",children:"OUTPUT"})]})]})})]})}function le(){const[d,j]=l.useState({}),[p,T]=l.useState([]),[f,S]=l.useState("All"),[m,b]=l.useState(!1),[o,R]=l.useState(""),[u,L]=l.useState(new Set);l.useEffect(()=>{const r=()=>{let i={},w=[];chrome.storage.local.get("URL-PARSER",s=>{const a=s["URL-PARSER"];Object.keys(a).forEach(c=>{if(c!=="current"){const h=decodeURIComponent(c);i[h]={mainPage:[],jsFiles:{}},i[h].mainPage=a[c].currPage.map(y=>({url:y,foundAt:"Main Page",webpage:h})),Object.entries(a[c].externalJSFiles).forEach(([y,N])=>{const P=decodeURIComponent(y);w.push(P),i[h].jsFiles[P]=N.map(g=>({url:g,foundAt:P,webpage:h}))})}}),j(i),T(["All",...Array.from(new Set(w))])})};r();const x=i=>{i["URL-PARSER"]&&r()};return chrome.storage.onChanged.addListener(x),()=>{chrome.storage.onChanged.removeListener(x)}},[]);const U=r=>{S(r),b(!1)},z=r=>{R(r.target.value)},E=r=>{L(x=>{const i=new Set(x);return i.has(r)?i.delete(r):i.add(r),i})},I=r=>r.filter(x=>x.url.toLowerCase().includes(o.toLowerCase())&&(f==="All"||x.foundAt===f||x.webpage===f)),V=r=>{const x=r.url.split(new RegExp(`(${o})`,"gi"));return e.jsxs("div",{className:"ml-8 mt-1 flex items-center",children:[e.jsx("span",{className:"mr-2 text-blue-500",children:"➤"}),x.map((i,w)=>i.toLowerCase()===o.toLowerCase()?e.jsx("span",{className:"text-red-500 font-semibold",children:i},w):e.jsx("span",{children:i},w))]},r.url)},_=()=>Object.entries(d).map(([r,{mainPage:x,jsFiles:i}])=>{const w=I(x),s=Object.entries(i).filter(([a,c])=>I(c).length>0);return w.length===0&&s.length===0?null:e.jsxs("div",{className:"mb-4",children:[e.jsxs("div",{className:"text-xl font-bold cursor-pointer flex items-center",onClick:()=>E(r),children:[e.jsx("span",{className:"mr-2 text-green-500",children:"🌐"}),e.jsx("span",{className:"mr-2",children:u.has(r)?"▼":"▶"}),r]}),u.has(r)&&e.jsxs(e.Fragment,{children:[w.length>0&&e.jsxs("div",{className:"ml-4 mt-2",children:[e.jsxs("div",{className:"text-lg font-semibold cursor-pointer flex items-center",onClick:()=>E(`${r}-main`),children:[e.jsx("span",{className:"mr-2",children:u.has(`${r}-main`)?"▼":"▶"}),"Main Page"]}),u.has(`${r}-main`)&&w.map(V)]}),s.map(([a,c])=>{const h=I(c);return h.length===0?null:e.jsxs("div",{className:"ml-4 mt-2",children:[e.jsxs("div",{className:"text-lg font-semibold cursor-pointer flex items-center",onClick:()=>E(a),children:[e.jsx("span",{className:"mr-2 text-yellow-500",children:"📄"}),e.jsx("span",{className:"mr-2",children:u.has(a)?"▼":"▶"}),a]}),u.has(a)&&h.map(V)]},a)})]})]},r)});function Q(){chrome.storage.local.set({"URL-PARSER":{}},()=>{console.log("Clear endpoints")})}return e.jsxs("div",{className:"w-full min-h-screen",children:[e.jsx(G,{}),e.jsxs("div",{className:"mt-5 p-5",children:[e.jsxs("div",{className:"mb-5 flex gap-4",children:[e.jsx("input",{type:"text",value:o,onChange:z,className:`px-2 border-2 border-gray-300 bg-transparent text-lg w-full pb-3 pt-3 rounded-md\r
              cursor-pointer hover:border-gray-500 outline-none focus:border-gray-500 transition-all duration-400`,placeholder:"Search endpoints..."}),e.jsxs("div",{className:"relative w-64",children:[e.jsx("button",{onClick:()=>b(!m),className:"w-full py-4 px-2 border-2 border-gray-300 bg-transparent text-lg rounded-md overflow-hidden text-ellipsis whitespace-nowrap",children:f}),m&&e.jsx("div",{className:"absolute mt-1 w-full bg-white border-2 border-gray-500 rounded-md shadow-lg z-10 max-h-60 overflow-auto",children:p.map((r,x)=>e.jsx("div",{onClick:()=>U(r),className:"bg-gray-500 text-white p-2 cursor-pointer text-ellipsis overflow-hidden whitespace-nowrap hover:bg-gray-600",children:r},x))})]})]}),e.jsx("div",{className:"border rounded-lg p-4 max-h-[600px] overflow-auto",children:_()}),e.jsxs("div",{className:"text-lg flex items-center space-x-4 mt-5",children:[e.jsx("a",{href:document.location.origin+"/PopUp/popup.html#urls",target:"_blank",className:"bg-gray-950 p-3 rounded-md font-semibold text-[#646cff]",children:"WEBPAGE PANEL"}),e.jsx("button",{className:"a-item bg-gray-600 p-3 rounded-md",onClick:Q,children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsx("path",{fill:"none",stroke:"black","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M4 7h16m-10 4v6m4-6v6M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2l1-12M9 7V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3"})})}),e.jsx("a",{href:document.location.origin+"/PopUp/popup.html#urls/output",target:"_blank",className:"a-item bg-gray-600 p-3 rounded-md font-semibold text-gray-300",children:"OUTPUT"})]})]})]})}function ge(){return e.jsxs("div",{children:[e.jsx(G,{}),e.jsx("h1",{children:"JS FILES"}),e.jsxs("p",{children:["Located at  ",document.location.href]})]})}function je(){return e.jsxs("div",{className:"w-full min-h-screen",children:[e.jsxs("div",{className:"ml-2 mt-2",children:[e.jsx(G,{}),e.jsx("button",{className:"a-item a-color mt-2",onClick:()=>location.reload(),children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsxs("g",{fill:"none",stroke:"#4d4c4c","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",children:[e.jsx("path",{d:"M19.933 13.041a8 8 0 1 1-9.925-8.788c3.899-1 7.935 1.007 9.425 4.747"}),e.jsx("path",{d:"M20 4v5h-5"})]})})})]}),e.jsx("div",{className:"mt-5 flex",children:e.jsxs("div",{className:"py-1 w-full flex flex-col gap-10",children:[e.jsx("div",{className:"w-full max-h-[760px] overflow-auto",children:e.jsxs("table",{className:"w-full border-collapse",children:[e.jsx("thead",{children:e.jsxs("tr",{className:"text-5xl",children:[e.jsxs("th",{className:"secrets-th border-b-2 pb-10",children:["IDENTIFIER ",e.jsx("span",{className:"text-[#3da28f]"})]}),e.jsx("th",{className:"secrets-th border-b-2 pb-10",children:"VALUE"}),e.jsx("th",{className:"secrets-th border-b-2 pb-10",children:"LOCATION"}),e.jsx("th",{className:"secrets-th border-b-2 pb-10",children:"CODE"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{className:"secrets-td",children:"AUTH_KEY"}),e.jsx("td",{className:"secrets-td",children:"123supersecret"}),e.jsx("td",{className:"secrets-td",children:"http://blah.com/parse.js"}),e.jsx("td",{className:"secrets-td",children:e.jsx("a",{href:"#",children:"View Here"})})]}),e.jsxs("tr",{children:[e.jsx("td",{className:"secrets-td",children:"admin_pw"}),e.jsx("td",{className:"secrets-td",children:"123supersecretadmin"}),e.jsx("td",{className:"secrets-td",children:"http://blah.com/parse.js"}),e.jsx("td",{className:"secrets-td",children:e.jsx("a",{href:"#",children:"View Here"})})]})]})]})}),e.jsxs("div",{className:"text-lg flex items-center space-x-4 px-5",children:[e.jsx("a",{href:document.location.origin+"/PopUp/popup.html#urls",target:"_blank",className:"bg-gray-950 p-3 rounded-md",children:"Open in New Tab"}),e.jsx("button",{className:"a-item bg-gray-600 p-3 rounded-md",children:"Download as TXT"}),e.jsx("button",{className:"a-item bg-gray-600 p-3 rounded-md",children:"Download as JSON"}),e.jsx("button",{className:"a-item bg-gray-600 p-3 rounded-md",children:"Copy as absolute URLs"}),e.jsx("button",{className:"a-item bg-gray-600 p-3 rounded-md",children:"Copy All"})]})]})})]})}function fe(){const d=new Date;return e.jsxs("div",{className:"w-full min-h-screen",children:[e.jsx(G,{}),e.jsx("div",{className:"mt-5 flex flex-col w-full gap-5",children:e.jsxs("div",{className:"py-1 w-full flex flex-col gap-10",children:[e.jsxs("table",{className:"w-full mb-5 border-collapse",children:[e.jsx("thead",{children:e.jsxs("tr",{className:"text-2xl",children:[e.jsx("th",{className:"border-b-2 pb-10",children:"URLS VISITED"}),e.jsx("th",{className:"border-b-2 pb-10",children:"FILES"}),e.jsx("th",{className:"border-b-2 pb-10",children:"FILE CHANGED"}),e.jsx("th",{className:"border-b-2 pb-10",children:"LAST ACCESSED"})]})}),e.jsx("div",{className:"mt-20"}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:document.location.href}),e.jsx("td",{children:"cart.js"}),e.jsx("td",{children:"YES"}),e.jsx("td",{children:d.toString()})]}),e.jsxs("tr",{children:[e.jsx("td",{children:document.location.href}),e.jsx("td",{children:"cart.js"}),e.jsx("td",{children:"YES"}),e.jsx("td",{children:d.toString()})]}),e.jsxs("tr",{children:[e.jsx("td",{children:document.location.href}),e.jsx("td",{children:"cart.js"}),e.jsx("td",{children:"YES"}),e.jsx("td",{children:d.toString()})]})]})]}),e.jsxs("div",{className:"text-lg flex items-center space-x-4 px-5",children:[e.jsx("a",{href:document.location.href,target:"_blank",className:"bg-gray-950 p-3 rounded-md",children:"Open in New Tab"}),e.jsx("button",{className:"bg-gray-800 p-3 rounded-md",children:"Download as TXT"})]})]})})]})}function be(){const[d,j]=l.useState("default");return e.jsxs("div",{children:[e.jsxs("div",{className:"flex",children:[e.jsx("button",{className:`px-10 py-2 font-semibold ${d=="default"?"text-purple-500 bg-black":""}`,onClick:()=>j("default"),children:"DEFAULT"}),e.jsx("button",{className:`px-10 py-2 font-semibold ${d=="tree"?"text-purple-500 bg-black":""}`,onClick:()=>j("tree"),children:"TREE"})]}),e.jsx("div",{className:"py-1"}),d==="default"?e.jsx(te,{}):e.jsx(le,{})]})}chrome.devtools.panels.create("endPointer","","DevTool/DevTool.html",d=>{console.log("DevTools panel created");const j=()=>{chrome.tabs.get(chrome.devtools.inspectedWindow.tabId,p=>{p&&p.url?console.log("Current URL:",p.url):console.error("Unable to get current tab URL")})};d.onShown.addListener(j),chrome.tabs.onUpdated.addListener((p,T,f)=>{p===chrome.devtools.inspectedWindow.tabId&&T.status==="complete"&&j()})});function ee(){const d=document.getElementById("root");d?xe(d).render(e.jsx(l.StrictMode,{children:e.jsx(me,{children:e.jsxs(ue,{children:[e.jsx(A,{path:"/",element:e.jsx(pe,{})}),e.jsx(A,{path:"/urls/",element:e.jsx(be,{})}),e.jsx(A,{path:"/urls/default",element:e.jsx(te,{})}),e.jsx(A,{path:"/urls/tree",element:e.jsx(le,{})}),e.jsx(A,{path:"/js-files",element:e.jsx(ge,{})}),e.jsx(A,{path:"/secrets",element:e.jsx(je,{})}),e.jsx(A,{path:"/urlsvisited",element:e.jsx(fe,{})})]})})})):console.log("Root element not found")}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",ee):ee();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2dG9vbFJvdXRlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0RldlRvb2wvRGV2dG9vbHNBcHAudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvbmF2YmFyLnRzeCIsIi4uLy4uL3NyYy9EZXZUb29sL3JvdXRlcy91cmxzLWRlZmF1bHR2aWV3LnRzeCIsIi4uLy4uL3NyYy9EZXZUb29sL3JvdXRlcy91cmxzLXRyZWV2aWV3LnRzeCIsIi4uLy4uL3NyYy9EZXZUb29sL3JvdXRlcy9qcy1maWxlcy50c3giLCIuLi8uLi9zcmMvRGV2VG9vbC9yb3V0ZXMvc2VjcmV0cy50c3giLCIuLi8uLi9zcmMvRGV2VG9vbC9yb3V0ZXMvdXJsc3Zpc2l0ZWQudHN4IiwiLi4vLi4vc3JjL0RldlRvb2wvcm91dGVzL3VybHMudHN4IiwiLi4vLi4vc3JjL0RldlRvb2wvRGV2dG9vbFJvdXRlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcbmltcG9ydCAnLi9pbmRleC5jc3MnXHJcbmltcG9ydCAnLi9BcHAuY3NzJ1xyXG5cclxuZnVuY3Rpb24gRGV2VG9vbHNBcHAoKSB7XHJcbiAgY29uc3QgW3VybENvdW50LCBzZXRVUkxDb3VudF0gPSB1c2VTdGF0ZSgwKVxyXG4gIC8vIGNvbnN0IFtjcmVkQ291bnQsIHNldENyZWRDb3VudF0gPSB1c2VTdGF0ZSgwKVxyXG4gIC8vIGNvbnN0IFthcGlLZXlDb3VudCwgc2V0QXBpS2V5Q291bnRdID0gdXNlU3RhdGUoMClcclxuICAvLyBjb25zdCBbZmlsZUNvdW50LCBzZXRGaWxlQ291bnRdID0gdXNlU3RhdGUoMClcclxuXHJcbiAgLy8gdXNlRWZmZWN0KCgpID0+IHtcclxuICAvLyAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbJ3VybENvdW50JywgJ2NyZWRDb3VudCcsICdhcGlLZXlDb3VudCcsICdqc0ZpbGVDb3VudCddLCAocmVzdWx0KSA9PiB7XHJcbiAgLy8gICAgIHNldFVSTENvdW50KHJlc3VsdC51cmxDb3VudCB8fCAwKVxyXG4gIC8vICAgICBzZXRDcmVkQ291bnQocmVzdWx0LmNyZWRDb3VudCB8fCAwKVxyXG4gIC8vICAgICBzZXRBcGlLZXlDb3VudChyZXN1bHQuYXBpS2V5Q291bnQgfHwgMClcclxuICAvLyAgICAgc2V0RmlsZUNvdW50KHJlc3VsdC5qc0ZpbGVDb3VudCB8fCAwKVxyXG4gIC8vICAgfSlcclxuXHJcbiAgLy8gICBjb25zdCBoYW5kbGVTdG9yYWdlQ2hhbmdlID0gKGNoYW5nZXM6IHsgW2tleTogc3RyaW5nXTogY2hyb21lLnN0b3JhZ2UuU3RvcmFnZUNoYW5nZSB9KSA9PiB7XHJcbiAgLy8gICAgIGZvciAobGV0IGtleSBpbiBjaGFuZ2VzKSB7XHJcbiAgLy8gICAgICAgY29uc3Qgc3RvcmFnZUNoYW5nZSA9IGNoYW5nZXNba2V5XVxyXG4gIC8vICAgICAgIHN3aXRjaChrZXkpIHtcclxuICAvLyAgICAgICAgIGNhc2UgJ3VybENvdW50JzpcclxuICAvLyAgICAgICAgICAgc2V0VVJMQ291bnQoc3RvcmFnZUNoYW5nZS5uZXdWYWx1ZSlcclxuICAvLyAgICAgICAgICAgYnJlYWtcclxuICAvLyAgICAgICAgIGNhc2UgJ2NyZWRDb3VudCc6XHJcbiAgLy8gICAgICAgICAgIHNldENyZWRDb3VudChzdG9yYWdlQ2hhbmdlLm5ld1ZhbHVlKVxyXG4gIC8vICAgICAgICAgICBicmVha1xyXG4gIC8vICAgICAgICAgY2FzZSAnYXBpS2V5Q291bnQnOlxyXG4gIC8vICAgICAgICAgICBzZXRBcGlLZXlDb3VudChzdG9yYWdlQ2hhbmdlLm5ld1ZhbHVlKVxyXG4gIC8vICAgICAgICAgICBicmVha1xyXG4gIC8vICAgICAgICAgY2FzZSAnanNGaWxlQ291bnQnOlxyXG4gIC8vICAgICAgICAgICBzZXRGaWxlQ291bnQoc3RvcmFnZUNoYW5nZS5uZXdWYWx1ZSlcclxuICAvLyAgICAgICAgICAgYnJlYWtcclxuICAvLyAgICAgICB9XHJcbiAgLy8gICAgIH1cclxuICAvLyAgIH1cclxuXHJcbiAgLy8gICBjaHJvbWUuc3RvcmFnZS5vbkNoYW5nZWQuYWRkTGlzdGVuZXIoaGFuZGxlU3RvcmFnZUNoYW5nZSlcclxuXHJcbiAgLy8gICByZXR1cm4gKCkgPT4ge1xyXG4gIC8vICAgICBjaHJvbWUuc3RvcmFnZS5vbkNoYW5nZWQucmVtb3ZlTGlzdGVuZXIoaGFuZGxlU3RvcmFnZUNoYW5nZSlcclxuICAvLyAgIH1cclxuICAvLyB9LCBbXSlcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIC8vIEZldGNoIHRoZSBpbml0aWFsIGRhdGFcclxuICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChcIlVSTC1QQVJTRVJcIiwgKGRhdGEpID0+IHtcclxuICAgICAgY29uc3QgdXJsUGFyc2VyID0gZGF0YVtcIlVSTC1QQVJTRVJcIl07XHJcbiAgICAgIGxldCB0b3RhbFVSTENvdW50ID0gMDtcclxuICBcclxuICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2gga2V5IGluIFVSTC1QQVJTRVJcclxuICAgICAgT2JqZWN0LmtleXModXJsUGFyc2VyKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICBpZiAoa2V5ICE9PSBcImN1cnJlbnRcIikge1xyXG4gICAgICAgICAgY29uc3QgY3VyclVSTEVuZHBvaW50cyA9IHVybFBhcnNlcltrZXldW1wiY3VyclBhZ2VcIl07XHJcbiAgICAgICAgICBjb25zdCBjdXJyVVJMRXh0SlNGaWxlcyA9IHVybFBhcnNlcltrZXldW1wiZXh0ZXJuYWxKU0ZpbGVzXCJdO1xyXG4gIFxyXG4gICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBudW1iZXIgb2YgVVJMcyBpbiBjdXJyUGFnZSBhbmQgZXh0ZXJuYWxKU0ZpbGVzXHJcbiAgICAgICAgICBjb25zdCB0b3RhbEVuZHBvaW50c0luQ3VyclBhZ2UgPSBjdXJyVVJMRW5kcG9pbnRzLmxlbmd0aDtcclxuICAgICAgICAgIGNvbnN0IHRvdGFsRW5kcG9pbnRzSW5FeHRKU0ZpbGVzID0gT2JqZWN0LnZhbHVlcyhjdXJyVVJMRXh0SlNGaWxlcykuZmxhdCgpLmxlbmd0aDtcclxuICBcclxuICAgICAgICAgIC8vIEFjY3VtdWxhdGUgdGhlIHRvdGFsIFVSTCBjb3VudFxyXG4gICAgICAgICAgdG90YWxVUkxDb3VudCArPSB0b3RhbEVuZHBvaW50c0luQ3VyclBhZ2UgKyB0b3RhbEVuZHBvaW50c0luRXh0SlNGaWxlcztcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIFxyXG4gICAgICAvLyBTZXQgdGhlIHRvdGFsIFVSTCBjb3VudFxyXG4gICAgICBzZXRVUkxDb3VudCh0b3RhbFVSTENvdW50KTtcclxuICAgIH0pO1xyXG4gIFxyXG4gICAgLy8gTGlzdGVuZXIgZm9yIGxpdmUgdXBkYXRlcyBmcm9tIGNocm9tZS5zdG9yYWdlXHJcbiAgICBjb25zdCBoYW5kbGVTdG9yYWdlQ2hhbmdlID0gKGNoYW5nZXM6IHsgW2tleTogc3RyaW5nXTogY2hyb21lLnN0b3JhZ2UuU3RvcmFnZUNoYW5nZSB9KSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiU3RvcmFnZSBjaGFuZ2VzIGRldGVjdGVkOlwiLCBjaGFuZ2VzKTsgLy8gTG9ncyB0aGUgZW50aXJlIGNoYW5nZXMgb2JqZWN0XHJcbiAgICBcclxuICAgICAgaWYgKGNoYW5nZXNbXCJVUkwtUEFSU0VSXCJdKSB7XHJcbiAgICAgICAgY29uc3QgbmV3VXJsUGFyc2VyID0gY2hhbmdlc1tcIlVSTC1QQVJTRVJcIl0ubmV3VmFsdWU7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCInVVJMLVBBUlNFUicga2V5IGNoYW5nZWQuIE5ldyB2YWx1ZSBpczpcIiwgbmV3VXJsUGFyc2VyKTsgLy8gTG9ncyBuZXcgdmFsdWUgb2YgJ1VSTC1QQVJTRVInXHJcbiAgICBcclxuICAgICAgICBsZXQgdXBkYXRlZFRvdGFsVVJMQ291bnQgPSAwO1xyXG4gICAgXHJcbiAgICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2gga2V5IGluIHRoZSB1cGRhdGVkICdVUkwtUEFSU0VSJ1xyXG4gICAgICAgIE9iamVjdC5rZXlzKG5ld1VybFBhcnNlcikuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlByb2Nlc3Npbmcga2V5OlwiLCBrZXkpOyAvLyBMb2dzIHRoZSBrZXkgd2UgYXJlIGN1cnJlbnRseSBwcm9jZXNzaW5nXHJcbiAgICBcclxuICAgICAgICAgIC8vIFNraXAgdGhlIFwiY3VycmVudFwiIGtleVxyXG4gICAgICAgICAgaWYgKGtleSAhPT0gXCJjdXJyZW50XCIpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VyclVSTEVuZHBvaW50cyA9IG5ld1VybFBhcnNlcltrZXldW1wiY3VyclBhZ2VcIl07XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJVUkxFeHRKU0ZpbGVzID0gbmV3VXJsUGFyc2VyW2tleV1bXCJleHRlcm5hbEpTRmlsZXNcIl07XHJcbiAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYEZvciBrZXkgJHtrZXl9OiBjdXJyUGFnZSBVUkxzOmAsIGN1cnJVUkxFbmRwb2ludHMpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRm9yIGtleSAke2tleX06IGV4dGVybmFsSlNGaWxlcyBVUkxzOmAsIGN1cnJVUkxFeHRKU0ZpbGVzKTtcclxuICAgIFxyXG4gICAgICAgICAgICAvLyBDb3VudCB0aGUgVVJMcyBpbiBjdXJyUGFnZSBhbmQgZXh0ZXJuYWxKU0ZpbGVzXHJcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsRW5kcG9pbnRzSW5DdXJyUGFnZSA9IGN1cnJVUkxFbmRwb2ludHMubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCB0b3RhbEVuZHBvaW50c0luRXh0SlNGaWxlcyA9IE9iamVjdC52YWx1ZXMoY3VyclVSTEV4dEpTRmlsZXMpLmZsYXQoKS5sZW5ndGg7XHJcbiAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFRvdGFsIFVSTHMgaW4gY3VyclBhZ2UgZm9yICR7a2V5fTpgLCB0b3RhbEVuZHBvaW50c0luQ3VyclBhZ2UpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgVG90YWwgVVJMcyBpbiBleHRlcm5hbEpTRmlsZXMgZm9yICR7a2V5fTpgLCB0b3RhbEVuZHBvaW50c0luRXh0SlNGaWxlcyk7XHJcbiAgICBcclxuICAgICAgICAgICAgLy8gVXBkYXRlIHRvdGFsIFVSTCBjb3VudFxyXG4gICAgICAgICAgICB1cGRhdGVkVG90YWxVUkxDb3VudCArPSB0b3RhbEVuZHBvaW50c0luQ3VyclBhZ2UgKyB0b3RhbEVuZHBvaW50c0luRXh0SlNGaWxlcztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiVG90YWwgVVJMIGNvdW50IGFmdGVyIHByb2Nlc3Npbmc6XCIsIHVwZGF0ZWRUb3RhbFVSTENvdW50KTsgLy8gTG9ncyB0aGUgdG90YWwgY291bnQgb2YgVVJMc1xyXG4gICAgICAgIHNldFVSTENvdW50KHVwZGF0ZWRUb3RhbFVSTENvdW50KTsgLy8gVXBkYXRlIHRoZSBzdGF0ZSB3aXRoIHRoZSBuZXcgVVJMIGNvdW50XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCInVVJMLVBBUlNFUicga2V5IGRpZCBub3QgY2hhbmdlLlwiKTsgLy8gTG9ncyBpZiAnVVJMLVBBUlNFUicgd2Fzbid0IHBhcnQgb2YgdGhlIGNoYW5nZXNcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gIFxyXG4gICAgY2hyb21lLnN0b3JhZ2Uub25DaGFuZ2VkLmFkZExpc3RlbmVyKGhhbmRsZVN0b3JhZ2VDaGFuZ2UpO1xyXG4gIFxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgY2hyb21lLnN0b3JhZ2Uub25DaGFuZ2VkLnJlbW92ZUxpc3RlbmVyKGhhbmRsZVN0b3JhZ2VDaGFuZ2UpO1xyXG4gICAgfTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGZ1bmN0aW9uIGNsZWFyQ2FjaGUoKSB7XHJcbiAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5jbGVhcigoKSA9PiB7XHJcbiAgICAgIGFsZXJ0KFwiQ2FjaGUgY2xlYXJlZFwiKVxyXG4gICAgICBsb2NhdGlvbi5yZWxvYWQoKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNsZWFyVVJMcygpe1xyXG4gICAgY2hyb21lLnN0b3JhZ2UubG9jYWwucmVtb3ZlKCdVUkwtUEFSU0VSJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0tleSBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG4gICAgICAgIGFsZXJ0KFwiRGVsZXRlZCB1cmxzXCIpXHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbCBtZDpoLXNjcmVlbiBtLTAgZmxleCBmbGV4LWNvbCBweC01IG10LTVcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGdhcC0xXCI+XHJcbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJhLWl0ZW0gYS1jb2xvclwiIG9uQ2xpY2s9eygpID0+IGxvY2F0aW9uLnJlbG9hZCgpfT5cclxuICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48ZyBmaWxsPVwibm9uZVwiIHN0cm9rZT1cIiM0ZDRjNGNcIiBzdHJva2VMaW5lY2FwPVwicm91bmRcIiBzdHJva2VMaW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlV2lkdGg9XCIyXCI+PHBhdGggZD1cIk0xOS45MzMgMTMuMDQxYTggOCAwIDEgMS05LjkyNS04Ljc4OGMzLjg5OS0xIDcuOTM1IDEuMDA3IDkuNDI1IDQuNzQ3XCIvPjxwYXRoIGQ9XCJNMjAgNHY1aC01XCIvPjwvZz48L3N2Zz5cclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImEtaXRlbSBhLWNvbG9yXCIgb25DbGljaz17Y2xlYXJDYWNoZX0+XHJcbiAgICAgICAgICBDbGVhciBDYWNoZVxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYS1pdGVtIGEtY29sb3IgcC0yIHJvdW5kZWQtbWRcIiBvbkNsaWNrPXtjbGVhclVSTHN9PlxyXG4gICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjIwXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiI0Y0M0Y1RVwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTQgN2gxNm0tMTAgNHY2bTQtNnY2TTUgN2wxIDEyYTIgMiAwIDAgMCAyIDJoOGEyIDIgMCAwIDAgMi0ybDEtMTJNOSA3VjRhMSAxIDAgMCAxIDEtMWg0YTEgMSAwIDAgMSAxIDF2M1wiLz5cclxuICAgICAgICAgICAgPHRpdGxlPkRlbGV0ZSBVUkxzPC90aXRsZT5cclxuICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC0xMCBtYi0xMCB3LWZ1bGxcIj5cclxuICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC0zeGwgbWQ6dGV4dC02eGwgbWItMyBmb250LWJvbGRcIj5FbmRQb2ludGVyIERhc2hib2FyZDwvaDE+XHJcbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1ncmF5LTQwMC82MCBtZDp0ZXh0LWxnXCI+QW4gZW5kcG9pbnQgcGFyc2VyIGFuZCBleHRyYWN0b3Igd2l0aCBtYW55IGZsZXhpYmxlIGZlYXR1cmVzIGJ5IEF0bGFzV2lraS9tcnVub3JpZ2luYWwgYW5kIExvcmRDYXQ8L3A+XHJcbiAgICAgICAgPGhyIGNsYXNzTmFtZT1cInctZnVsbCBtdC01XCI+PC9ocj5cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTUgZmxleCBmbGV4LWNvbCBnYXAtMjAgbXgtMFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBnYXAtMSBtZDpnYXAtNVwiPlxyXG4gICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQteGwgbWQ6dGV4dC00eGxcIj5FbmRwb2ludCBwYXJzaW5nPC9oMj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1tZCBmbGV4IGdhcC0yXCI+XHJcbiAgICAgICAgICAgICAgPExpbmsgY2xhc3NOYW1lPVwiYS1pdGVtIGEtY29sb3IgZm9udC1zZW1pYm9sZFwiIHRvPVwidXJsc1wiPjxzcGFuIGNsYXNzTmFtZT1cInRleHQtdmlvbGV0LTUwMFwiPlVSTHM8L3NwYW4+ICh7dXJsQ291bnR9KTwvTGluaz5cclxuICAgICAgICAgICAgICB7LyogPExpbmsgY2xhc3NOYW1lPVwiYS1pdGVtIGEtY29sb3IgZm9udC1zZW1pYm9sZFwiIHRvPVwiY3JlZHNcIj48c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXJvc2UtNTAwXCI+Q3JlZHM8L3NwYW4+ICh7Y3JlZENvdW50fSk8L0xpbms+XHJcbiAgICAgICAgICAgICAgPExpbmsgY2xhc3NOYW1lPVwiYS1pdGVtIGEtY29sb3IgZm9udC1zZW1pYm9sZFwiIHRvPVwiYXBpa2V5c1wiPjxzcGFuIGNsYXNzTmFtZT1cInRleHQtZW1lcmFsZC01MDBcIj5BUEkga2V5czwvc3Bhbj4gKHthcGlLZXlDb3VudH0pPC9MaW5rPlxyXG4gICAgICAgICAgICAgIDxMaW5rIGNsYXNzTmFtZT1cImEtaXRlbSBhLWNvbG9yIGZvbnQtc2VtaWJvbGRcIiB0bz1cInVybHN2aXNpdGVkXCI+PHNwYW4gY2xhc3NOYW1lPVwidGV4dC1lbWVyYWxkLTUwMFwiPlVSTHMgVmlzaXRlZDwvc3Bhbj4gKHthcGlLZXlDb3VudH0pPC9MaW5rPiAqL31cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICB7LyogPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGdhcC0xIG1kOmdhcC01XCI+XHJcbiAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC14bCBtZDp0ZXh0LTR4bFwiPkpTIERvd25sb2FkZXI8L2gyPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LW1kIGZsZXggZ2FwLTJcIj5cclxuICAgICAgICAgICAgICA8TGluayBjbGFzc05hbWU9XCJhLWl0ZW0gZm9udC1zZW1pYm9sZFwiIHRvPVwianMtZmlsZXNcIj48c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXZpb2xldC01MDBcIj5KUyBGSUxFUzwvc3Bhbj4gKHtmaWxlQ291bnR9KTwvTGluaz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PiAqL31cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgICB7LyogPGEgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXIgbXQtMTBcIiBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL0xvcmRDYXQvUGxhY2VIb2xkZXItRXh0ZW5zaW9uXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPlxyXG4gICAgICAgIDxzdmcgY2xhc3NOYW1lPVwidHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMTAwMCBob3ZlcjpzaXplLTIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiNjBweFwiIGhlaWdodD1cIjYwcHhcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZmlsbD1cIiM1MzhkZGZcIiBkPVwiTTEyIDJBMTAgMTAgMCAwIDAgMiAxMmMwIDQuNDIgMi44NyA4LjE3IDYuODQgOS41Yy41LjA4LjY2LS4yMy42Ni0uNXYtMS42OWMtMi43Ny42LTMuMzYtMS4zNC0zLjM2LTEuMzRjLS40Ni0xLjE2LTEuMTEtMS40Ny0xLjExLTEuNDdjLS45MS0uNjIuMDctLjYuMDctLjZjMSAuMDcgMS41MyAxLjAzIDEuNTMgMS4wM2MuODcgMS41MiAyLjM0IDEuMDcgMi45MS44M2MuMDktLjY1LjM1LTEuMDkuNjMtMS4zNGMtMi4yMi0uMjUtNC41NS0xLjExLTQuNTUtNC45MmMwLTEuMTEuMzgtMiAxLjAzLTIuNzFjLS4xLS4yNS0uNDUtMS4yOS4xLTIuNjRjMCAwIC44NC0uMjcgMi43NSAxLjAyYy43OS0uMjIgMS42NS0uMzMgMi41LS4zM3MxLjcxLjExIDIuNS4zM2MxLjkxLTEuMjkgMi43NS0xLjAyIDIuNzUtMS4wMmMuNTUgMS4zNS4yIDIuMzkuMSAyLjY0Yy42NS43MSAxLjAzIDEuNiAxLjAzIDIuNzFjMCAzLjgyLTIuMzQgNC42Ni00LjU3IDQuOTFjLjM2LjMxLjY5LjkyLjY5IDEuODVWMjFjMCAuMjcuMTYuNTkuNjcuNUMxOS4xNCAyMC4xNiAyMiAxNi40MiAyMiAxMkExMCAxMCAwIDAgMCAxMiAyXCIvPjwvc3ZnPlxyXG4gICAgICA8L2E+ICovfVxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEZXZUb29sc0FwcCIsImltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIE5hdkJhciAoKXtcclxuICAgIHJldHVybihcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8bmF2PlxyXG4gICAgICAgICAgICAgICAgPExpbmsgdG89XCIvXCI+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGZpbGw9XCIjNGQ0YzRjXCIgZD1cIm03LjgyNSAxM2w1LjYgNS42TDEyIDIwbC04LThsOC04bDEuNDI1IDEuNGwtNS42IDUuNkgyMHYyelwiLz48L3N2Zz48L0xpbms+XHJcbiAgICAgICAgICAgIDwvbmF2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IE5hdkJhciB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvbmF2YmFyJztcclxuaW1wb3J0IHsgSlNGaWxlcyB9IGZyb20gXCIuL2pzLWZpbGVzXCI7XHJcbmltcG9ydCB7IGpzIGFzIGJlYXV0aWZ5IH0gZnJvbSAnanMtYmVhdXRpZnknO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFVSTHNEZWZhdWx0VmlldygpIHtcclxuICBpbnRlcmZhY2UgRW5kcG9pbnQge1xyXG4gICAgdXJsOiBzdHJpbmc7XHJcbiAgICBmb3VuZEF0OiBzdHJpbmc7XHJcbiAgICB3ZWJwYWdlOiBzdHJpbmc7XHJcbiAgfVxyXG4gIFxyXG4gIGludGVyZmFjZSBVUkxFbnRyeSB7XHJcbiAgICBjdXJyUGFnZTogc3RyaW5nW107XHJcbiAgICBleHRlcm5hbEpTRmlsZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nW10gfTtcclxuICB9XHJcbiAgXHJcbiAgaW50ZXJmYWNlIFVSTFBhcnNlciB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBVUkxFbnRyeTtcclxuICB9XHJcbiAgXHJcbiAgdHlwZSBMb2NhdGlvbiA9IHN0cmluZztcclxuICBcclxuICB0eXBlIExvY2F0aW9uUHJvcHNUeXBlID0ge1xyXG4gICAgdXJsOiBzdHJpbmc7XHJcbiAgICBvbkNsaWNrOiAoKSA9PiB2b2lkO1xyXG4gIH07XHJcbiAgXHJcbiAgZnVuY3Rpb24gVVJMUHJvcHMoeyBlbmRwb2ludCwgc2VhcmNoUXVlcnkgfTogeyBlbmRwb2ludDogRW5kcG9pbnQsIHNlYXJjaFF1ZXJ5OiBzdHJpbmcgfSkge1xyXG4gICAgY29uc3QgcmVnZXhDb250cm9sQ2hhcnMgPSBcIi5eJCorP1xcXFx8KClbXXt9XCI7XHJcbiAgICBsZXQgZXNjYXBlZFF1ZXJ5ID0gJyc7XHJcbiAgICBmb3IgKGNvbnN0IGNoYXIgb2Ygc2VhcmNoUXVlcnkpIHtcclxuICAgICAgICBpZiAocmVnZXhDb250cm9sQ2hhcnMuaW5jbHVkZXMoY2hhcikpIHtcclxuICAgICAgICAgICAgZXNjYXBlZFF1ZXJ5ICs9ICdcXFxcJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZXNjYXBlZFF1ZXJ5ICs9IGNoYXI7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXJ0cyA9IGVuZHBvaW50LnVybC5zcGxpdChuZXcgUmVnRXhwKGAoJHtlc2NhcGVkUXVlcnl9KWAsICdnaScpKTtcclxuXHJcbiAgICB0eXBlIEh0dHBNZXRob2QgPSAnR0VUJyB8ICdQT1NUJyB8ICdQVVQnIHwgJ09QVElPTlMnO1xyXG5cclxuICAgIGNvbnN0IFtpc0dlbmVyYXRlUmVwb3J0T3Blbiwgc2V0SXNHZW5lcmF0ZVJlcG9ydE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgY29uc3QgW2lzVmlld0NvZGVPcGVuLCBzZXRJc1ZpZXdDb2RlT3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBbaXNTZWVSZXNwb25zZU9wZW4sIHNldElzU2VlUmVzcG9uc2VPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtyZXNwU3RhdHVzLCBzZXRSZXNwU3RhdHVzXSA9IHVzZVN0YXRlPFJlY29yZDxIdHRwTWV0aG9kLCBudW1iZXI+Pih7XHJcbiAgICAgIEdFVDogMCxcclxuICAgICAgUE9TVDogMCxcclxuICAgICAgUFVUOiAwLFxyXG4gICAgICBPUFRJT05TOiAwXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBbcmVzcFN0YXR1c01lc3NhZ2UsIHNldFJlc3BTdGF0dXNNZXNzYWdlXSA9IHVzZVN0YXRlPFJlY29yZDxIdHRwTWV0aG9kLCBzdHJpbmc+Pih7XHJcbiAgICAgIEdFVDogXCJcIixcclxuICAgICAgUE9TVDogXCJcIixcclxuICAgICAgUFVUOiBcIlwiLFxyXG4gICAgICBPUFRJT05TOiBcIlwiXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBbcmVzcEJvZHksIHNldFJlc3BCb2R5XSA9IHVzZVN0YXRlPFJlY29yZDxIdHRwTWV0aG9kLCBzdHJpbmc+Pih7XHJcbiAgICAgIEdFVDogXCJcIixcclxuICAgICAgUE9TVDogXCJcIixcclxuICAgICAgUFVUOiBcIlwiLFxyXG4gICAgICBPUFRJT05TOiBcIlwiXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBbY3VycmVudE1ldGhvZCwgc2V0Q3VycmVudE1ldGhvZF0gPSB1c2VTdGF0ZTxIdHRwTWV0aG9kPihcIkdFVFwiKTtcclxuXHJcbiAgICBjb25zdCBjbG9zZUFsbE1vZGFscyA9ICgpID0+IHtcclxuICAgICAgc2V0SXNHZW5lcmF0ZVJlcG9ydE9wZW4oZmFsc2UpO1xyXG4gICAgICBzZXRJc1ZpZXdDb2RlT3BlbihmYWxzZSk7XHJcbiAgICAgIHNldElzU2VlUmVzcG9uc2VPcGVuKGZhbHNlKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgW2hlYWRlcnMsIHNldEhlYWRlcnNdID0gdXNlU3RhdGU8UmVjb3JkPEh0dHBNZXRob2QsIHN0cmluZ1tdPj4oe1xyXG4gICAgICBHRVQ6IFtdLFxyXG4gICAgICBQT1NUOiBbXSxcclxuICAgICAgUFVUOiBbXSxcclxuICAgICAgT1BUSU9OUzogW11cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFNhbml0aXplIHVybHNcclxuICAgIGNvbnN0IHNhbml0aXplZFVSTCA9ICgpID0+IHtcclxuICAgICAgbGV0IHZlcmlmaWVkVVJMOiBzdHJpbmc7XHJcbiAgICAgIGNvbnN0IGNsZWFuZWRXZWJwYWdlID0gZW5kcG9pbnQud2VicGFnZS5yZXBsYWNlKC9cXC8kLywgJycpLnNwbGl0KCcjJylbMF07XHJcblxyXG4gICAgICBpZiAoZW5kcG9pbnQudXJsICYmIChlbmRwb2ludC51cmwuc3RhcnRzV2l0aChcImh0dHA6Ly9cIikgfHwgZW5kcG9pbnQudXJsLnN0YXJ0c1dpdGgoXCJodHRwczovL1wiKSkpIHtcclxuICAgICAgICB2ZXJpZmllZFVSTCA9IGVuZHBvaW50LnVybDtcclxuICAgICAgfSBlbHNlIGlmIChlbmRwb2ludC51cmwuc3RhcnRzV2l0aCgnLycpKSB7XHJcbiAgICAgICAgdmVyaWZpZWRVUkwgPSBjbGVhbmVkV2VicGFnZSArIGVuZHBvaW50LnVybDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2ZXJpZmllZFVSTCA9IGNsZWFuZWRXZWJwYWdlICsgJy8nICsgZW5kcG9pbnQudXJsOyBcclxuICAgICAgfVxyXG4gICAgICB2ZXJpZmllZFVSTCA9IHZlcmlmaWVkVVJMLnJlcGxhY2UoLyhbXjpdXFwvKVxcLysvZywgXCIkMVwiKTtcclxuXHJcbiAgICAgIHJldHVybiB2ZXJpZmllZFVSTDtcclxuICAgIH07XHJcblxyXG4gICAgLy8gTG9naWMgZm9yIGNhcHR1cmluZyByZXNwb25zZSBoZWFkZXJzXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICBjb25zdCBmZXRjaERhdGEgPSBhc3luYyAobWV0aG9kOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBjb25zdCB2ZXJpZmllZFVSTCA9IHNhbml0aXplZFVSTCgpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHZlcmlmaWVkVVJMLCB7IG1ldGhvZCB9KTtcclxuICAgICAgICAgIGNvbnN0IGZldGNoZWRIZWFkZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5mb3JFYWNoKCh2YWx1ZSwgaGVhZGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGZldGNoZWRIZWFkZXJzLnB1c2goYCR7aGVhZGVyfTogJHt2YWx1ZX1gKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgc2V0SGVhZGVycyhwcmV2ID0+ICh7IC4uLnByZXYsIFttZXRob2RdOiBmZXRjaGVkSGVhZGVycyB9KSk7XHJcbiAgICAgICAgICBzZXRSZXNwU3RhdHVzKHByZXYgPT4gKHsgLi4ucHJldiwgW21ldGhvZF06IHJlc3BvbnNlLnN0YXR1cyB9KSk7XHJcbiAgICAgICAgICBzZXRSZXNwU3RhdHVzTWVzc2FnZShwcmV2ID0+ICh7IC4uLnByZXYsIFttZXRob2RdOiByZXNwb25zZS5zdGF0dXNUZXh0IH0pKTtcclxuXHJcbiAgICAgICAgICBjb25zdCByZXNwb25zZUJvZHkgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgICAgICAgICBjb25zdCBiZWF1dGlmaWVkSFRNTCA9IGJlYXV0aWZ5KHJlc3BvbnNlQm9keSwge1xyXG4gICAgICAgICAgICBpbmRlbnRfc2l6ZTogMixcclxuICAgICAgICAgICAgaW5kZW50X2NoYXI6ICcgJyxcclxuICAgICAgICAgICAgcHJlc2VydmVfbmV3bGluZXM6IHRydWUsXHJcbiAgICAgICAgICAgIG1heF9wcmVzZXJ2ZV9uZXdsaW5lczogMixcclxuICAgICAgICAgICAgZW5kX3dpdGhfbmV3bGluZTogdHJ1ZSxcclxuICAgICAgICAgICAgd3JhcF9saW5lX2xlbmd0aDogMCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgc2V0UmVzcEJvZHkocHJldiA9PiAoeyAuLi5wcmV2LCBbbWV0aG9kXTogYmVhdXRpZmllZEhUTUwgfSkpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfHwgJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQnO1xyXG4gICAgICAgICAgc2V0SGVhZGVycyhwcmV2ID0+ICh7IC4uLnByZXYsIFttZXRob2RdOiBbYEVycm9yOiAke2Vycm9yTWVzc2FnZX1gXSB9KSk7XHJcbiAgICAgICAgICBzZXRSZXNwU3RhdHVzKHByZXYgPT4gKHsgLi4ucHJldiwgW21ldGhvZF06IDAgfSkpO1xyXG4gICAgICAgICAgc2V0UmVzcFN0YXR1c01lc3NhZ2UocHJldiA9PiAoeyAuLi5wcmV2LCBbbWV0aG9kXTogXCJGYWlsZWQgdG8gZmV0Y2hcIiB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgaWYgKGlzU2VlUmVzcG9uc2VPcGVuKSB7XHJcbiAgICAgICAgZmV0Y2hEYXRhKFwiR0VUXCIpO1xyXG4gICAgICAgIGZldGNoRGF0YShcIlBPU1RcIik7XHJcbiAgICAgICAgZmV0Y2hEYXRhKFwiUFVUXCIpO1xyXG4gICAgICAgIGZldGNoRGF0YShcIk9QVElPTlNcIik7XHJcbiAgICAgIH1cclxuICAgIH0sIFtpc1NlZVJlc3BvbnNlT3Blbl0pO1xyXG5cclxuICAgIGNvbnN0IFtjb2RlU25pcHBldCwgc2V0Q29kZVNuaXBwZXRdID0gdXNlU3RhdGU8c3RyaW5nW10+KFtdKTtcclxuICAgICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoaXNWaWV3Q29kZU9wZW4pIHtcclxuICAgICAgICAgIGZldGNoKGVuZHBvaW50LmZvdW5kQXQpXHJcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiByZXMudGV4dCgpKVxyXG4gICAgICAgICAgICAudGhlbihjb2RlID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCBiZWF1dGlmaWVkQ29kZSA9IGJlYXV0aWZ5KGNvZGUpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChgKD86Xi4qPyg/OlxcXFxuLio/KXswLDF9KCR7ZW5kcG9pbnQudXJsfSkuKj8oPzpcXFxcbi4qPyl7MCwxfSlgLCAnZ3MnKTtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhiZWF1dGlmaWVkQ29kZSlcclxuICAgICAgICAgICAgICAvLyBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYCgke2VuZHBvaW50LnVybH0pYCwgJ2dzJyk7XHJcbiAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlcyA9IGJlYXV0aWZpZWRDb2RlLm1hdGNoKHJlZ2V4KTsgLy8gVXNlIGJlYXV0aWZpZWRDb2RlIGZvciBtYXRjaGluZ1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgLy8gSGFuZGxlIG1hdGNoZXMgYmVpbmcgbnVsbFxyXG4gICAgICAgICAgICAgIHNldENvZGVTbmlwcGV0KG1hdGNoZXMgfHwgW10pOyAvLyBTZXQgdG8gYW4gZW1wdHkgYXJyYXkgaWYgbm8gbWF0Y2hlc1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJyZXF1ZXN0IGZhaWxlZFwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCBbaXNWaWV3Q29kZU9wZW5dKTtcclxuXHJcbiAgICAgIGNvbnN0IGxvZ0NvZGVTbmlwcGV0ID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGNvZGVTbmlwcGV0KTtcclxuICAgICAgfTtcclxuICBcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDx0cj5cclxuICAgICAgICA8dGQgY2xhc3NOYW1lPVwiYnJlYWstd29yZHMgbWF4LXctbGdcIj5cclxuICAgICAgICAgIHtwYXJ0cy5tYXAoKHBhcnQsIGluZGV4KSA9PlxyXG4gICAgICAgICAgICBwYXJ0LnRvTG93ZXJDYXNlKCkgPT09IHNlYXJjaFF1ZXJ5LnRvTG93ZXJDYXNlKCkgPyAoXHJcbiAgICAgICAgICAgICAgPHNwYW4ga2V5PXtpbmRleH0gY2xhc3NOYW1lPVwidGV4dC1yZWQtNTAwIGZvbnQtc2VtaWJvbGRcIj57cGFydH08L3NwYW4+XHJcbiAgICAgICAgICAgICkgOiAoXHJcbiAgICAgICAgICAgICAgPHNwYW4ga2V5PXtpbmRleH0+e3BhcnR9PC9zcGFuPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApfVxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IG10LTIgaXRlbXMtY2VudGVyIGdhcC0xXCI+XHJcbiAgICAgICAgICAgIHsvKiA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaS1idXR0b25cIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzR2VuZXJhdGVSZXBvcnRPcGVuKHRydWUpfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJjdXJzb3ItcG9pbnRlciBob3ZlcjpvcGFjaXR5LTgwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj5cclxuICAgICAgICAgICAgICAgIDxnIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiIzNkYTI4ZlwiIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIiBzdHJva2VXaWR0aD1cIjJcIj5cclxuICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk04IDVINmEyIDIgMCAwIDAtMiAydjEyYTIgMiAwIDAgMCAyIDJoNS42OTdNMTggMTJWN2EyIDIgMCAwIDAtMi0yaC0yXCIvPlxyXG4gICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTggNWEyIDIgMCAwIDEgMi0yaDJhMiAyIDAgMCAxIDIgMnYwYTIgMiAwIDAgMS0yIDJoLTJhMiAyIDAgMCAxLTItMm0wIDZoNG0tNCA0aDNtMyAyLjVhMi41IDIuNSAwIDEgMCA1IDBhMi41IDIuNSAwIDEgMC01IDBtNC41IDJMMjEgMjJcIi8+XHJcbiAgICAgICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgICAgICA8dGl0bGU+R2VuZXJhdGUgUmVwb3J0PC90aXRsZT5cclxuICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgPC9idXR0b24+ICovfVxyXG4gICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaS1idXR0b25cIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzVmlld0NvZGVPcGVuKHRydWUpfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJjdXJzb3ItcG9pbnRlciBob3ZlcjpvcGFjaXR5LTgwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj5cclxuICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCIjM2RhMjhmXCIgZD1cIm04IDE4bC02LTZsNi02bDEuNDI1IDEuNDI1bC00LjYgNC42TDkuNCAxNi42em04IDBsLTEuNDI1LTEuNDI1bDQuNi00LjZMMTQuNiA3LjRMMTYgNmw2IDZ6XCIvPlxyXG4gICAgICAgICAgICAgICAgPHRpdGxlPlZpZXcgQ29kZSBTbmlwcGV0PC90aXRsZT5cclxuICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpLWJ1dHRvblwiXHJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0SXNTZWVSZXNwb25zZU9wZW4odHJ1ZSl9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8c3ZnIGNsYXNzTmFtZT1cImN1cnNvci1wb2ludGVyIGhvdmVyOm9wYWNpdHktODBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPlxyXG4gICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cIiMzZGEyOGZcIiBkPVwiTTIwIDRINmMtMS4xMDMgMC0yIC44OTctMiAydjVoMlY4bDYuNCA0LjhhMSAxIDAgMCAwIDEuMiAwTDIwIDh2OWgtOHYyaDhjMS4xMDMgMCAyLS44OTcgMi0yVjZjMC0xLjEwMy0uODk3LTItMi0ybS03IDYuNzVMNi42NjYgNmgxMi42Njh6XCIvPlxyXG4gICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cIiMzZGEyOGZcIiBkPVwiTTIgMTJoN3YySDJ6bTIgM2g2djJINHptMyAzaDR2Mkg3elwiLz5cclxuICAgICAgICAgICAgICAgIDx0aXRsZT5TZWUgUmVzcG9uc2U8L3RpdGxlPlxyXG4gICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgIHsvKiBNb2RhbCBmb3IgR2VuZXJhdGUgUmVwb3J0ICovfVxyXG4gICAgICAgICAge2lzR2VuZXJhdGVSZXBvcnRPcGVuICYmIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaXhlZCBpbnNldC0wIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGJnLWJsYWNrIGJnLW9wYWNpdHktNTBcIiBvbkNsaWNrPXtjbG9zZUFsbE1vZGFsc30+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy13aGl0ZSBwLTUgcm91bmRlZC1sZyBzaGFkb3ctbGdcIiBvbkNsaWNrPXtlID0+IGUuc3RvcFByb3BhZ2F0aW9uKCl9PlxyXG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZCB0ZXh0LWJsYWNrXCI+R2VuZXJhdGUgUmVwb3J0IGZvciB7c2FuaXRpemVkVVJMKCl9PC9oMj5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtYmxhY2tcIj5Db250ZW50IGZvciBHZW5lcmF0ZSBSZXBvcnQgbW9kYWwuPC9wPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJtdC0zIHB4LTQgcHktMiBiZy1ibHVlLTUwMCB0ZXh0LXdoaXRlIHJvdW5kZWRcIiBvbkNsaWNrPXsoKSA9PiBzZXRJc0dlbmVyYXRlUmVwb3J0T3BlbihmYWxzZSl9PkNsb3NlPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgKX1cclxuXHJcbiAgICAgICAgICAgey8qIE1vZGFsIGZvciBWaWV3IENvZGUgU25pcHBldCAqL31cclxuICAgICAgICAgICB7aXNWaWV3Q29kZU9wZW4gJiYgKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpeGVkIGluc2V0LTAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgYmctYmxhY2sgYmctb3BhY2l0eS01MFwiIG9uQ2xpY2s9e2Nsb3NlQWxsTW9kYWxzfT5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLVsjMzYzMzMzXSBvcGFjaXR5LTg1IHAtNSByb3VuZGVkLWxnIHNoYWRvdy1sZyBtYXgtdy02eGwgbWF4LWgtc2NyZWVuIG92ZXJmbG93LWF1dG9cIiBvbkNsaWNrPXtlID0+IGUuc3RvcFByb3BhZ2F0aW9uKCl9PlxyXG4gICAgICAgICAgICAgICAgey8qIDxidXR0b24gb25DbGljaz17bG9nQ29kZVNuaXBwZXR9PkxvZyBDb2RlIFNuaXBwZXQ8L2J1dHRvbj4gKi99XHJcbiAgICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC1sZyBmb250LXNlbWlib2xkIHRleHQtZ3JheS00MDAgbWItNVwiPlZpZXcgQ29kZSBTbmlwcGV0IGZvciB7c2FuaXRpemVkVVJMKCl9PC9oMj5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImZvbnQtc2VtaWJvbGQgdGV4dC1ncmF5LTQwMFwiPkNvbnRlbnQgZm9yIFZpZXcgQ29kZSBTbmlwcGV0IG1vZGFsLjwvcD5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgIHtjb2RlU25pcHBldC5tYXAoKHNuaXBwZXQsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICA8cHJlIGtleT17aW5kZXh9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Y29kZT57c25pcHBldH08L2NvZGU+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L3ByZT5cclxuICAgICAgICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJtdC0zIHB4LTQgcHktMiBiZy1ibGFjayB0ZXh0LXdoaXRlIHJvdW5kZWRcIiBvbkNsaWNrPXsoKSA9PiBzZXRJc1ZpZXdDb2RlT3BlbihmYWxzZSl9PkNsb3NlPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgKX1cclxuXHJcbiAgICAgICAgIHsvKiBNb2RhbCBmb3IgU2VlIFJlc3BvbnNlICovfVxyXG4gICAgICAgIHtpc1NlZVJlc3BvbnNlT3BlbiAmJiAoXHJcbiAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImZpeGVkIGluc2V0LTAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgYmctYmxhY2sgYmctb3BhY2l0eS01MFwiXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2Nsb3NlQWxsTW9kYWxzfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmctWyMzNjMzMzNdIG9wYWNpdHktODUgcC01IHJvdW5kZWQtbGcgc2hhZG93LWxnIG1heC13LTZ4bCBtYXgtaC1zY3JlZW4gb3ZlcmZsb3ctYXV0b1wiXHJcbiAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IGUuc3RvcFByb3BhZ2F0aW9uKCl9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LWJvbGQgdGV4dC1ncmF5LTQwMFwiPlxyXG4gICAgICAgICAgICAgICAgU2VlIFJlc3BvbnNlIGZvciB7c2FuaXRpemVkVVJMKCl9XHJcbiAgICAgICAgICAgICAgPC9oMj5cclxuXHJcbiAgICAgICAgICAgICAgey8qIE1hcCBhbmQgZGlzcGxheSB0aGUgZmV0Y2hlZCBoZWFkZXJzICovfVxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtM1wiPlxyXG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktNDAwIG1iLTVcIj5SZXNwb25zZTwvaDM+XHJcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwidGV4dC1ibGFjayBvdmVyZmxvdy15LWF1dG8gcC0yIGJnLVsjMzYzMzMzXSBvcGFjaXR5LTg1IHJvdW5kZWQtbWQgbWF4LWgtMTYwXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxzZWxlY3QgXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9udC1ib2xkIHRleHQtMnhsIHRleHQtcHVycGxlLTIwMCBtYi00IGJnLWdyYXktNjAwIHctZnVsbCBweS0yIHB4LTJcIlxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtjdXJyZW50TWV0aG9kfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0Q3VycmVudE1ldGhvZChlLnRhcmdldC52YWx1ZSBhcyBIdHRwTWV0aG9kKX1cclxuICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJHRVRcIj5be3Jlc3BTdGF0dXMuR0VUfV0ge3Jlc3BTdGF0dXNNZXNzYWdlLkdFVH0gR0VUPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlBPU1RcIj5be3Jlc3BTdGF0dXMuUE9TVH1dIHtyZXNwU3RhdHVzTWVzc2FnZS5QT1NUfSBQT1NUPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlBVVFwiPlt7cmVzcFN0YXR1cy5QVVR9XSB7cmVzcFN0YXR1c01lc3NhZ2UuUFVUfSBQVVQ8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiT1BUSU9OU1wiPlt7cmVzcFN0YXR1cy5PUFRJT05TfV0ge3Jlc3BTdGF0dXNNZXNzYWdlLk9QVElPTlN9IE9QVElPTlM8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgIHtoZWFkZXJzW2N1cnJlbnRNZXRob2RdLm1hcCgoaGVhZGVyLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFtoZWFkZXJOYW1lLCAuLi5yZXN0XSA9IGhlYWRlci5zcGxpdCgnOiAnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17aW5kZXh9IGNsYXNzTmFtZT1cInAtMVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmb250LWJvbGQgdGV4dC1wdXJwbGUtMjAwXCI+e2hlYWRlck5hbWV9Ojwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ncmF5LTIwMFwiPiB7cmVzdC5qb2luKCc6ICcpfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICA8cHJlIGNsYXNzTmFtZT1cIm10LTVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtZ3JheS0yMDBcIj57cmVzcEJvZHlbY3VycmVudE1ldGhvZF19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvcHJlPlxyXG4gICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXQtMyBweC00IHB5LTIgYmctYmxhY2sgdGV4dC13aGl0ZSByb3VuZGVkXCJcclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzU2VlUmVzcG9uc2VPcGVuKGZhbHNlKX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICBDbG9zZVxyXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICl9XHJcbiAgICAgICAgPC90ZD5cclxuICAgICAgICA8dGQgY2xhc3NOYW1lPVwiYnJlYWstd29yZHMgbWF4LXctbGdcIj57ZW5kcG9pbnQuZm91bmRBdH08L3RkPlxyXG4gICAgICAgIDx0ZCBjbGFzc05hbWU9XCJicmVhay13b3JkcyBtYXgtdy1sZyB0ZXh0LWNlbnRlclwiPntlbmRwb2ludC53ZWJwYWdlfTwvdGQ+XHJcbiAgICAgIDwvdHI+XHJcbiAgICApO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBMb2NhdGlvbkl0ZW0oeyB1cmwsIG9uQ2xpY2sgfTogTG9jYXRpb25Qcm9wc1R5cGUpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXZcclxuICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxyXG4gICAgICAgIGNsYXNzTmFtZT1cImJnLWdyYXktNTAwIHRleHQtd2hpdGUgcC0yIGN1cnNvci1wb2ludGVyIHRleHQtZWxsaXBzaXMgb3ZlcmZsb3ctaGlkZGVuIHdoaXRlc3BhY2Utbm93cmFwIGhvdmVyOmJnLWdyYXktNjAwXCJcclxuICAgICAgPlxyXG4gICAgICAgIHt1cmx9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IFt1cmxzLCBzZXRVUkxzXSA9IHVzZVN0YXRlPEVuZHBvaW50W10+KFtdKTtcclxuICBjb25zdCBbanNGaWxlcywgc2V0SlNGaWxlc10gPSB1c2VTdGF0ZTxMb2NhdGlvbltdPihbXSk7XHJcbiAgY29uc3QgW3NlbGVjdGVkLCBzZXRTZWxlY3RlZF0gPSB1c2VTdGF0ZTxzdHJpbmc+KCdBbGwnKTtcclxuICBjb25zdCBbaXNPcGVuLCBzZXRJc09wZW5dID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gIGNvbnN0IFtzZWFyY2hRdWVyeSwgc2V0U2VhcmNoUXVlcnldID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XHJcblxyXG4gIC8vUmlnaHQsIFNvIEknbSBnb2luZyB0byBhZGQgbGF6aW5nIGxvYWRpbmcsIEkgZ29ubmEgcmVxdWlyZSBhIHNvbWUgc3RhdGVzLCBvbmUgdGhhdCB0cmFja3MgdXJscyB0aGF0IGFyZSB2aXNhYmxlXHJcbiAgLy8gb25lIHRoYXQga2VlcHMgdHJhY2sgb2YgdGhlIGluZGV4IGFuZCBvbmUgZGVmaW5lIGhvdyBtYW55IHVybHMgd2Ugd2FudCB0byBzZWUuIFxyXG4gIGNvbnN0IFt2aXNhYmxlVXJscywgc2V0VmlzYWJsZVVybHNdID0gdXNlU3RhdGU8RW5kcG9pbnRbXT4oW10pO1xyXG4gIGNvbnN0IFtzdGFydEluZGV4LCBzZXRTdGFydEluZGV4XSA9IHVzZVN0YXRlKDApO1xyXG4gIGNvbnN0IFZJU0FCTEVfVVJMX1NJWkUgPSAxMDA7IC8vIFRvIHNldCBob3cgbWFueSB0byBkaXNwbGF5IGluIHRoZSBzbGlkaW5nIHdpbmRvdy5cclxuICBjb25zdCB0YWJsZV9SZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpOyAvL1JlZmVyZW5jZSB0byB0aGUgc2Nyb2xsIHdpbmRvdztcclxuXHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBmZXRjaERhdGEgPSAoKSA9PiB7XHJcbiAgICAgIGxldCBhbGxFbmRwb2ludHM6IEVuZHBvaW50W10gPSBbXTtcclxuICAgICAgbGV0IGxvY2F0aW9uczogTG9jYXRpb25bXSA9IFtdO1xyXG5cclxuICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KFwiVVJMLVBBUlNFUlwiLCAoZGF0YTogeyBba2V5OiBzdHJpbmddOiBVUkxQYXJzZXIgfSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybFBhcnNlciA9IGRhdGFbXCJVUkwtUEFSU0VSXCJdO1xyXG5cclxuICAgICAgICBPYmplY3Qua2V5cyh1cmxQYXJzZXIpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgaWYgKGtleSAhPT0gXCJjdXJyZW50XCIpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VyclVSTEVuZHBvaW50cyA9IHVybFBhcnNlcltrZXldLmN1cnJQYWdlO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyVVJMRXh0SlNGaWxlcyA9IHVybFBhcnNlcltrZXldLmV4dGVybmFsSlNGaWxlcztcclxuICAgICAgICAgICAgbG9jYXRpb25zLnB1c2goZGVjb2RlVVJJQ29tcG9uZW50KGtleSkpO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGN1cnJQYWdlIGVuZHBvaW50c1xyXG4gICAgICAgICAgICBhbGxFbmRwb2ludHMucHVzaCguLi5jdXJyVVJMRW5kcG9pbnRzLm1hcCgoZW5kcG9pbnQpOiBFbmRwb2ludCA9PiAoe1xyXG4gICAgICAgICAgICAgIHVybDogZW5kcG9pbnQsXHJcbiAgICAgICAgICAgICAgZm91bmRBdDogZGVjb2RlVVJJQ29tcG9uZW50KGtleSksIC8vIEZvdW5kIGF0IHRoZSBtYWluIHdlYnBhZ2VcclxuICAgICAgICAgICAgICB3ZWJwYWdlOiBkZWNvZGVVUklDb21wb25lbnQoa2V5KSxcclxuICAgICAgICAgICAgfSkpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBleHRlcm5hbEpTRmlsZXMgZW5kcG9pbnRzXHJcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGN1cnJVUkxFeHRKU0ZpbGVzKS5mb3JFYWNoKChbanNGaWxlLCBlbmRwb2ludHNdKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgZGVjb2RlZEpzRmlsZSA9IGRlY29kZVVSSUNvbXBvbmVudChqc0ZpbGUpO1xyXG4gICAgICAgICAgICAgIGlmICghbG9jYXRpb25zLmluY2x1ZGVzKGRlY29kZWRKc0ZpbGUpKSB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnMucHVzaChkZWNvZGVkSnNGaWxlKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYWxsRW5kcG9pbnRzLnB1c2goLi4uZW5kcG9pbnRzLm1hcCgoZW5kcG9pbnQpOiBFbmRwb2ludCA9PiAoe1xyXG4gICAgICAgICAgICAgICAgdXJsOiBlbmRwb2ludCxcclxuICAgICAgICAgICAgICAgIGZvdW5kQXQ6IGRlY29kZWRKc0ZpbGUsIC8vIEZvdW5kIGF0IHRoZSBzcGVjaWZpYyBKUyBmaWxlXHJcbiAgICAgICAgICAgICAgICB3ZWJwYWdlOiBkZWNvZGVVUklDb21wb25lbnQoa2V5KSxcclxuICAgICAgICAgICAgICB9KSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gRW5zdXJlIFwiQWxsXCIgaXMgaW5jbHVkZWQgb25seSBvbmNlIGFuZCBvdGhlciBsb2NhdGlvbnMgYXJlIHVuaXF1ZVxyXG4gICAgICAgIGNvbnN0IHVuaXF1ZUxvY2F0aW9ucyA9IEFycmF5LmZyb20obmV3IFNldChbJ0FsbCcsIC4uLmxvY2F0aW9uc10pKTtcclxuICAgICAgICBzZXRVUkxzKGFsbEVuZHBvaW50cyk7XHJcbiAgICAgICAgc2V0SlNGaWxlcyh1bmlxdWVMb2NhdGlvbnMpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gSW5pdGlhbCBmZXRjaFxyXG4gICAgZmV0Y2hEYXRhKCk7XHJcblxyXG4gICAgLy8gTGlzdGVuZXIgZm9yIHN0b3JhZ2UgY2hhbmdlc1xyXG4gICAgY29uc3QgaGFuZGxlU3RvcmFnZUNoYW5nZSA9IChjaGFuZ2VzOiB7IFtrZXk6IHN0cmluZ106IGNocm9tZS5zdG9yYWdlLlN0b3JhZ2VDaGFuZ2UgfSkgPT4ge1xyXG4gICAgICBpZiAoY2hhbmdlc1tcIlVSTC1QQVJTRVJcIl0pIHtcclxuICAgICAgICBmZXRjaERhdGEoKTsgLy8gUmUtZmV0Y2ggZGF0YSB3aGVuIFVSTC1QQVJTRVIgY2hhbmdlc1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNocm9tZS5zdG9yYWdlLm9uQ2hhbmdlZC5hZGRMaXN0ZW5lcihoYW5kbGVTdG9yYWdlQ2hhbmdlKTtcclxuXHJcbiAgICAvLyBDbGVhbnVwIGxpc3RlbmVyIG9uIGNvbXBvbmVudCB1bm1vdW50XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBjaHJvbWUuc3RvcmFnZS5vbkNoYW5nZWQucmVtb3ZlTGlzdGVuZXIoaGFuZGxlU3RvcmFnZUNoYW5nZSk7XHJcbiAgICB9O1xyXG4gIH0sIFtdKTtcclxuXHJcblxyXG4gIGNvbnN0IGhhbmRsZVNlbGVjdCA9ICh1cmw6IHN0cmluZykgPT4ge1xyXG4gICAgc2V0U2VsZWN0ZWQodXJsKTtcclxuICAgIHNldElzT3BlbihmYWxzZSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaGFuZGxlU2VhcmNoQ2hhbmdlID0gKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xyXG4gICAgc2V0U2VhcmNoUXVlcnkoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICB9O1xyXG5cclxuICAgLy9JIHRoaW5rIEkgbmVlZCB0byBjaGFuZ2UgdGhpcyBhIHVzZUVmZmVjdCwgc28gdGhhdCBJIGNhbiB1cGRhdGUgaXQgd2l0aCB0aGUgc2VhcmNoIGJhcj8/P1xyXG4gICBjb25zdCBmaWx0ZXJlZFVSTHMgPSB1cmxzXHJcbiAgIC5maWx0ZXIoZW5kcG9pbnQgPT4ge1xyXG4gICAgIGNvbnN0IG1hdGNoZXNMb2NhdGlvbiA9IHNlbGVjdGVkID09PSAnQWxsJyB8fCBlbmRwb2ludC5mb3VuZEF0ID09PSBzZWxlY3RlZDtcclxuICAgICBjb25zdCBtYXRjaGVzUXVlcnkgPSBlbmRwb2ludC51cmwudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hRdWVyeS50b0xvd2VyQ2FzZSgpKTtcclxuICAgICByZXR1cm4gbWF0Y2hlc0xvY2F0aW9uICYmIG1hdGNoZXNRdWVyeTtcclxuICAgfSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PntcclxuICAgICAvL3NldCB0aGUgdmlzYWJsZSB1cmxzIHRvIG1hdGNoIHRoZSBzZWFyY2ggY3JpdGVyYSBzdGFydGluZyBmb3IgdGhlIDAgdmFsdWUgdG8gdGhlIFxyXG4gICAgLy8gbWF4aW11bSBvZiB0aGUgc3RhcnRJbmRleCsgdGhlIGFtb3V0IG9mIHVybHMgd2Ugd2FudCB2aXNhYmxlIGF0IG9uY2VcclxuICAgIHNldFZpc2FibGVVcmxzKGZpbHRlcmVkVVJMcy5zbGljZShzdGFydEluZGV4LCBzdGFydEluZGV4ICsgVklTQUJMRV9VUkxfU0laRSkpO1xyXG4gIH0sW3VybHMsIHNlbGVjdGVkLCBzZWFyY2hRdWVyeSwgc3RhcnRJbmRleF0pO1xyXG4gIFxyXG4gIC8vSSdtIHByZXR0eSBzdXJlIHRoZXNlIGRlcGVuZGVjaWVzIGFyZSBhbGwgd2UgbmVlZCwgSSBtYXkgbmVlZCB0byBwcm92aWRlIHRoZSByZWZlcmVuY2UgdG9vXHJcblxyXG4gIC8vSSBhbHNvIG5lZWQgYSBmdW5jdGlvbiB0byBoYW5kbGUgdGhlIHNjcm9sbCBiYXIgICBcclxuICBjb25zdCBoYW5kbGVTY3JvbGwgPSAoKSA9PiB7XHJcbiAgICBpZiAodGFibGVfUmVmLmN1cnJlbnQpIHtcclxuICAgICAgY29uc3QgeyBzY3JvbGxUb3AsIHNjcm9sbEhlaWdodCwgY2xpZW50SGVpZ2h0IH0gPSB0YWJsZV9SZWYuY3VycmVudDtcclxuICAgICAgY29uc3QgYm90dG9tVGhyZXNob2xkID0gMjAwOyAvLyBwaXhlbHMgZnJvbSBib3R0b20gdG8gdHJpZ2dlciBsb2FkXHJcbiAgICAgIGNvbnN0IHRvcFRocmVzaG9sZCA9IDIwMDsgLy8gcGl4ZWxzIGZyb20gdG9wIHRvIHRyaWdnZXIgbG9hZFxyXG5cclxuICAgICAgaWYgKHNjcm9sbEhlaWdodCAtIHNjcm9sbFRvcCAtIGNsaWVudEhlaWdodCA8IGJvdHRvbVRocmVzaG9sZCkge1xyXG4gICAgICAgIC8vIExvYWQgbW9yZSBpdGVtcyBhdCB0aGUgYm90dG9tXHJcbiAgICAgICAgc2V0U3RhcnRJbmRleChwcmV2ID0+IE1hdGgubWluKHByZXYgKyAyMCwgdXJscy5sZW5ndGggLSBWSVNBQkxFX1VSTF9TSVpFKSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsVG9wIDwgdG9wVGhyZXNob2xkICYmIHN0YXJ0SW5kZXggPiAwKSB7XHJcbiAgICAgICAgLy8gTG9hZCBtb3JlIGl0ZW1zIGF0IHRoZSB0b3BcclxuICAgICAgICBzZXRTdGFydEluZGV4KHByZXYgPT4gTWF0aC5tYXgocHJldiAtIDIwLCAwKSk7XHJcbiAgICAgIH0gXHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICBmdW5jdGlvbiBjbGVhclVSTHMoKXtcclxuICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7ICdVUkwtUEFSU0VSJzoge319LCAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiQ2xlYXIgZW5kcG9pbnRzXCIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgbWluLWgtc2NyZWVuXCI+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWwtMiBtdC0yXCI+XHJcbiAgICAgICAgPE5hdkJhciAvPlxyXG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYS1pdGVtIGEtY29sb3IgbXQtMlwiIG9uQ2xpY2s9eygpID0+IGxvY2F0aW9uLnJlbG9hZCgpfT5cclxuICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxnIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiIzRkNGM0Y1wiIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIiBzdHJva2VXaWR0aD1cIjJcIj48cGF0aCBkPVwiTTE5LjkzMyAxMy4wNDFhOCA4IDAgMSAxLTkuOTI1LTguNzg4YzMuODk5LTEgNy45MzUgMS4wMDcgOS40MjUgNC43NDdcIi8+PHBhdGggZD1cIk0yMCA0djVoLTVcIi8+PC9nPjwvc3ZnPlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJ0ZXh0LTV4bFwiPlxyXG4gICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwiYm9yZGVyLWItMiBwYi0xMFwiPkVORFBPSU5UIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtWyMzZGEyOGZdXCI+KHtmaWx0ZXJlZFVSTHMubGVuZ3RofSk8L3NwYW4+PC90aD5cclxuICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cImJvcmRlci1iLTIgcGItMTBcIj5TT1VSQ0UgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1bIzNkYTI4Zl1cIj4oe2pzRmlsZXMubGVuZ3RofSk8L3NwYW4+PC90aD5cclxuICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cImJvcmRlci1iLTIgcGItMTBcIj5XRUJQQUdFPC90aD5cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgPC90aGVhZD5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtNSBmbGV4XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJweS0xIHctZnVsbCBmbGV4IGZsZXgtY29sIGdhcC0xMFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgbWF4LWgtWzc2MHB4XSBvdmVyZmxvdy1hdXRvXCJcclxuICAgICAgICAgIHJlZj17dGFibGVfUmVmfVxyXG4gICAgICAgICAgb25TY3JvbGw9e2hhbmRsZVNjcm9sbH0+ICB7LyogSSB0aGluayB0aGlzIGlzIHRoZSBjb3JyZWN0IHBsYWNlIHRvIGFkZCB0aGUgc2Nyb29sIGhhbmRsZXIqL31cclxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInctZnVsbCBib3JkZXItY29sbGFwc2VcIj5cclxuICAgICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTUgdy1mdWxsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17c2VhcmNoUXVlcnl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVTZWFyY2hDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInB4LTIgYm9yZGVyLTIgYm9yZGVyLWdyYXktMzAwIGJnLXRyYW5zcGFyZW50IHRleHQtbGcgdy1mdWxsIHBiLTMgcHQtMyByb3VuZGVkLW1kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yLXBvaW50ZXIgdGV4dC1ncmF5LTMwMCBob3Zlcjpib3JkZXItZ3JheS01MDAgb3V0bGluZS1ub25lIGZvY3VzOmJvcmRlci1ncmF5LTUwMCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi00MDBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlYXJjaCBlbmRwb2ludHMuLi5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC90ZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlbGF0aXZlIHctZnVsbCBtYXgtdy1sZyBtdC01XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzT3BlbighaXNPcGVuKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYS1pdGVtIHctZnVsbCBweC0yIGJvcmRlci0yIGJvcmRlci1ncmF5LTMwMCBiZy10cmFuc3BhcmVudCB0ZXh0LWxnIHJvdW5kZWQtbWQgb3ZlcmZsb3ctaGlkZGVuIHRleHQtZWxsaXBzaXMgd2hpdGVzcGFjZS1ub3dyYXBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7c2VsZWN0ZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgIHtpc09wZW4gJiYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIG10LTEgdy1mdWxsIGJnLXdoaXRlIGJvcmRlci0yIGJvcmRlci1ncmF5LTUwMCByb3VuZGVkLW1kIHNoYWRvdy1sZyB6LTEwIG1heC1oLTYwIG92ZXJmbG93LWF1dG9cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB7anNGaWxlcy5tYXAoKHVybCwgaW5kZXgpID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMb2NhdGlvbkl0ZW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpbmRleH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsPXt1cmx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVNlbGVjdCh1cmwpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIHt2aXNhYmxlVXJscy5tYXAoKGVuZHBvaW50LCBpbmRleCkgPT4gKFxyXG4gICAgICAgICAgICAgICAgICA8VVJMUHJvcHMga2V5PXtzdGFydEluZGV4ICsgaW5kZXh9IGVuZHBvaW50PXtlbmRwb2ludH0gc2VhcmNoUXVlcnk9e3NlYXJjaFF1ZXJ5fSAvPlxyXG4gICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWxnIGZsZXggaXRlbXMtY2VudGVyIHNwYWNlLXgtNCBweC01XCI+XHJcbiAgICAgICAgICAgIDxhIGhyZWY9e2RvY3VtZW50LmxvY2F0aW9uLm9yaWdpbiArIFwiL1BvcFVwL3BvcHVwLmh0bWwjdXJsc1wifSB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzc05hbWU9XCJiZy1ncmF5LTk1MCBwLTMgcm91bmRlZC1tZCBmb250LXNlbWlib2xkIHRleHQtWyM2NDZjZmZdXCI+V0VCUEFHRSBQQU5FTDwvYT5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJhLWl0ZW0gYmctZ3JheS02MDAgcC0zIHJvdW5kZWQtbWRcIiBvbkNsaWNrPXtjbGVhclVSTHN9PlxyXG4gICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiYmxhY2tcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk00IDdoMTZtLTEwIDR2Nm00LTZ2Nk01IDdsMSAxMmEyIDIgMCAwIDAgMiAyaDhhMiAyIDAgMCAwIDItMmwxLTEyTTkgN1Y0YTEgMSAwIDAgMSAxLTFoNGExIDEgMCAwIDEgMSAxdjNcIi8+PC9zdmc+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8YSBocmVmPXtkb2N1bWVudC5sb2NhdGlvbi5vcmlnaW4gKyBcIi9Qb3BVcC9wb3B1cC5odG1sI3VybHMvb3V0cHV0XCJ9IHRhcmdldD1cIl9ibGFua1wiIGNsYXNzTmFtZT1cImEtaXRlbSBiZy1ncmF5LTYwMCBwLTMgcm91bmRlZC1tZCBmb250LXNlbWlib2xkIHRleHQtZ3JheS0zMDBcIj5PVVRQVVQ8L2E+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59IiwiaW1wb3J0IHsgTmF2QmFyIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9uYXZiYXInO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVVJMc1RyZWVWaWV3KCkge1xyXG4gIGludGVyZmFjZSBFbmRwb2ludCB7XHJcbiAgICB1cmw6IHN0cmluZztcclxuICAgIGZvdW5kQXQ6IHN0cmluZztcclxuICAgIHdlYnBhZ2U6IHN0cmluZztcclxuICB9XHJcblxyXG4gIGludGVyZmFjZSBVUkxIaWVyYXJjaHkge1xyXG4gICAgW3dlYnBhZ2U6IHN0cmluZ106IHtcclxuICAgICAgbWFpblBhZ2U6IEVuZHBvaW50W107XHJcbiAgICAgIGpzRmlsZXM6IHtcclxuICAgICAgICBbanNGaWxlOiBzdHJpbmddOiBFbmRwb2ludFtdO1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbnN0IFtoaWVyYXJjaHksIHNldEhpZXJhcmNoeV0gPSB1c2VTdGF0ZTxVUkxIaWVyYXJjaHk+KHt9KTtcclxuICBjb25zdCBbanNGaWxlcywgc2V0SlNGaWxlc10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xyXG4gIGNvbnN0IFtzZWxlY3RlZCwgc2V0U2VsZWN0ZWRdID0gdXNlU3RhdGU8c3RyaW5nPignQWxsJyk7XHJcbiAgY29uc3QgW2lzT3Blbiwgc2V0SXNPcGVuXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuICBjb25zdCBbc2VhcmNoUXVlcnksIHNldFNlYXJjaFF1ZXJ5XSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xyXG4gIGNvbnN0IFtleHBhbmRlZEl0ZW1zLCBzZXRFeHBhbmRlZEl0ZW1zXSA9IHVzZVN0YXRlPFNldDxzdHJpbmc+PihuZXcgU2V0KCkpO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgZmV0Y2hEYXRhID0gKCkgPT4ge1xyXG4gICAgICBsZXQgbmV3SGllcmFyY2h5OiBVUkxIaWVyYXJjaHkgPSB7fTtcclxuICAgICAgbGV0IGFsbEpzRmlsZXM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoXCJVUkwtUEFSU0VSXCIsIChkYXRhOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsUGFyc2VyID0gZGF0YVtcIlVSTC1QQVJTRVJcIl07XHJcblxyXG4gICAgICAgIE9iamVjdC5rZXlzKHVybFBhcnNlcikuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICBpZiAoa2V5ICE9PSBcImN1cnJlbnRcIikge1xyXG4gICAgICAgICAgICBjb25zdCB3ZWJwYWdlID0gZGVjb2RlVVJJQ29tcG9uZW50KGtleSk7XHJcbiAgICAgICAgICAgIG5ld0hpZXJhcmNoeVt3ZWJwYWdlXSA9IHsgbWFpblBhZ2U6IFtdLCBqc0ZpbGVzOiB7fSB9O1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGN1cnJQYWdlIGVuZHBvaW50c1xyXG4gICAgICAgICAgICBuZXdIaWVyYXJjaHlbd2VicGFnZV0ubWFpblBhZ2UgPSB1cmxQYXJzZXJba2V5XS5jdXJyUGFnZS5tYXAoKHVybDogc3RyaW5nKTogRW5kcG9pbnQgPT4gKHtcclxuICAgICAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICAgICAgZm91bmRBdDogJ01haW4gUGFnZScsXHJcbiAgICAgICAgICAgICAgd2VicGFnZSxcclxuICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGV4dGVybmFsSlNGaWxlcyBlbmRwb2ludHNcclxuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXModXJsUGFyc2VyW2tleV0uZXh0ZXJuYWxKU0ZpbGVzKS5mb3JFYWNoKChbanNGaWxlLCBlbmRwb2ludHNdKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgZGVjb2RlZEpzRmlsZSA9IGRlY29kZVVSSUNvbXBvbmVudChqc0ZpbGUpO1xyXG4gICAgICAgICAgICAgIGFsbEpzRmlsZXMucHVzaChkZWNvZGVkSnNGaWxlKTtcclxuICAgICAgICAgICAgICBuZXdIaWVyYXJjaHlbd2VicGFnZV0uanNGaWxlc1tkZWNvZGVkSnNGaWxlXSA9IChlbmRwb2ludHMgYXMgc3RyaW5nW10pLm1hcCgodXJsKTogRW5kcG9pbnQgPT4gKHtcclxuICAgICAgICAgICAgICAgIHVybCxcclxuICAgICAgICAgICAgICAgIGZvdW5kQXQ6IGRlY29kZWRKc0ZpbGUsXHJcbiAgICAgICAgICAgICAgICB3ZWJwYWdlLFxyXG4gICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNldEhpZXJhcmNoeShuZXdIaWVyYXJjaHkpO1xyXG4gICAgICAgIHNldEpTRmlsZXMoWydBbGwnLCAuLi5BcnJheS5mcm9tKG5ldyBTZXQoYWxsSnNGaWxlcykpXSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBJbml0aWFsIGZldGNoXHJcbiAgICBmZXRjaERhdGEoKTtcclxuXHJcbiAgICAvLyBMaXN0ZW5lciBmb3Igc3RvcmFnZSBjaGFuZ2VzXHJcbiAgICBjb25zdCBoYW5kbGVTdG9yYWdlQ2hhbmdlID0gKGNoYW5nZXM6IHsgW2tleTogc3RyaW5nXTogY2hyb21lLnN0b3JhZ2UuU3RvcmFnZUNoYW5nZSB9KSA9PiB7XHJcbiAgICAgIGlmIChjaGFuZ2VzW1wiVVJMLVBBUlNFUlwiXSkge1xyXG4gICAgICAgIGZldGNoRGF0YSgpOyAvLyBSZS1mZXRjaCBkYXRhIHdoZW4gVVJMLVBBUlNFUiBjaGFuZ2VzXHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY2hyb21lLnN0b3JhZ2Uub25DaGFuZ2VkLmFkZExpc3RlbmVyKGhhbmRsZVN0b3JhZ2VDaGFuZ2UpO1xyXG5cclxuICAgIC8vIENsZWFudXAgbGlzdGVuZXIgb24gY29tcG9uZW50IHVubW91bnRcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGNocm9tZS5zdG9yYWdlLm9uQ2hhbmdlZC5yZW1vdmVMaXN0ZW5lcihoYW5kbGVTdG9yYWdlQ2hhbmdlKTtcclxuICAgIH07XHJcbiAgfSwgW10pO1xyXG5cclxuICBjb25zdCBoYW5kbGVTZWxlY3QgPSAodXJsOiBzdHJpbmcpID0+IHtcclxuICAgIHNldFNlbGVjdGVkKHVybCk7XHJcbiAgICBzZXRJc09wZW4oZmFsc2UpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGhhbmRsZVNlYXJjaENoYW5nZSA9IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcclxuICAgIHNldFNlYXJjaFF1ZXJ5KGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgdG9nZ2xlRXhwYW5kID0gKGl0ZW06IHN0cmluZykgPT4ge1xyXG4gICAgc2V0RXhwYW5kZWRJdGVtcyhwcmV2ID0+IHtcclxuICAgICAgY29uc3QgbmV3U2V0ID0gbmV3IFNldChwcmV2KTtcclxuICAgICAgaWYgKG5ld1NldC5oYXMoaXRlbSkpIHtcclxuICAgICAgICBuZXdTZXQuZGVsZXRlKGl0ZW0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5ld1NldC5hZGQoaXRlbSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG5ld1NldDtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGZpbHRlckVuZHBvaW50cyA9IChlbmRwb2ludHM6IEVuZHBvaW50W10pOiBFbmRwb2ludFtdID0+IHtcclxuICAgIHJldHVybiBlbmRwb2ludHMuZmlsdGVyKGVuZHBvaW50ID0+IFxyXG4gICAgICBlbmRwb2ludC51cmwudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hRdWVyeS50b0xvd2VyQ2FzZSgpKSAmJlxyXG4gICAgICAoc2VsZWN0ZWQgPT09ICdBbGwnIHx8IGVuZHBvaW50LmZvdW5kQXQgPT09IHNlbGVjdGVkIHx8IGVuZHBvaW50LndlYnBhZ2UgPT09IHNlbGVjdGVkKVxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICBjb25zdCByZW5kZXJFbmRwb2ludCA9IChlbmRwb2ludDogRW5kcG9pbnQpID0+IHtcclxuICAgIGNvbnN0IHBhcnRzID0gZW5kcG9pbnQudXJsLnNwbGl0KG5ldyBSZWdFeHAoYCgke3NlYXJjaFF1ZXJ5fSlgLCAnZ2knKSk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGtleT17ZW5kcG9pbnQudXJsfSBjbGFzc05hbWU9XCJtbC04IG10LTEgZmxleCBpdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtci0yIHRleHQtYmx1ZS01MDBcIj7inqQ8L3NwYW4+XHJcbiAgICAgICAge3BhcnRzLm1hcCgocGFydCwgaW5kZXgpID0+XHJcbiAgICAgICAgICBwYXJ0LnRvTG93ZXJDYXNlKCkgPT09IHNlYXJjaFF1ZXJ5LnRvTG93ZXJDYXNlKCkgPyAoXHJcbiAgICAgICAgICAgIDxzcGFuIGtleT17aW5kZXh9IGNsYXNzTmFtZT1cInRleHQtcmVkLTUwMCBmb250LXNlbWlib2xkXCI+e3BhcnR9PC9zcGFuPlxyXG4gICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgPHNwYW4ga2V5PXtpbmRleH0+e3BhcnR9PC9zcGFuPlxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICBjb25zdCByZW5kZXJIaWVyYXJjaGljYWxWaWV3ID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGhpZXJhcmNoeSkubWFwKChbd2VicGFnZSwgeyBtYWluUGFnZSwganNGaWxlcyB9XSkgPT4ge1xyXG4gICAgICBjb25zdCBmaWx0ZXJlZE1haW5QYWdlID0gZmlsdGVyRW5kcG9pbnRzKG1haW5QYWdlKTtcclxuICAgICAgY29uc3QgZmlsdGVyZWRKc0ZpbGVzID0gT2JqZWN0LmVudHJpZXMoanNGaWxlcykuZmlsdGVyKChbXywgZW5kcG9pbnRzXSkgPT4gXHJcbiAgICAgICAgZmlsdGVyRW5kcG9pbnRzKGVuZHBvaW50cykubGVuZ3RoID4gMFxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKGZpbHRlcmVkTWFpblBhZ2UubGVuZ3RoID09PSAwICYmIGZpbHRlcmVkSnNGaWxlcy5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGtleT17d2VicGFnZX0gY2xhc3NOYW1lPVwibWItNFwiPlxyXG4gICAgICAgICAgPGRpdiBcclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LWJvbGQgY3Vyc29yLXBvaW50ZXIgZmxleCBpdGVtcy1jZW50ZXJcIlxyXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0b2dnbGVFeHBhbmQod2VicGFnZSl9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1yLTIgdGV4dC1ncmVlbi01MDBcIj7wn4yQPC9zcGFuPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtci0yXCI+e2V4cGFuZGVkSXRlbXMuaGFzKHdlYnBhZ2UpID8gJ+KWvCcgOiAn4pa2J308L3NwYW4+XHJcbiAgICAgICAgICAgIHt3ZWJwYWdlfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICB7ZXhwYW5kZWRJdGVtcy5oYXMod2VicGFnZSkgJiYgKFxyXG4gICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgIHtmaWx0ZXJlZE1haW5QYWdlLmxlbmd0aCA+IDAgJiYgKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtbC00IG10LTJcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgY3Vyc29yLXBvaW50ZXIgZmxleCBpdGVtcy1jZW50ZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRvZ2dsZUV4cGFuZChgJHt3ZWJwYWdlfS1tYWluYCl9XHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtci0yXCI+e2V4cGFuZGVkSXRlbXMuaGFzKGAke3dlYnBhZ2V9LW1haW5gKSA/ICfilrwnIDogJ+KWtid9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIE1haW4gUGFnZVxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAge2V4cGFuZGVkSXRlbXMuaGFzKGAke3dlYnBhZ2V9LW1haW5gKSAmJiBmaWx0ZXJlZE1haW5QYWdlLm1hcChyZW5kZXJFbmRwb2ludCl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgIHtmaWx0ZXJlZEpzRmlsZXMubWFwKChbanNGaWxlLCBlbmRwb2ludHNdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJlZEVuZHBvaW50cyA9IGZpbHRlckVuZHBvaW50cyhlbmRwb2ludHMpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRFbmRwb2ludHMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGtleT17anNGaWxlfSBjbGFzc05hbWU9XCJtbC00IG10LTJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1sZyBmb250LXNlbWlib2xkIGN1cnNvci1wb2ludGVyIGZsZXggaXRlbXMtY2VudGVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRvZ2dsZUV4cGFuZChqc0ZpbGUpfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1yLTIgdGV4dC15ZWxsb3ctNTAwXCI+8J+ThDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1yLTJcIj57ZXhwYW5kZWRJdGVtcy5oYXMoanNGaWxlKSA/ICfilrwnIDogJ+KWtid9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2pzRmlsZX1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICB7ZXhwYW5kZWRJdGVtcy5oYXMoanNGaWxlKSAmJiBmaWx0ZXJlZEVuZHBvaW50cy5tYXAocmVuZGVyRW5kcG9pbnQpfVxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIGNsZWFyVVJMcygpe1xyXG4gICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgJ1VSTC1QQVJTRVInOiB7fX0sICgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coXCJDbGVhciBlbmRwb2ludHNcIik7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIG1pbi1oLXNjcmVlblwiPlxyXG4gICAgICA8TmF2QmFyIC8+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtNSBwLTVcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1iLTUgZmxleCBnYXAtNFwiPlxyXG4gICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgdmFsdWU9e3NlYXJjaFF1ZXJ5fVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlU2VhcmNoQ2hhbmdlfVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJweC0yIGJvcmRlci0yIGJvcmRlci1ncmF5LTMwMCBiZy10cmFuc3BhcmVudCB0ZXh0LWxnIHctZnVsbCBwYi0zIHB0LTMgcm91bmRlZC1tZFxyXG4gICAgICAgICAgICAgIGN1cnNvci1wb2ludGVyIGhvdmVyOmJvcmRlci1ncmF5LTUwMCBvdXRsaW5lLW5vbmUgZm9jdXM6Ym9yZGVyLWdyYXktNTAwIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTQwMFwiXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU2VhcmNoIGVuZHBvaW50cy4uLlwiXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZSB3LTY0XCI+XHJcbiAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRJc09wZW4oIWlzT3Blbil9XHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIHB5LTQgcHgtMiBib3JkZXItMiBib3JkZXItZ3JheS0zMDAgYmctdHJhbnNwYXJlbnQgdGV4dC1sZyByb3VuZGVkLW1kIG92ZXJmbG93LWhpZGRlbiB0ZXh0LWVsbGlwc2lzIHdoaXRlc3BhY2Utbm93cmFwXCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIHtzZWxlY3RlZH1cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIHtpc09wZW4gJiYgKFxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgbXQtMSB3LWZ1bGwgYmctd2hpdGUgYm9yZGVyLTIgYm9yZGVyLWdyYXktNTAwIHJvdW5kZWQtbWQgc2hhZG93LWxnIHotMTAgbWF4LWgtNjAgb3ZlcmZsb3ctYXV0b1wiPlxyXG4gICAgICAgICAgICAgICAge2pzRmlsZXMubWFwKCh1cmwsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBrZXk9e2luZGV4fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVNlbGVjdCh1cmwpfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJnLWdyYXktNTAwIHRleHQtd2hpdGUgcC0yIGN1cnNvci1wb2ludGVyIHRleHQtZWxsaXBzaXMgb3ZlcmZsb3ctaGlkZGVuIHdoaXRlc3BhY2Utbm93cmFwIGhvdmVyOmJnLWdyYXktNjAwXCJcclxuICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHt1cmx9XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvcmRlciByb3VuZGVkLWxnIHAtNCBtYXgtaC1bNjAwcHhdIG92ZXJmbG93LWF1dG9cIj5cclxuICAgICAgICAgIHtyZW5kZXJIaWVyYXJjaGljYWxWaWV3KCl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWxnIGZsZXggaXRlbXMtY2VudGVyIHNwYWNlLXgtNCBtdC01XCI+XHJcbiAgICAgICAgICAgIDxhIGhyZWY9e2RvY3VtZW50LmxvY2F0aW9uLm9yaWdpbiArIFwiL1BvcFVwL3BvcHVwLmh0bWwjdXJsc1wifSB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzc05hbWU9XCJiZy1ncmF5LTk1MCBwLTMgcm91bmRlZC1tZCBmb250LXNlbWlib2xkIHRleHQtWyM2NDZjZmZdXCI+V0VCUEFHRSBQQU5FTDwvYT5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJhLWl0ZW0gYmctZ3JheS02MDAgcC0zIHJvdW5kZWQtbWRcIiBvbkNsaWNrPXtjbGVhclVSTHN9PlxyXG4gICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiYmxhY2tcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk00IDdoMTZtLTEwIDR2Nm00LTZ2Nk01IDdsMSAxMmEyIDIgMCAwIDAgMiAyaDhhMiAyIDAgMCAwIDItMmwxLTEyTTkgN1Y0YTEgMSAwIDAgMSAxLTFoNGExIDEgMCAwIDEgMSAxdjNcIi8+PC9zdmc+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8YSBocmVmPXtkb2N1bWVudC5sb2NhdGlvbi5vcmlnaW4gKyBcIi9Qb3BVcC9wb3B1cC5odG1sI3VybHMvb3V0cHV0XCJ9IHRhcmdldD1cIl9ibGFua1wiIGNsYXNzTmFtZT1cImEtaXRlbSBiZy1ncmF5LTYwMCBwLTMgcm91bmRlZC1tZCBmb250LXNlbWlib2xkIHRleHQtZ3JheS0zMDBcIj5PVVRQVVQ8L2E+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufSIsImltcG9ydCB7IE5hdkJhciB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvbmF2YmFyJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEpTRmlsZXMoKXtcclxuICAgIHJldHVybihcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8TmF2QmFyIC8+XHJcbiAgICAgICAgICAgIDxoMT5KUyBGSUxFUzwvaDE+XHJcbiAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgTG9jYXRlZCBhdCAgeyBkb2N1bWVudC5sb2NhdGlvbi5ocmVmIH1cclxuICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IHsgTmF2QmFyIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9uYXZiYXInO1xyXG5pbXBvcnQgXCIuLi9BcHAuY3NzXCI7XHJcbmltcG9ydCBcIi4uL2luZGV4LmNzc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFNlY3JldHMoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIG1pbi1oLXNjcmVlblwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtbC0yIG10LTJcIj5cclxuICAgICAgICAgICAgPE5hdkJhciAvPlxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImEtaXRlbSBhLWNvbG9yIG10LTJcIiBvbkNsaWNrPXsoKSA9PiBsb2NhdGlvbi5yZWxvYWQoKX0+XHJcbiAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PGcgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCIjNGQ0YzRjXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiPjxwYXRoIGQ9XCJNMTkuOTMzIDEzLjA0MWE4IDggMCAxIDEtOS45MjUtOC43ODhjMy44OTktMSA3LjkzNSAxLjAwNyA5LjQyNSA0Ljc0N1wiLz48cGF0aCBkPVwiTTIwIDR2NWgtNVwiLz48L2c+PC9zdmc+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTUgZmxleFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB5LTEgdy1mdWxsIGZsZXggZmxleC1jb2wgZ2FwLTEwXCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgbWF4LWgtWzc2MHB4XSBvdmVyZmxvdy1hdXRvXCI+XHJcbiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwidy1mdWxsIGJvcmRlci1jb2xsYXBzZVwiPlxyXG4gICAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInRleHQtNXhsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwic2VjcmV0cy10aCBib3JkZXItYi0yIHBiLTEwXCI+SURFTlRJRklFUiA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LVsjM2RhMjhmXVwiPjwvc3Bhbj48L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cInNlY3JldHMtdGggYm9yZGVyLWItMiBwYi0xMFwiPlZBTFVFPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJzZWNyZXRzLXRoIGJvcmRlci1iLTIgcGItMTBcIj5MT0NBVElPTjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwic2VjcmV0cy10aCBib3JkZXItYi0yIHBiLTEwXCI+Q09ERTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInNlY3JldHMtdGRcIj5BVVRIX0tFWTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJzZWNyZXRzLXRkXCI+MTIzc3VwZXJzZWNyZXQ8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwic2VjcmV0cy10ZFwiPmh0dHA6Ly9ibGFoLmNvbS9wYXJzZS5qczwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJzZWNyZXRzLXRkXCI+PGEgaHJlZj1cIiNcIj5WaWV3IEhlcmU8L2E+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInNlY3JldHMtdGRcIj5hZG1pbl9wdzwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJzZWNyZXRzLXRkXCI+MTIzc3VwZXJzZWNyZXRhZG1pbjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJzZWNyZXRzLXRkXCI+aHR0cDovL2JsYWguY29tL3BhcnNlLmpzPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInNlY3JldHMtdGRcIj48YSBocmVmPVwiI1wiPlZpZXcgSGVyZTwvYT48L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHsvKiA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwic2VjcmV0cy10ZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtNSB3LWZ1bGxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtzZWFyY2hRdWVyeX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVTZWFyY2hDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJweC0yIGJvcmRlci0yIGJvcmRlci1ncmF5LTMwMCBiZy10cmFuc3BhcmVudCB0ZXh0LWxnIHctZnVsbCBwYi0zIHB0LTMgcm91bmRlZC1tZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3ItcG9pbnRlciB0ZXh0LWdyYXktMzAwIGhvdmVyOmJvcmRlci1ncmF5LTUwMCBvdXRsaW5lLW5vbmUgZm9jdXM6Ym9yZGVyLWdyYXktNTAwIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTQwMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlYXJjaCBlbmRwb2ludHMuLi5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInNlY3JldHMtdGRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZSB3LWZ1bGwgbWF4LXctbGcgbXQtNVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzT3BlbighaXNPcGVuKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImEtaXRlbSB3LWZ1bGwgcHgtMiBib3JkZXItMiBib3JkZXItZ3JheS0zMDAgYmctdHJhbnNwYXJlbnQgdGV4dC1sZyByb3VuZGVkLW1kIG92ZXJmbG93LWhpZGRlbiB0ZXh0LWVsbGlwc2lzIHdoaXRlc3BhY2Utbm93cmFwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2VsZWN0ZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAge2lzT3BlbiAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIG10LTEgdy1mdWxsIGJnLXdoaXRlIGJvcmRlci0yIGJvcmRlci1ncmF5LTUwMCByb3VuZGVkLW1kIHNoYWRvdy1sZyB6LTEwIG1heC1oLTYwIG92ZXJmbG93LWF1dG9cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2pzRmlsZXMubWFwKCh1cmwsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExvY2F0aW9uSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpbmRleH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybD17dXJsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlU2VsZWN0KHVybCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj4gKi99XHJcbiAgICAgICAgICAgICAgICAgICAgey8qIHtmaWx0ZXJlZFVSTHMubWFwKChlbmRwb2ludCwgaW5kZXgpID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgIDxVUkxQcm9wcyBrZXk9e2luZGV4fSBlbmRwb2ludD17ZW5kcG9pbnR9IHNlYXJjaFF1ZXJ5PXtzZWFyY2hRdWVyeX0gLz5cclxuICAgICAgICAgICAgICAgICAgICApKX0gKi99XHJcbiAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1sZyBmbGV4IGl0ZW1zLWNlbnRlciBzcGFjZS14LTQgcHgtNVwiPlxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj17ZG9jdW1lbnQubG9jYXRpb24ub3JpZ2luICsgXCIvUG9wVXAvcG9wdXAuaHRtbCN1cmxzXCJ9IHRhcmdldD1cIl9ibGFua1wiIGNsYXNzTmFtZT1cImJnLWdyYXktOTUwIHAtMyByb3VuZGVkLW1kXCI+T3BlbiBpbiBOZXcgVGFiPC9hPlxyXG4gICAgICAgICAgICAgICAgey8qIDxidXR0b24gY2xhc3NOYW1lPVwiYS1pdGVtIGJnLWdyYXktNjAwIHAtMyByb3VuZGVkLW1kXCIgb25DbGljaz17Y2xlYXJVUkxzfT5cclxuICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJibGFja1wiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTQgN2gxNm0tMTAgNHY2bTQtNnY2TTUgN2wxIDEyYTIgMiAwIDAgMCAyIDJoOGEyIDIgMCAwIDAgMi0ybDEtMTJNOSA3VjRhMSAxIDAgMCAxIDEtMWg0YTEgMSAwIDAgMSAxIDF2M1wiLz48L3N2Zz5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPiAqL31cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYS1pdGVtIGJnLWdyYXktNjAwIHAtMyByb3VuZGVkLW1kXCI+RG93bmxvYWQgYXMgVFhUPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImEtaXRlbSBiZy1ncmF5LTYwMCBwLTMgcm91bmRlZC1tZFwiPkRvd25sb2FkIGFzIEpTT048L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYS1pdGVtIGJnLWdyYXktNjAwIHAtMyByb3VuZGVkLW1kXCI+Q29weSBhcyBhYnNvbHV0ZSBVUkxzPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImEtaXRlbSBiZy1ncmF5LTYwMCBwLTMgcm91bmRlZC1tZFwiPkNvcHkgQWxsPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICk7XHJcbn1cclxuIiwiaW1wb3J0IHsgTmF2QmFyIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9uYXZiYXInO1xyXG5pbXBvcnQgXCIuLi9BcHAuY3NzXCI7XHJcbmltcG9ydCBcIi4uL2luZGV4LmNzc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFVSTFNWaXNpdGVkKCl7XHJcbiAgICAvLyBIYXZlIHRvIGNyZWF0ZSBsb2dpYyBpbiBcImZldGNoaW5nXCIgdGhlIGRhdGUgZnJvbSBzdG9yYWdlXHJcbiAgICBjb25zdCBkID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICAvLyBIYXZlIHRvIGNyZWF0ZSBsb2dpYyBpbiBcImZldGNoaW5nXCIgdmlzaXRlZCB1cmxzXHJcbiAgICAvLyBIYXZlIHRvIGNyZWF0ZSBsb2dpYyBpbiBcImZldGNoaW5nXCIgZmlsZXNcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgbWluLWgtc2NyZWVuXCI+XHJcbiAgICAgICAgICAgIDxOYXZCYXIgLz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC01IGZsZXggZmxleC1jb2wgdy1mdWxsIGdhcC01XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB5LTEgdy1mdWxsIGZsZXggZmxleC1jb2wgZ2FwLTEwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInctZnVsbCBtYi01IGJvcmRlci1jb2xsYXBzZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwidGV4dC0yeGxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwiYm9yZGVyLWItMiBwYi0xMFwiPlVSTFMgVklTSVRFRDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cImJvcmRlci1iLTIgcGItMTBcIj5GSUxFUzwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cImJvcmRlci1iLTIgcGItMTBcIj5GSUxFIENIQU5HRUQ8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJib3JkZXItYi0yIHBiLTEwXCI+TEFTVCBBQ0NFU1NFRDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTIwXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+eyBkb2N1bWVudC5sb2NhdGlvbi5ocmVmIH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5jYXJ0LmpzPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+WUVTPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e2QudG9TdHJpbmcoKX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+eyBkb2N1bWVudC5sb2NhdGlvbi5ocmVmIH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5jYXJ0LmpzPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+WUVTPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e2QudG9TdHJpbmcoKX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+eyBkb2N1bWVudC5sb2NhdGlvbi5ocmVmIH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5jYXJ0LmpzPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+WUVTPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e2QudG9TdHJpbmcoKX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1sZyBmbGV4IGl0ZW1zLWNlbnRlciBzcGFjZS14LTQgcHgtNVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtkb2N1bWVudC5sb2NhdGlvbi5ocmVmfSB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzc05hbWU9XCJiZy1ncmF5LTk1MCBwLTMgcm91bmRlZC1tZFwiPk9wZW4gaW4gTmV3IFRhYjwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJiZy1ncmF5LTgwMCBwLTMgcm91bmRlZC1tZFwiPkRvd25sb2FkIGFzIFRYVDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufSIsImltcG9ydCB7IFVSTHNEZWZhdWx0VmlldyB9IGZyb20gJy4vdXJscy1kZWZhdWx0dmlldyc7XHJcbmltcG9ydCB7IFVSTHNUcmVlVmlldyB9IGZyb20gJy4vdXJscy10cmVldmlldyc7XHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFVSTHMoKSB7XHJcbiAgICBjb25zdCBbc2VsZWN0aW9uLCBzZXRTZWxlY3Rpb25dID0gdXNlU3RhdGUoXCJkZWZhdWx0XCIpO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17YHB4LTEwIHB5LTIgZm9udC1zZW1pYm9sZCAke3NlbGVjdGlvbiA9PSBcImRlZmF1bHRcIiA/IFwidGV4dC1wdXJwbGUtNTAwIGJnLWJsYWNrXCI6IFwiXCJ9YH0gb25DbGljaz17KCkgPT4gc2V0U2VsZWN0aW9uKFwiZGVmYXVsdFwiKX0+REVGQVVMVDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e2BweC0xMCBweS0yIGZvbnQtc2VtaWJvbGQgJHtzZWxlY3Rpb24gPT0gXCJ0cmVlXCIgPyBcInRleHQtcHVycGxlLTUwMCBiZy1ibGFja1wiOiBcIlwifWB9IG9uQ2xpY2s9eygpID0+IHNldFNlbGVjdGlvbihcInRyZWVcIil9PlRSRUU8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHktMVwiPjwvZGl2PlxyXG4gICAgICAgICAgICB7c2VsZWN0aW9uID09PSBcImRlZmF1bHRcIiA/IDxVUkxzRGVmYXVsdFZpZXcgLz4gOiA8VVJMc1RyZWVWaWV3IC8+fVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgU3RyaWN0TW9kZSB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSAncmVhY3QtZG9tL2NsaWVudCdcclxuaW1wb3J0IERldlRvb2xzQXBwIGZyb20gJy4vRGV2dG9vbHNBcHAnXHJcbmltcG9ydCB7XHJcbiAgSGFzaFJvdXRlciBhcyBSb3V0ZXIsXHJcbiAgUm91dGUsXHJcbiAgUm91dGVzLFxyXG59IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcbmltcG9ydCB7IFVSTHNEZWZhdWx0VmlldyB9IGZyb20gJy4vcm91dGVzL3VybHMtZGVmYXVsdHZpZXcnXHJcbmltcG9ydCB7IFVSTHNUcmVlVmlldyB9IGZyb20gJy4vcm91dGVzL3VybHMtdHJlZXZpZXcnXHJcbmltcG9ydCB7IEpTRmlsZXMgfSBmcm9tICcuL3JvdXRlcy9qcy1maWxlcydcclxuaW1wb3J0IHsgU2VjcmV0cyB9IGZyb20gJy4vcm91dGVzL3NlY3JldHMnXHJcbmltcG9ydCB7IFVSTFNWaXNpdGVkIH0gZnJvbSAnLi9yb3V0ZXMvdXJsc3Zpc2l0ZWQnO1xyXG5pbXBvcnQgeyBVUkxzIH0gZnJvbSAnLi9yb3V0ZXMvdXJscyc7XHJcblxyXG5cclxuXHJcbi8vIENyZWF0ZSB0aGUgRGV2VG9vbHMgcGFuZWxcclxuY2hyb21lLmRldnRvb2xzLnBhbmVscy5jcmVhdGUoXHJcbiAgXCJlbmRQb2ludGVyXCIsXHJcbiAgXCJcIixcclxuICBcIkRldlRvb2wvRGV2VG9vbC5odG1sXCIsXHJcbiAgKHBhbmVsKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkRldlRvb2xzIHBhbmVsIGNyZWF0ZWRcIik7XHJcblxyXG4gICAgY29uc3QgbG9nQ3VycmVudFVybCA9ICgpID0+IHtcclxuICAgICAgY2hyb21lLnRhYnMuZ2V0KGNocm9tZS5kZXZ0b29scy5pbnNwZWN0ZWRXaW5kb3cudGFiSWQsICh0YWIpID0+IHtcclxuICAgICAgICBpZiAodGFiICYmIHRhYi51cmwpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ3VycmVudCBVUkw6XCIsIHRhYi51cmwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGdldCBjdXJyZW50IHRhYiBVUkxcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gTG9nIFVSTCB3aGVuIHBhbmVsIGlzIHNob3duXHJcbiAgICBwYW5lbC5vblNob3duLmFkZExpc3RlbmVyKGxvZ0N1cnJlbnRVcmwpO1xyXG5cclxuICAgIC8vIExvZyBVUkwgb24gcGFnZSB1cGRhdGVzIGZvciB0aGUgaW5zcGVjdGVkIHdpbmRvd1xyXG4gICAgY2hyb21lLnRhYnMub25VcGRhdGVkLmFkZExpc3RlbmVyKCh0YWJJZCwgY2hhbmdlSW5mbywgdGFiKSA9PiB7XHJcbiAgICAgIGlmICh0YWJJZCA9PT0gY2hyb21lLmRldnRvb2xzLmluc3BlY3RlZFdpbmRvdy50YWJJZCAmJiBjaGFuZ2VJbmZvLnN0YXR1cyA9PT0gJ2NvbXBsZXRlJykge1xyXG4gICAgICAgIGxvZ0N1cnJlbnRVcmwoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4pO1xyXG5cclxuLy8gUmVuZGVyIHRoZSBSZWFjdCBhcHBcclxuZnVuY3Rpb24gcmVuZGVyQXBwKCkge1xyXG4gIGNvbnN0IHJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpO1xyXG4gIGlmIChyb290KSB7XHJcbiAgICBjcmVhdGVSb290KHJvb3QpLnJlbmRlcihcclxuICAgICAgPFN0cmljdE1vZGU+XHJcbiAgICAgICAgPFJvdXRlcj5cclxuICAgICAgICAgIDxSb3V0ZXM+XHJcbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxEZXZUb29sc0FwcCAvPn0gLz5cclxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdXJscy9cIiBlbGVtZW50PXs8VVJMcyAvPn0gLz5cclxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdXJscy9kZWZhdWx0XCIgZWxlbWVudD17PFVSTHNEZWZhdWx0VmlldyAvPn0gLz5cclxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdXJscy90cmVlXCIgZWxlbWVudD17PFVSTHNUcmVlVmlldyAvPn0gLz5cclxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvanMtZmlsZXNcIiBlbGVtZW50PXs8SlNGaWxlcyAvPn0gLz5cclxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvc2VjcmV0c1wiIGVsZW1lbnQ9ezxTZWNyZXRzIC8+fSAvPlxyXG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi91cmxzdmlzaXRlZFwiIGVsZW1lbnQ9ezxVUkxTVmlzaXRlZCAvPn0gLz5cclxuICAgICAgICAgIDwvUm91dGVzPlxyXG4gICAgICAgIDwvUm91dGVyPlxyXG4gICAgICA8L1N0cmljdE1vZGU+XHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIlJvb3QgZWxlbWVudCBub3QgZm91bmRcIik7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBXYWl0IGZvciB0aGUgRE9NIHRvIGJlIGZ1bGx5IGxvYWRlZCBiZWZvcmUgcmVuZGVyaW5nXHJcbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgcmVuZGVyQXBwKTtcclxufSBlbHNlIHtcclxuICByZW5kZXJBcHAoKTtcclxufSJdLCJuYW1lcyI6WyJEZXZUb29sc0FwcCIsInVybENvdW50Iiwic2V0VVJMQ291bnQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImRhdGEiLCJ1cmxQYXJzZXIiLCJ0b3RhbFVSTENvdW50Iiwia2V5IiwiY3VyclVSTEVuZHBvaW50cyIsImN1cnJVUkxFeHRKU0ZpbGVzIiwidG90YWxFbmRwb2ludHNJbkN1cnJQYWdlIiwidG90YWxFbmRwb2ludHNJbkV4dEpTRmlsZXMiLCJoYW5kbGVTdG9yYWdlQ2hhbmdlIiwiY2hhbmdlcyIsIm5ld1VybFBhcnNlciIsInVwZGF0ZWRUb3RhbFVSTENvdW50IiwiY2xlYXJDYWNoZSIsImNsZWFyVVJMcyIsImpzeHMiLCJqc3giLCJMaW5rIiwiTmF2QmFyIiwiVVJMc0RlZmF1bHRWaWV3IiwiVVJMUHJvcHMiLCJlbmRwb2ludCIsInNlYXJjaFF1ZXJ5IiwicmVnZXhDb250cm9sQ2hhcnMiLCJlc2NhcGVkUXVlcnkiLCJjaGFyIiwicGFydHMiLCJpc0dlbmVyYXRlUmVwb3J0T3BlbiIsInNldElzR2VuZXJhdGVSZXBvcnRPcGVuIiwiaXNWaWV3Q29kZU9wZW4iLCJzZXRJc1ZpZXdDb2RlT3BlbiIsImlzU2VlUmVzcG9uc2VPcGVuIiwic2V0SXNTZWVSZXNwb25zZU9wZW4iLCJyZXNwU3RhdHVzIiwic2V0UmVzcFN0YXR1cyIsInJlc3BTdGF0dXNNZXNzYWdlIiwic2V0UmVzcFN0YXR1c01lc3NhZ2UiLCJyZXNwQm9keSIsInNldFJlc3BCb2R5IiwiY3VycmVudE1ldGhvZCIsInNldEN1cnJlbnRNZXRob2QiLCJjbG9zZUFsbE1vZGFscyIsImhlYWRlcnMiLCJzZXRIZWFkZXJzIiwic2FuaXRpemVkVVJMIiwidmVyaWZpZWRVUkwiLCJjbGVhbmVkV2VicGFnZSIsImZldGNoRGF0YSIsIm1ldGhvZCIsInJlc3BvbnNlIiwiZmV0Y2hlZEhlYWRlcnMiLCJ2YWx1ZSIsImhlYWRlciIsInByZXYiLCJyZXNwb25zZUJvZHkiLCJiZWF1dGlmaWVkSFRNTCIsImJlYXV0aWZ5IiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJjb2RlU25pcHBldCIsInNldENvZGVTbmlwcGV0IiwicmVzIiwiY29kZSIsImJlYXV0aWZpZWRDb2RlIiwicmVnZXgiLCJtYXRjaGVzIiwicGFydCIsImluZGV4IiwiZSIsInNuaXBwZXQiLCJoZWFkZXJOYW1lIiwicmVzdCIsIkxvY2F0aW9uSXRlbSIsInVybCIsIm9uQ2xpY2siLCJ1cmxzIiwic2V0VVJMcyIsImpzRmlsZXMiLCJzZXRKU0ZpbGVzIiwic2VsZWN0ZWQiLCJzZXRTZWxlY3RlZCIsImlzT3BlbiIsInNldElzT3BlbiIsInNldFNlYXJjaFF1ZXJ5IiwidmlzYWJsZVVybHMiLCJzZXRWaXNhYmxlVXJscyIsInN0YXJ0SW5kZXgiLCJzZXRTdGFydEluZGV4IiwiVklTQUJMRV9VUkxfU0laRSIsInRhYmxlX1JlZiIsInVzZVJlZiIsImFsbEVuZHBvaW50cyIsImxvY2F0aW9ucyIsImpzRmlsZSIsImVuZHBvaW50cyIsImRlY29kZWRKc0ZpbGUiLCJ1bmlxdWVMb2NhdGlvbnMiLCJoYW5kbGVTZWxlY3QiLCJoYW5kbGVTZWFyY2hDaGFuZ2UiLCJldmVudCIsImZpbHRlcmVkVVJMcyIsIm1hdGNoZXNMb2NhdGlvbiIsIm1hdGNoZXNRdWVyeSIsImhhbmRsZVNjcm9sbCIsInNjcm9sbFRvcCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsIlVSTHNUcmVlVmlldyIsImhpZXJhcmNoeSIsInNldEhpZXJhcmNoeSIsImV4cGFuZGVkSXRlbXMiLCJzZXRFeHBhbmRlZEl0ZW1zIiwibmV3SGllcmFyY2h5IiwiYWxsSnNGaWxlcyIsIndlYnBhZ2UiLCJ0b2dnbGVFeHBhbmQiLCJpdGVtIiwibmV3U2V0IiwiZmlsdGVyRW5kcG9pbnRzIiwicmVuZGVyRW5kcG9pbnQiLCJyZW5kZXJIaWVyYXJjaGljYWxWaWV3IiwibWFpblBhZ2UiLCJmaWx0ZXJlZE1haW5QYWdlIiwiZmlsdGVyZWRKc0ZpbGVzIiwiXyIsIkZyYWdtZW50IiwiZmlsdGVyZWRFbmRwb2ludHMiLCJKU0ZpbGVzIiwiU2VjcmV0cyIsIlVSTFNWaXNpdGVkIiwiVVJMcyIsInNlbGVjdGlvbiIsInNldFNlbGVjdGlvbiIsInBhbmVsIiwibG9nQ3VycmVudFVybCIsInRhYiIsInRhYklkIiwiY2hhbmdlSW5mbyIsInJlbmRlckFwcCIsInJvb3QiLCJjcmVhdGVSb290IiwiU3RyaWN0TW9kZSIsIlJvdXRlciIsIlJvdXRlcyIsIlJvdXRlIl0sIm1hcHBpbmdzIjoicUdBS0EsU0FBU0EsSUFBYyxDQUNyQixLQUFNLENBQUNDLEVBQVVDLENBQVcsRUFBSUMsV0FBUyxDQUFDLEVBd0MxQ0MsRUFBQUEsVUFBVSxJQUFNLENBRWQsT0FBTyxRQUFRLE1BQU0sSUFBSSxhQUFlQyxHQUFTLENBQ3pDLE1BQUFDLEVBQVlELEVBQUssWUFBWSxFQUNuQyxJQUFJRSxFQUFnQixFQUdwQixPQUFPLEtBQUtELENBQVMsRUFBRSxRQUFTRSxHQUFRLENBQ3RDLEdBQUlBLElBQVEsVUFBVyxDQUNyQixNQUFNQyxFQUFtQkgsRUFBVUUsQ0FBRyxFQUFFLFNBQ2xDRSxFQUFvQkosRUFBVUUsQ0FBRyxFQUFFLGdCQUduQ0csRUFBMkJGLEVBQWlCLE9BQzVDRyxFQUE2QixPQUFPLE9BQU9GLENBQWlCLEVBQUUsS0FBTyxFQUFBLE9BRzNFSCxHQUFpQkksRUFBMkJDLENBQzlDLENBQUEsQ0FDRCxFQUdEVixFQUFZSyxDQUFhLENBQUEsQ0FDMUIsRUFHSyxNQUFBTSxFQUF1QkMsR0FBNkQsQ0FHcEYsR0FGSSxRQUFBLElBQUksNEJBQTZCQSxDQUFPLEVB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
