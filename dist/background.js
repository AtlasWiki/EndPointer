function c(){const e={urlParser:!1,urlCount:0,fileDownloader:!1};chrome.storage.local.set(e,()=>{console.log("Default values set on installation")})}function l(e,r){return new Promise((o,t)=>{chrome.storage.local.set({[e]:r},()=>{chrome.runtime.lastError?(console.error(`Error saving ${e} state:`,chrome.runtime.lastError),t(chrome.runtime.lastError)):(console.log(`${e} state saved:`,r),o())})})}function i(e){chrome.storage.local.get(["urlParser","fileDownloader","urlCount","fileCount"],r=>{chrome.runtime.lastError?(console.error("Error getting state:",chrome.runtime.lastError),e({})):e(r)})}function u(){chrome.tabs.onUpdated.addListener((e,r,o)=>{r.status==="complete"&&chrome.storage.local.get(["urlParser","fileDownloader"],t=>{t.urlParser&&chrome.tabs.sendMessage(e,{action:"countURLs"}),t.fileDownloader&&chrome.tabs.sendMessage(e,{action:"countJSFiles"})})})}function d(){chrome.runtime.onMessage.addListener((e,r,o)=>{switch(console.log("Background script received message:",e),e.action){case"urlParserChanged":case"fileDownloaderChanged":g(e);break;case"updateURLCount":case"updateJSFileCount":h(e);break;case"getState":return i(t=>{o(t)}),!0}o({success:!0})})}function g(e){const{action:r,state:o}=e,t=r==="urlParserChanged"?"urlParser":"fileDownloader";l(t,o),chrome.tabs.query({active:!0,currentWindow:!0},n=>{var a;(a=n[0])!=null&&a.id&&chrome.tabs.sendMessage(n[0].id,{action:`${t}StateChanged`,state:o})})}async function h(e){const{action:r,count:o}=e,t=r==="updateURLCount"?"urlCount":"fileCount",n=o??0;try{const a=await chrome.storage.local.get(["URL-PARSER",t]),m=a["URL-PARSER"]||{};let s=a[t]||0;r==="updateURLCount"&&(s+=n),await chrome.storage.local.set({[t]:s}),console.log(`${t} updated to ${s}`),chrome.runtime.sendMessage({action:`${t}Updated`,count:s})}catch(a){console.error("Error updating count:",a)}}chrome.runtime.onInstalled.addListener(()=>{c()});u();d();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbXBvbmVudHMvYmFja2dyb3VuZC9zdGF0ZU1hbmFnZXIudHMiLCIuLi9zcmMvY29tcG9uZW50cy9iYWNrZ3JvdW5kL3RhYkhhbmRsZXIudHMiLCIuLi9zcmMvY29tcG9uZW50cy9iYWNrZ3JvdW5kL21lc3NhZ2VIYW5kbGVyLnRzIiwiLi4vc3JjL2JhY2tncm91bmQtbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlbnNpb25TdGF0ZSB9IGZyb20gJy4uL3NoYXJlZFR5cGVzL21lc3NhZ2VfdHlwZXMnO1xyXG5cclxuLy8gSW5pdGlhbGl6ZXMgdGhlIGV4dGVuc2lvbiBzdGF0ZVxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVN0YXRlKCkge1xyXG4gIGNvbnN0IGluaXRpYWxTdGF0ZTogRXh0ZW5zaW9uU3RhdGUgPSB7XHJcbiAgICB1cmxQYXJzZXI6IGZhbHNlLFxyXG4gICAgdXJsQ291bnQ6IDAsXHJcbiAgICBmaWxlRG93bmxvYWRlcjogZmFsc2VcclxuICB9O1xyXG5cclxuICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoaW5pdGlhbFN0YXRlLCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkRlZmF1bHQgdmFsdWVzIHNldCBvbiBpbnN0YWxsYXRpb25cIik7XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8vIFVwZGF0ZXMgYSBzcGVjaWZpYyBzdGF0ZSB2YWx1ZVxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU3RhdGUoa2V5OiBrZXlvZiBFeHRlbnNpb25TdGF0ZSwgdmFsdWU6IGFueSkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBba2V5XTogdmFsdWUgfSwgKCkgPT4ge1xyXG4gICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3Igc2F2aW5nICR7a2V5fSBzdGF0ZTpgLCBjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpO1xyXG4gICAgICAgIHJlamVjdChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGAke2tleX0gc3RhdGUgc2F2ZWQ6YCwgdmFsdWUpO1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8vIFJldHJpZXZlcyB0aGUgY3VycmVudCBzdGF0ZVxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGUoY2FsbGJhY2s6IChzdGF0ZTogUGFydGlhbDxFeHRlbnNpb25TdGF0ZT4pID0+IHZvaWQpIHtcclxuICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoWyd1cmxQYXJzZXInLCAnZmlsZURvd25sb2FkZXInLCAndXJsQ291bnQnLCAnZmlsZUNvdW50J10sIFxyXG4gICAgKHJlc3VsdDogUGFydGlhbDxFeHRlbnNpb25TdGF0ZT4pID0+IHtcclxuICAgICAgaWYgKGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgc3RhdGU6JywgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKTtcclxuICAgICAgICBjYWxsYmFjayh7fSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2FsbGJhY2socmVzdWx0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICk7XHJcbn0iLCIvLyBTZXRzIHVwIHRhYiB1cGRhdGUgbGlzdGVuZXJzXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFRhYkxpc3RlbmVycygpIHtcclxuICBjaHJvbWUudGFicy5vblVwZGF0ZWQuYWRkTGlzdGVuZXIoKHRhYklkLCBjaGFuZ2VJbmZvLCB0YWIpID0+IHtcclxuICAgIGlmIChjaGFuZ2VJbmZvLnN0YXR1cyA9PT0gJ2NvbXBsZXRlJykge1xyXG4gICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoWyd1cmxQYXJzZXInLCAnZmlsZURvd25sb2FkZXInXSwgKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGlmIChyZXN1bHQudXJsUGFyc2VyKSB7XHJcbiAgICAgICAgICBjaHJvbWUudGFicy5zZW5kTWVzc2FnZSh0YWJJZCwge2FjdGlvbjogXCJjb3VudFVSTHNcIn0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVzdWx0LmZpbGVEb3dubG9hZGVyKSB7XHJcbiAgICAgICAgICBjaHJvbWUudGFicy5zZW5kTWVzc2FnZSh0YWJJZCwge2FjdGlvbjogXCJjb3VudEpTRmlsZXNcIn0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0iLCIgIGltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICcuLi9zaGFyZWRUeXBlcy9tZXNzYWdlX3R5cGVzJztcclxuICBpbXBvcnQgeyB1cGRhdGVTdGF0ZSwgZ2V0U3RhdGUgfSBmcm9tICcuL3N0YXRlTWFuYWdlcic7XHJcblxyXG4gXHJcblxyXG4gIGV4cG9ydCBmdW5jdGlvbiBzZXR1cE1lc3NhZ2VMaXN0ZW5lcnMoKSB7XHJcbiAgICBjaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2U6IE1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kIHNjcmlwdCByZWNlaXZlZCBtZXNzYWdlOicsIG1lc3NhZ2UpO1xyXG5cclxuICAgICAgc3dpdGNoIChtZXNzYWdlLmFjdGlvbikge1xyXG4gICAgICAgIGNhc2UgJ3VybFBhcnNlckNoYW5nZWQnOlxyXG4gICAgICAgIGNhc2UgJ2ZpbGVEb3dubG9hZGVyQ2hhbmdlZCc6XHJcbiAgICAgICAgICBoYW5kbGVTdGF0ZUNoYW5nZShtZXNzYWdlKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3VwZGF0ZVVSTENvdW50JzpcclxuICAgICAgICBjYXNlICd1cGRhdGVKU0ZpbGVDb3VudCc6XHJcbiAgICAgICAgICBoYW5kbGVDb3VudFVwZGF0ZShtZXNzYWdlKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2dldFN0YXRlJzpcclxuICAgICAgICAgIGdldFN0YXRlKChzdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgICBzZW5kUmVzcG9uc2Uoc3RhdGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gSW5kaWNhdGVzIHRoYXQgdGhlIHJlc3BvbnNlIGlzIHNlbnQgYXN5bmNocm9ub3VzbHlcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogdHJ1ZSB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlU3RhdGVDaGFuZ2UobWVzc2FnZTogTWVzc2FnZSk6IHZvaWQge1xyXG4gICAgY29uc3QgeyBhY3Rpb24sIHN0YXRlIH0gPSBtZXNzYWdlO1xyXG4gICAgY29uc3Qga2V5ID0gYWN0aW9uID09PSAndXJsUGFyc2VyQ2hhbmdlZCcgPyAndXJsUGFyc2VyJyA6ICdmaWxlRG93bmxvYWRlcic7XHJcblxyXG4gICAgdXBkYXRlU3RhdGUoa2V5LCBzdGF0ZSk7XHJcblxyXG4gICAgY2hyb21lLnRhYnMucXVlcnkoe2FjdGl2ZTogdHJ1ZSwgY3VycmVudFdpbmRvdzogdHJ1ZX0sICh0YWJzKSA9PiB7XHJcbiAgICAgIGlmICh0YWJzWzBdPy5pZCkge1xyXG4gICAgICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYnNbMF0uaWQsIHsgYWN0aW9uOiBgJHtrZXl9U3RhdGVDaGFuZ2VkYCwgc3RhdGUgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQ291bnRVcGRhdGUobWVzc2FnZTogTWVzc2FnZSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgeyBhY3Rpb24sIGNvdW50IH0gPSBtZXNzYWdlO1xyXG4gICAgY29uc3Qga2V5ID0gYWN0aW9uID09PSAndXBkYXRlVVJMQ291bnQnID8gJ3VybENvdW50JyA6ICdmaWxlQ291bnQnO1xyXG4gICAgY29uc3QgY291bnRWYWx1ZSA9IGNvdW50ID8/IDA7XHJcbiAgICB0cnl7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KFsnVVJMLVBBUlNFUicsIGtleV0pO1xyXG4gICAgICBjb25zdCB1cmxQYXJzZXIgPSByZXN1bHRbJ1VSTC1QQVJTRVInXSB8fCB7fTtcclxuICAgICAgbGV0IHRvdGFsQ291bnQgPSByZXN1bHRba2V5XSB8fCAwO1xyXG5cclxuICAgIGlmIChhY3Rpb24gPT09ICd1cGRhdGVVUkxDb3VudCcpIHtcclxuICAgICAgdG90YWxDb3VudCAgKz0gY291bnRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBba2V5XTogdG90YWxDb3VudCB9KTtcclxuICAgIGNvbnNvbGUubG9nKGAke2tleX0gdXBkYXRlZCB0byAke3RvdGFsQ291bnR9YCk7XHJcbiAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7IGFjdGlvbjogYCR7a2V5fVVwZGF0ZWRgLCBjb3VudDogdG90YWxDb3VudCB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgY291bnQ6JywgZXJyb3IpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBpbml0aWFsaXplU3RhdGUgfSBmcm9tICcuL2NvbXBvbmVudHMvYmFja2dyb3VuZC9zdGF0ZU1hbmFnZXInO1xyXG5pbXBvcnQgeyBzZXR1cFRhYkxpc3RlbmVycyB9IGZyb20gJy4vY29tcG9uZW50cy9iYWNrZ3JvdW5kL3RhYkhhbmRsZXInO1xyXG5pbXBvcnQgeyBzZXR1cE1lc3NhZ2VMaXN0ZW5lcnMgfSBmcm9tICcuL2NvbXBvbmVudHMvYmFja2dyb3VuZC9tZXNzYWdlSGFuZGxlcic7XHJcblxyXG4vLyBJbml0aWFsaXplIHN0YXRlIHdoZW4gZXh0ZW5zaW9uIGlzIGluc3RhbGxlZFxyXG5jaHJvbWUucnVudGltZS5vbkluc3RhbGxlZC5hZGRMaXN0ZW5lcigoKSA9PiB7XHJcbiAgaW5pdGlhbGl6ZVN0YXRlKCk7XHJcbn0pO1xyXG5cclxuLy8gU2V0IHVwIHRhYiBsaXN0ZW5lcnNcclxuc2V0dXBUYWJMaXN0ZW5lcnMoKTtcclxuXHJcbi8vIFNldCB1cCBtZXNzYWdlIGxpc3RlbmVyc1xyXG5zZXR1cE1lc3NhZ2VMaXN0ZW5lcnMoKTsiXSwibmFtZXMiOlsiaW5pdGlhbGl6ZVN0YXRlIiwiaW5pdGlhbFN0YXRlIiwidXBkYXRlU3RhdGUiLCJrZXkiLCJ2YWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJnZXRTdGF0ZSIsImNhbGxiYWNrIiwicmVzdWx0Iiwic2V0dXBUYWJMaXN0ZW5lcnMiLCJ0YWJJZCIsImNoYW5nZUluZm8iLCJ0YWIiLCJzZXR1cE1lc3NhZ2VMaXN0ZW5lcnMiLCJtZXNzYWdlIiwic2VuZGVyIiwic2VuZFJlc3BvbnNlIiwiaGFuZGxlU3RhdGVDaGFuZ2UiLCJoYW5kbGVDb3VudFVwZGF0ZSIsInN0YXRlIiwiYWN0aW9uIiwidGFicyIsIl9hIiwiY291bnQiLCJjb3VudFZhbHVlIiwidXJsUGFyc2VyIiwidG90YWxDb3VudCIsImVycm9yIl0sIm1hcHBpbmdzIjoiQUFHTyxTQUFTQSxHQUFrQixDQUNoQyxNQUFNQyxFQUErQixDQUNuQyxVQUFXLEdBQ1gsU0FBVSxFQUNWLGVBQWdCLEVBQUEsRUFHbEIsT0FBTyxRQUFRLE1BQU0sSUFBSUEsRUFBYyxJQUFNLENBQzNDLFFBQVEsSUFBSSxvQ0FBb0MsQ0FBQSxDQUNqRCxDQUNILENBR2dCLFNBQUFDLEVBQVlDLEVBQTJCQyxFQUFZLENBQ2pFLE9B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
