import{s as _,a as g,H as y,b as n}from"./assets/index.1CxfGuLD.js";let c={};function f(){return Object.fromEntries(y.map(s=>[s,null]))}async function E(s,a,t=null){const e=t?t.url:_(s);let r=t||{url:e,method:a,headers:{},body:void 0};a==="GET"&&delete r.body;try{const o=await fetch(r.url,{method:r.method,headers:r.headers,...a!=="GET"&&{body:r.body}}),i={};o.headers.forEach((p,b)=>{i[b]=p});const h=await o.text(),d={success:!0,url:r.url,status:o.status,statusText:o.statusText,headers:i,body:g.js(h,{indent_size:2,indent_char:" ",max_preserve_newlines:2,preserve_newlines:!0,keep_array_indentation:!1,break_chained_methods:!1,brace_style:"collapse",space_before_conditional:!0,unescape_strings:!1,jslint_happy:!1,end_with_newline:!1,wrap_line_length:0,indent_inner_html:!1,comma_first:!1,e4x:!1,indent_empty_lines:!1})};return c[e]||(c[e]=f()),c[e][a]=d,d}catch(o){console.error("Error in HTTP request:",o);const i={success:!1,url:r.url,status:0,statusText:"Error",headers:{Error:o.toString()},body:"Failed to fetch"};return c[e]||(c[e]=f()),c[e][a]=i,i}}function u(){c={}}function m(){u()}async function T(s){return null}let l=!1;n.storage.local.get("autoParserEnabled").then(s=>{l=s.autoParserEnabled||!1});m();n.runtime.onMessage.addListener((s,a,t)=>{const e=s;switch(e.action){case"getAutoParserState":t({success:!0,state:l});break;case"setAutoParserState":typeof e.state=="boolean"?(l=e.state,n.storage.local.set({autoParserEnabled:l}),t({success:!0}),S()):t({success:!1,error:"Invalid state provided"});break;case"sendRequest":if(e.endpoint&&e.method)return E(e.endpoint,e.method,e.customRequest).then(r=>{t(r)}).catch(r=>{console.error("Error in handleSendRequest:",r),t({success:!1,error:r.message,url:e.customRequest?.url||e.endpoint.url,status:0,statusText:"Error",headers:{Error:r.toString()},body:"Failed to fetch"})}),!0;t({success:!1,error:"Invalid endpoint or method provided"});break;case"clearResponseCache":u(),t({success:!0});break;case"getRequestDetails":if(e.url)return T(e.url).then(r=>t({success:!0,details:r})).catch(r=>t({success:!1,error:r.message})),!0;t({success:!1,error:"URL not provided"});break;default:t({success:!1,error:"Unknown action"})}});function S(){n.tabs.query({}).then(s=>{s.forEach(a=>{a.id&&n.tabs.sendMessage(a.id,{action:"autoParserStateChanged",state:l}).catch(()=>{})})})}n.tabs.onUpdated.addListener((s,a,t)=>{a.status==="complete"&&t.url&&t.url.startsWith("http")&&n.tabs.sendMessage(s,{action:"checkContentScriptInjected"}).catch(()=>{n.tabs.executeScript(s,{file:"content-script.js"}).then(()=>{n.tabs.sendMessage(s,{action:"autoParserStateChanged",state:l})})})});n.runtime.onInstalled.addListener(s=>{(s.reason==="install"||s.reason==="update")&&u()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
