function we(i,a){for(var r=0;r<a.length;r++){const t=a[r];if(typeof t!="string"&&!Array.isArray(t)){for(const n in t)if(n!=="default"&&!(n in i)){const _=Object.getOwnPropertyDescriptor(t,n);_&&Object.defineProperty(i,n,_.get?_:{enumerable:!0,get:()=>t[n]})}}}return Object.freeze(Object.defineProperty(i,Symbol.toStringTag,{value:"Module"}))}var Ae=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function ie(i){return i&&i.__esModule&&Object.prototype.hasOwnProperty.call(i,"default")?i.default:i}var se={exports:{}},J={},ne={exports:{}},N={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var U=Symbol.for("react.element"),Oe=Symbol.for("react.portal"),Ee=Symbol.for("react.fragment"),Te=Symbol.for("react.strict_mode"),ke=Symbol.for("react.profiler"),Re=Symbol.for("react.provider"),Se=Symbol.for("react.context"),Ne=Symbol.for("react.forward_ref"),Ce=Symbol.for("react.suspense"),Le=Symbol.for("react.memo"),Pe=Symbol.for("react.lazy"),St=Symbol.iterator;function je(i){return i===null||typeof i!="object"?null:(i=St&&i[St]||i["@@iterator"],typeof i=="function"?i:null)}var re={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},ae=Object.assign,_e={};function W(i,a,r){this.props=i,this.context=a,this.refs=_e,this.updater=r||re}W.prototype.isReactComponent={};W.prototype.setState=function(i,a){if(typeof i!="object"&&typeof i!="function"&&i!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,i,a,"setState")};W.prototype.forceUpdate=function(i){this.updater.enqueueForceUpdate(this,i,"forceUpdate")};function ue(){}ue.prototype=W.prototype;function bt(i,a,r){this.props=i,this.context=a,this.refs=_e,this.updater=r||re}var yt=bt.prototype=new ue;yt.constructor=bt;ae(yt,W.prototype);yt.isPureReactComponent=!0;var Nt=Array.isArray,oe=Object.prototype.hasOwnProperty,vt={current:null},le={key:!0,ref:!0,__self:!0,__source:!0};function he(i,a,r){var t,n={},_=null,d=null;if(a!=null)for(t in a.ref!==void 0&&(d=a.ref),a.key!==void 0&&(_=""+a.key),a)oe.call(a,t)&&!le.hasOwnProperty(t)&&(n[t]=a[t]);var u=arguments.length-2;if(u===1)n.children=r;else if(1<u){for(var o=Array(u),O=0;O<u;O++)o[O]=arguments[O+2];n.children=o}if(i&&i.defaultProps)for(t in u=i.defaultProps,u)n[t]===void 0&&(n[t]=u[t]);return{$$typeof:U,type:i,key:_,ref:d,props:n,_owner:vt.current}}function De(i,a){return{$$typeof:U,type:i.type,key:a,ref:i.ref,props:i.props,_owner:i._owner}}function xt(i){return typeof i=="object"&&i!==null&&i.$$typeof===U}function Me(i){var a={"=":"=0",":":"=2"};return"$"+i.replace(/[=:]/g,function(r){return a[r]})}var Ct=/\/+/g;function et(i,a){return typeof i=="object"&&i!==null&&i.key!=null?Me(""+i.key):a.toString(36)}function H(i,a,r,t,n){var _=typeof i;(_==="undefined"||_==="boolean")&&(i=null);var d=!1;if(i===null)d=!0;else switch(_){case"string":case"number":d=!0;break;case"object":switch(i.$$typeof){case U:case Oe:d=!0}}if(d)return d=i,n=n(d),i=t===""?"."+et(d,0):t,Nt(n)?(r="",i!=null&&(r=i.replace(Ct,"$&/")+"/"),H(n,a,r,"",function(O){return O})):n!=null&&(xt(n)&&(n=De(n,r+(!n.key||d&&d.key===n.key?"":(""+n.key).replace(Ct,"$&/")+"/")+i)),a.push(n)),1;if(d=0,t=t===""?".":t+":",Nt(i))for(var u=0;u<i.length;u++){_=i[u];var o=t+et(_,u);d+=H(_,a,r,o,n)}else if(o=je(i),typeof o=="function")for(i=o.call(i),u=0;!(_=i.next()).done;)_=_.value,o=t+et(_,u++),d+=H(_,a,r,o,n);else if(_==="object")throw a=String(i),Error("Objects are not valid as a React child (found: "+(a==="[object Object]"?"object with keys {"+Object.keys(i).join(", ")+"}":a)+"). If you meant to render a collection of children, use an array instead.");return d}function z(i,a,r){if(i==null)return i;var t=[],n=0;return H(i,t,"","",function(_){return a.call(r,_,n++)}),t}function Be(i){if(i._status===-1){var a=i._result;a=a(),a.then(function(r){(i._status===0||i._status===-1)&&(i._status=1,i._result=r)},function(r){(i._status===0||i._status===-1)&&(i._status=2,i._result=r)}),i._status===-1&&(i._status=0,i._result=a)}if(i._status===1)return i._result.default;throw i._result}var D={current:null},Z={transition:null},Ie={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:Z,ReactCurrentOwner:vt};function pe(){throw Error("act(...) is not supported in production builds of React.")}N.Children={map:z,forEach:function(i,a,r){z(i,function(){a.apply(this,arguments)},r)},count:function(i){var a=0;return z(i,function(){a++}),a},toArray:function(i){return z(i,function(a){return a})||[]},only:function(i){if(!xt(i))throw Error("React.Children.only expected to receive a single React element child.");return i}};N.Component=W;N.Fragment=Ee;N.Profiler=ke;N.PureComponent=bt;N.StrictMode=Te;N.Suspense=Ce;N.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Ie;N.act=pe;N.cloneElement=function(i,a,r){if(i==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+i+".");var t=ae({},i.props),n=i.key,_=i.ref,d=i._owner;if(a!=null){if(a.ref!==void 0&&(_=a.ref,d=vt.current),a.key!==void 0&&(n=""+a.key),i.type&&i.type.defaultProps)var u=i.type.defaultProps;for(o in a)oe.call(a,o)&&!le.hasOwnProperty(o)&&(t[o]=a[o]===void 0&&u!==void 0?u[o]:a[o])}var o=arguments.length-2;if(o===1)t.children=r;else if(1<o){u=Array(o);for(var O=0;O<o;O++)u[O]=arguments[O+2];t.children=u}return{$$typeof:U,type:i.type,key:n,ref:_,props:t,_owner:d}};N.createContext=function(i){return i={$$typeof:Se,_currentValue:i,_currentValue2:i,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},i.Provider={$$typeof:Re,_context:i},i.Consumer=i};N.createElement=he;N.createFactory=function(i){var a=he.bind(null,i);return a.type=i,a};N.createRef=function(){return{current:null}};N.forwardRef=function(i){return{$$typeof:Ne,render:i}};N.isValidElement=xt;N.lazy=function(i){return{$$typeof:Pe,_payload:{_status:-1,_result:i},_init:Be}};N.memo=function(i,a){return{$$typeof:Le,type:i,compare:a===void 0?null:a}};N.startTransition=function(i){var a=Z.transition;Z.transition={};try{i()}finally{Z.transition=a}};N.unstable_act=pe;N.useCallback=function(i,a){return D.current.useCallback(i,a)};N.useContext=function(i){return D.current.useContext(i)};N.useDebugValue=function(){};N.useDeferredValue=function(i){return D.current.useDeferredValue(i)};N.useEffect=function(i,a){return D.current.useEffect(i,a)};N.useId=function(){return D.current.useId()};N.useImperativeHandle=function(i,a,r){return D.current.useImperativeHandle(i,a,r)};N.useInsertionEffect=function(i,a){return D.current.useInsertionEffect(i,a)};N.useLayoutEffect=function(i,a){return D.current.useLayoutEffect(i,a)};N.useMemo=function(i,a){return D.current.useMemo(i,a)};N.useReducer=function(i,a,r){return D.current.useReducer(i,a,r)};N.useRef=function(i){return D.current.useRef(i)};N.useState=function(i){return D.current.useState(i)};N.useSyncExternalStore=function(i,a,r){return D.current.useSyncExternalStore(i,a,r)};N.useTransition=function(){return D.current.useTransition()};N.version="18.3.1";ne.exports=N;var wt=ne.exports;const We=ie(wt),si=we({__proto__:null,default:We},[wt]);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var $e=wt,Ke=Symbol.for("react.element"),Ue=Symbol.for("react.fragment"),ze=Object.prototype.hasOwnProperty,Fe=$e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,qe={key:!0,ref:!0,__self:!0,__source:!0};function fe(i,a,r){var t,n={},_=null,d=null;r!==void 0&&(_=""+r),a.key!==void 0&&(_=""+a.key),a.ref!==void 0&&(d=a.ref);for(t in a)ze.call(a,t)&&!qe.hasOwnProperty(t)&&(n[t]=a[t]);if(i&&i.defaultProps)for(t in a=i.defaultProps,a)n[t]===void 0&&(n[t]=a[t]);return{$$typeof:Ke,type:i,key:_,ref:d,props:n,_owner:Fe.current}}J.Fragment=Ue;J.jsx=fe;J.jsxs=fe;se.exports=J;var it=se.exports,ce={exports:{}};(function(i,a){(function(r,t){t(i)})(typeof globalThis<"u"?globalThis:typeof self<"u"?self:Ae,function(r){if(!(globalThis.chrome&&globalThis.chrome.runtime&&globalThis.chrome.runtime.id))throw new Error("This script should only be loaded in a browser extension.");if(globalThis.browser&&globalThis.browser.runtime&&globalThis.browser.runtime.id)r.exports=globalThis.browser;else{const t="The message port closed before a response was received.",n=_=>{const d={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(Object.keys(d).length===0)throw new Error("api-metadata.json has not been included in browser-polyfill");class u extends WeakMap{constructor(f,l=void 0){super(l),this.createItem=f}get(f){return this.has(f)||this.set(f,this.createItem(f)),super.get(f)}}const o=h=>h&&typeof h=="object"&&typeof h.then=="function",O=(h,f)=>(...l)=>{_.runtime.lastError?h.reject(new Error(_.runtime.lastError.message)):f.singleCallbackArg||l.length<=1&&f.singleCallbackArg!==!1?h.resolve(l[0]):h.resolve(l)},y=h=>h==1?"argument":"arguments",v=(h,f)=>function(b,...e){if(e.length<f.minArgs)throw new Error(`Expected at least ${f.minArgs} ${y(f.minArgs)} for ${h}(), got ${e.length}`);if(e.length>f.maxArgs)throw new Error(`Expected at most ${f.maxArgs} ${y(f.maxArgs)} for ${h}(), got ${e.length}`);return new Promise((g,m)=>{if(f.fallbackToNoCallback)try{b[h](...e,O({resolve:g,reject:m},f))}catch(w){console.warn(`${h} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,w),b[h](...e),f.fallbackToNoCallback=!1,f.noCallback=!0,g()}else f.noCallback?(b[h](...e),g()):b[h](...e,O({resolve:g,reject:m},f))})},x=(h,f,l)=>new Proxy(f,{apply(b,e,g){return l.call(e,h,...g)}});let R=Function.call.bind(Object.prototype.hasOwnProperty);const C=(h,f={},l={})=>{let b=Object.create(null),e={has(m,w){return w in h||w in b},get(m,w,E){if(w in b)return b[w];if(!(w in h))return;let S=h[w];if(typeof S=="function")if(typeof f[w]=="function")S=x(h,h[w],f[w]);else if(R(l,w)){let P=v(w,l[w]);S=x(h,h[w],P)}else S=S.bind(h);else if(typeof S=="object"&&S!==null&&(R(f,w)||R(l,w)))S=C(S,f[w],l[w]);else if(R(l,"*"))S=C(S,f[w],l["*"]);else return Object.defineProperty(b,w,{configurable:!0,enumerable:!0,get(){return h[w]},set(P){h[w]=P}}),S;return b[w]=S,S},set(m,w,E,S){return w in b?b[w]=E:h[w]=E,!0},defineProperty(m,w,E){return Reflect.defineProperty(b,w,E)},deleteProperty(m,w){return Reflect.deleteProperty(b,w)}},g=Object.create(h);return new Proxy(g,e)},L=h=>({addListener(f,l,...b){f.addListener(h.get(l),...b)},hasListener(f,l){return f.hasListener(h.get(l))},removeListener(f,l){f.removeListener(h.get(l))}}),p=new u(h=>typeof h!="function"?h:function(l){const b=C(l,{},{getContent:{minArgs:0,maxArgs:0}});h(b)}),s=new u(h=>typeof h!="function"?h:function(l,b,e){let g=!1,m,w=new Promise(M=>{m=function(j){g=!0,M(j)}}),E;try{E=h(l,b,m)}catch(M){E=Promise.reject(M)}const S=E!==!0&&o(E);if(E!==!0&&!S&&!g)return!1;const P=M=>{M.then(j=>{e(j)},j=>{let B;j&&(j instanceof Error||typeof j.message=="string")?B=j.message:B="An unexpected error occurred",e({__mozWebExtensionPolyfillReject__:!0,message:B})}).catch(j=>{console.error("Failed to send onMessage rejected reply",j)})};return P(S?E:w),!0}),c=({reject:h,resolve:f},l)=>{_.runtime.lastError?_.runtime.lastError.message===t?f():h(new Error(_.runtime.lastError.message)):l&&l.__mozWebExtensionPolyfillReject__?h(new Error(l.message)):f(l)},k=(h,f,l,...b)=>{if(b.length<f.minArgs)throw new Error(`Expected at least ${f.minArgs} ${y(f.minArgs)} for ${h}(), got ${b.length}`);if(b.length>f.maxArgs)throw new Error(`Expected at most ${f.maxArgs} ${y(f.maxArgs)} for ${h}(), got ${b.length}`);return new Promise((e,g)=>{const m=c.bind(null,{resolve:e,reject:g});b.push(m),l.sendMessage(...b)})},A={devtools:{network:{onRequestFinished:L(p)}},runtime:{onMessage:L(s),onMessageExternal:L(s),sendMessage:k.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:k.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},T={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return d.privacy={network:{"*":T},services:{"*":T},websites:{"*":T}},C(_,A,d)};r.exports=n(chrome)}})})(ce);var Ve=ce.exports;const Xe=ie(Ve);function ni(i){const a=i.webpage.replace(/\/$/,"").split("#")[0];return i.url&&(i.url.startsWith("http://")||i.url.startsWith("https://"))?i.url:i.url.startsWith("/")?a+i.url:a+"/"+i.url}function ri(){Xe.storage.local.set({"URL-PARSER":{}}).then(()=>{console.log("Cleared endpoints")}).catch(i=>{console.error("Failed to clear endpoints:",i)})}function ai(i,a){if(!a)return[it.jsx("span",{children:i},0)];const r=a.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");return i.split(new RegExp(`(${r})`,"gi")).map((n,_)=>n.toLowerCase()===a.toLowerCase()?it.jsx("span",{className:"text-red-500 font-semibold",children:n},_):it.jsx("span",{children:n},_))}async function _i(i,a={},r=5e3){const t=new AbortController,n=setTimeout(()=>t.abort(),r);try{const _=await fetch(i,{...a,signal:t.signal});return clearTimeout(n),_}catch(_){throw clearTimeout(n),_}}const ui=100,oi=["GET","POST","PUT","OPTIONS"],li=5e3,hi={generateReport:"generateReport",viewCode:"viewCode",seeResponse:"seeResponse"},pi={BUTTON:"px-4 py-2 bg-black text-white rounded hover:bg-blue-600",INPUT:"px-2 border-2 border-gray-300 bg-transparent text-lg w-full pb-3 pt-3 rounded-md cursor-pointer text-gray-300 hover:border-gray-500 outline-none focus:border-gray-500 transition-all duration-400",MODAL_OVERLAY:"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50",MODAL_CONTENT:"bg-[#363333] opacity-85 p-5 rounded-lg shadow-lg"};var de={exports:{}},$={},F={exports:{}},st={},nt={},Lt;function At(){if(Lt)return nt;Lt=1;function i(t){this.__parent=t,this.__character_count=0,this.__indent_count=-1,this.__alignment_count=0,this.__wrap_point_index=0,this.__wrap_point_character_count=0,this.__wrap_point_indent_count=-1,this.__wrap_point_alignment_count=0,this.__items=[]}i.prototype.clone_empty=function(){var t=new i(this.__parent);return t.set_indent(this.__indent_count,this.__alignment_count),t},i.prototype.item=function(t){return t<0?this.__items[this.__items.length+t]:this.__items[t]},i.prototype.has_match=function(t){for(var n=this.__items.length-1;n>=0;n--)if(this.__items[n].match(t))return!0;return!1},i.prototype.set_indent=function(t,n){this.is_empty()&&(this.__indent_count=t||0,this.__alignment_count=n||0,this.__character_count=this.__parent.get_indent_size(this.__indent_count,this.__alignment_count))},i.prototype._set_wrap_point=function(){this.__parent.wrap_line_length&&(this.__wrap_point_index=this.__items.length,this.__wrap_point_character_count=this.__character_count,this.__wrap_point_indent_count=this.__parent.next_line.__indent_count,this.__wrap_point_alignment_count=this.__parent.next_line.__alignment_count)},i.prototype._should_wrap=function(){return this.__wrap_point_index&&this.__character_count>this.__parent.wrap_line_length&&this.__wrap_point_character_count>this.__parent.next_line.__character_count},i.prototype._allow_wrap=function(){if(this._should_wrap()){this.__parent.add_new_line();var t=this.__parent.current_line;return t.set_indent(this.__wrap_point_indent_count,this.__wrap_point_alignment_count),t.__items=this.__items.slice(this.__wrap_point_index),this.__items=this.__items.slice(0,this.__wrap_point_index),t.__character_count+=this.__character_count-this.__wrap_point_character_count,this.__character_count=this.__wrap_point_character_count,t.__items[0]===" "&&(t.__items.splice(0,1),t.__character_count-=1),!0}return!1},i.prototype.is_empty=function(){return this.__items.length===0},i.prototype.last=function(){return this.is_empty()?null:this.__items[this.__items.length-1]},i.prototype.push=function(t){this.__items.push(t);var n=t.lastIndexOf(`
`);n!==-1?this.__character_count=t.length-n:this.__character_count+=t.length},i.prototype.pop=function(){var t=null;return this.is_empty()||(t=this.__items.pop(),this.__character_count-=t.length),t},i.prototype._remove_indent=function(){this.__indent_count>0&&(this.__indent_count-=1,this.__character_count-=this.__parent.indent_size)},i.prototype._remove_wrap_indent=function(){this.__wrap_point_indent_count>0&&(this.__wrap_point_indent_count-=1)},i.prototype.trim=function(){for(;this.last()===" ";)this.__items.pop(),this.__character_count-=1},i.prototype.toString=function(){var t="";return this.is_empty()?this.__parent.indent_empty_lines&&(t=this.__parent.get_indent_string(this.__indent_count)):(t=this.__parent.get_indent_string(this.__indent_count,this.__alignment_count),t+=this.__items.join("")),t};function a(t,n){this.__cache=[""],this.__indent_size=t.indent_size,this.__indent_string=t.indent_char,t.indent_with_tabs||(this.__indent_string=new Array(t.indent_size+1).join(t.indent_char)),n=n||"",t.indent_level>0&&(n=new Array(t.indent_level+1).join(this.__indent_string)),this.__base_string=n,this.__base_string_length=n.length}a.prototype.get_indent_size=function(t,n){var _=this.__base_string_length;return n=n||0,t<0&&(_=0),_+=t*this.__indent_size,_+=n,_},a.prototype.get_indent_string=function(t,n){var _=this.__base_string;return n=n||0,t<0&&(t=0,_=""),n+=t*this.__indent_size,this.__ensure_cache(n),_+=this.__cache[n],_},a.prototype.__ensure_cache=function(t){for(;t>=this.__cache.length;)this.__add_column()},a.prototype.__add_column=function(){var t=this.__cache.length,n=0,_="";this.__indent_size&&t>=this.__indent_size&&(n=Math.floor(t/this.__indent_size),t-=n*this.__indent_size,_=new Array(n+1).join(this.__indent_string)),t&&(_+=new Array(t+1).join(" ")),this.__cache.push(_)};function r(t,n){this.__indent_cache=new a(t,n),this.raw=!1,this._end_with_newline=t.end_with_newline,this.indent_size=t.indent_size,this.wrap_line_length=t.wrap_line_length,this.indent_empty_lines=t.indent_empty_lines,this.__lines=[],this.previous_line=null,this.current_line=null,this.next_line=new i(this),this.space_before_token=!1,this.non_breaking_space=!1,this.previous_token_wrapped=!1,this.__add_outputline()}return r.prototype.__add_outputline=function(){this.previous_line=this.current_line,this.current_line=this.next_line.clone_empty(),this.__lines.push(this.current_line)},r.prototype.get_line_number=function(){return this.__lines.length},r.prototype.get_indent_string=function(t,n){return this.__indent_cache.get_indent_string(t,n)},r.prototype.get_indent_size=function(t,n){return this.__indent_cache.get_indent_size(t,n)},r.prototype.is_empty=function(){return!this.previous_line&&this.current_line.is_empty()},r.prototype.add_new_line=function(t){return this.is_empty()||!t&&this.just_added_newline()?!1:(this.raw||this.__add_outputline(),!0)},r.prototype.get_code=function(t){this.trim(!0);var n=this.current_line.pop();n&&(n[n.length-1]===`
`&&(n=n.replace(/\n+$/g,"")),this.current_line.push(n)),this._end_with_newline&&this.__add_outputline();var _=this.__lines.join(`
`);return t!==`
`&&(_=_.replace(/[\n]/g,t)),_},r.prototype.set_wrap_point=function(){this.current_line._set_wrap_point()},r.prototype.set_indent=function(t,n){return t=t||0,n=n||0,this.next_line.set_indent(t,n),this.__lines.length>1?(this.current_line.set_indent(t,n),!0):(this.current_line.set_indent(),!1)},r.prototype.add_raw_token=function(t){for(var n=0;n<t.newlines;n++)this.__add_outputline();this.current_line.set_indent(-1),this.current_line.push(t.whitespace_before),this.current_line.push(t.text),this.space_before_token=!1,this.non_breaking_space=!1,this.previous_token_wrapped=!1},r.prototype.add_token=function(t){this.__add_space_before_token(),this.current_line.push(t),this.space_before_token=!1,this.non_breaking_space=!1,this.previous_token_wrapped=this.current_line._allow_wrap()},r.prototype.__add_space_before_token=function(){this.space_before_token&&!this.just_added_newline()&&(this.non_breaking_space||this.set_wrap_point(),this.current_line.push(" "))},r.prototype.remove_indent=function(t){for(var n=this.__lines.length;t<n;)this.__lines[t]._remove_indent(),t++;this.current_line._remove_wrap_indent()},r.prototype.trim=function(t){for(t=t===void 0?!1:t,this.current_line.trim();t&&this.__lines.length>1&&this.current_line.is_empty();)this.__lines.pop(),this.current_line=this.__lines[this.__lines.length-1],this.current_line.trim();this.previous_line=this.__lines.length>1?this.__lines[this.__lines.length-2]:null},r.prototype.just_added_newline=function(){return this.current_line.is_empty()},r.prototype.just_added_blankline=function(){return this.is_empty()||this.current_line.is_empty()&&this.previous_line.is_empty()},r.prototype.ensure_empty_line_above=function(t,n){for(var _=this.__lines.length-2;_>=0;){var d=this.__lines[_];if(d.is_empty())break;if(d.item(0).indexOf(t)!==0&&d.item(-1)!==n){this.__lines.splice(_+1,0,new i(this)),this.previous_line=this.__lines[this.__lines.length-2];break}_--}},nt.Output=r,nt}var rt={},Pt;function ge(){if(Pt)return rt;Pt=1;function i(a,r,t,n){this.type=a,this.text=r,this.comments_before=null,this.newlines=t||0,this.whitespace_before=n||"",this.parent=null,this.next=null,this.previous=null,this.opened=null,this.closed=null,this.directives=null}return rt.Token=i,rt}var at={},jt;function me(){return jt||(jt=1,function(i){var a="\\x23\\x24\\x40\\x41-\\x5a\\x5f\\x61-\\x7a",r="\\x24\\x30-\\x39\\x41-\\x5a\\x5f\\x61-\\x7a",t="\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc",n="\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f",_="\\\\u[0-9a-fA-F]{4}|\\\\u\\{[0-9a-fA-F]+\\}",d="(?:"+_+"|["+a+t+"])",u="(?:"+_+"|["+r+t+n+"])*";i.identifier=new RegExp(d+u,"g"),i.identifierStart=new RegExp(d),i.identifierMatch=new RegExp("(?:"+_+"|["+r+t+n+"])+"),i.newline=/[\n\r\u2028\u2029]/,i.lineBreak=new RegExp(`\r
|`+i.newline.source),i.allLineBreaks=new RegExp(i.lineBreak.source,"g")}(at)),at}var _t={},K={},Dt;function Ot(){if(Dt)return K;Dt=1;function i(t,n){this.raw_options=a(t,n),this.disabled=this._get_boolean("disabled"),this.eol=this._get_characters("eol","auto"),this.end_with_newline=this._get_boolean("end_with_newline"),this.indent_size=this._get_number("indent_size",4),this.indent_char=this._get_characters("indent_char"," "),this.indent_level=this._get_number("indent_level"),this.preserve_newlines=this._get_boolean("preserve_newlines",!0),this.max_preserve_newlines=this._get_number("max_preserve_newlines",32786),this.preserve_newlines||(this.max_preserve_newlines=0),this.indent_with_tabs=this._get_boolean("indent_with_tabs",this.indent_char==="	"),this.indent_with_tabs&&(this.indent_char="	",this.indent_size===1&&(this.indent_size=4)),this.wrap_line_length=this._get_number("wrap_line_length",this._get_number("max_char")),this.indent_empty_lines=this._get_boolean("indent_empty_lines"),this.templating=this._get_selection_list("templating",["auto","none","angular","django","erb","handlebars","php","smarty"],["auto"])}i.prototype._get_array=function(t,n){var _=this.raw_options[t],d=n||[];return typeof _=="object"?_!==null&&typeof _.concat=="function"&&(d=_.concat()):typeof _=="string"&&(d=_.split(/[^a-zA-Z0-9_\/\-]+/)),d},i.prototype._get_boolean=function(t,n){var _=this.raw_options[t],d=_===void 0?!!n:!!_;return d},i.prototype._get_characters=function(t,n){var _=this.raw_options[t],d=n||"";return typeof _=="string"&&(d=_.replace(/\\r/,"\r").replace(/\\n/,`
`).replace(/\\t/,"	")),d},i.prototype._get_number=function(t,n){var _=this.raw_options[t];n=parseInt(n,10),isNaN(n)&&(n=0);var d=parseInt(_,10);return isNaN(d)&&(d=n),d},i.prototype._get_selection=function(t,n,_){var d=this._get_selection_list(t,n,_);if(d.length!==1)throw new Error("Invalid Option Value: The option '"+t+`' can only be one of the following values:
`+n+`
You passed in: '`+this.raw_options[t]+"'");return d[0]},i.prototype._get_selection_list=function(t,n,_){if(!n||n.length===0)throw new Error("Selection list cannot be empty.");if(_=_||[n[0]],!this._is_valid_selection(_,n))throw new Error("Invalid Default Value!");var d=this._get_array(t,_);if(!this._is_valid_selection(d,n))throw new Error("Invalid Option Value: The option '"+t+`' can contain only the following values:
`+n+`
You passed in: '`+this.raw_options[t]+"'");return d},i.prototype._is_valid_selection=function(t,n){return t.length&&n.length&&!t.some(function(_){return n.indexOf(_)===-1})};function a(t,n){var _={};t=r(t);var d;for(d in t)d!==n&&(_[d]=t[d]);if(n&&t[n])for(d in t[n])_[d]=t[n][d];return _}function r(t){var n={},_;for(_ in t){var d=_.replace(/-/g,"_");n[d]=t[_]}return n}return K.Options=i,K.normalizeOpts=r,K.mergeOpts=a,K}var Mt;function be(){if(Mt)return _t;Mt=1;var i=Ot().Options,a=["before-newline","after-newline","preserve-newline"];function r(t){i.call(this,t,"js");var n=this.raw_options.brace_style||null;n==="expand-strict"?this.raw_options.brace_style="expand":n==="collapse-preserve-inline"?this.raw_options.brace_style="collapse,preserve-inline":this.raw_options.braces_on_own_line!==void 0&&(this.raw_options.brace_style=this.raw_options.braces_on_own_line?"expand":"collapse");var _=this._get_selection_list("brace_style",["collapse","expand","end-expand","none","preserve-inline"]);this.brace_preserve_inline=!1,this.brace_style="collapse";for(var d=0;d<_.length;d++)_[d]==="preserve-inline"?this.brace_preserve_inline=!0:this.brace_style=_[d];this.unindent_chained_methods=this._get_boolean("unindent_chained_methods"),this.break_chained_methods=this._get_boolean("break_chained_methods"),this.space_in_paren=this._get_boolean("space_in_paren"),this.space_in_empty_paren=this._get_boolean("space_in_empty_paren"),this.jslint_happy=this._get_boolean("jslint_happy"),this.space_after_anon_function=this._get_boolean("space_after_anon_function"),this.space_after_named_function=this._get_boolean("space_after_named_function"),this.keep_array_indentation=this._get_boolean("keep_array_indentation"),this.space_before_conditional=this._get_boolean("space_before_conditional",!0),this.unescape_strings=this._get_boolean("unescape_strings"),this.e4x=this._get_boolean("e4x"),this.comma_first=this._get_boolean("comma_first"),this.operator_position=this._get_selection("operator_position",a),this.test_output_raw=this._get_boolean("test_output_raw"),this.jslint_happy&&(this.space_after_anon_function=!0)}return r.prototype=new i,_t.Options=r,_t}var I={},ut={},Bt;function Et(){if(Bt)return ut;Bt=1;var i=RegExp.prototype.hasOwnProperty("sticky");function a(r){this.__input=r||"",this.__input_length=this.__input.length,this.__position=0}return a.prototype.restart=function(){this.__position=0},a.prototype.back=function(){this.__position>0&&(this.__position-=1)},a.prototype.hasNext=function(){return this.__position<this.__input_length},a.prototype.next=function(){var r=null;return this.hasNext()&&(r=this.__input.charAt(this.__position),this.__position+=1),r},a.prototype.peek=function(r){var t=null;return r=r||0,r+=this.__position,r>=0&&r<this.__input_length&&(t=this.__input.charAt(r)),t},a.prototype.__match=function(r,t){r.lastIndex=t;var n=r.exec(this.__input);return n&&!(i&&r.sticky)&&n.index!==t&&(n=null),n},a.prototype.test=function(r,t){return t=t||0,t+=this.__position,t>=0&&t<this.__input_length?!!this.__match(r,t):!1},a.prototype.testChar=function(r,t){var n=this.peek(t);return r.lastIndex=0,n!==null&&r.test(n)},a.prototype.match=function(r){var t=this.__match(r,this.__position);return t?this.__position+=t[0].length:t=null,t},a.prototype.read=function(r,t,n){var _="",d;return r&&(d=this.match(r),d&&(_+=d[0])),t&&(d||!r)&&(_+=this.readUntil(t,n)),_},a.prototype.readUntil=function(r,t){var n="",_=this.__position;r.lastIndex=this.__position;var d=r.exec(this.__input);return d?(_=d.index,t&&(_+=d[0].length)):_=this.__input_length,n=this.__input.substring(this.__position,_),this.__position=_,n},a.prototype.readUntilAfter=function(r){return this.readUntil(r,!0)},a.prototype.get_regexp=function(r,t){var n=null,_="g";return t&&i&&(_="y"),typeof r=="string"&&r!==""?n=new RegExp(r,_):r&&(n=new RegExp(r.source,_)),n},a.prototype.get_literal_regexp=function(r){return RegExp(r.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"))},a.prototype.peekUntilAfter=function(r){var t=this.__position,n=this.readUntilAfter(r);return this.__position=t,n},a.prototype.lookBack=function(r){var t=this.__position-1;return t>=r.length&&this.__input.substring(t-r.length,t).toLowerCase()===r},ut.InputScanner=a,ut}var q={},ot={},It;function Ge(){if(It)return ot;It=1;function i(a){this.__tokens=[],this.__tokens_length=this.__tokens.length,this.__position=0,this.__parent_token=a}return i.prototype.restart=function(){this.__position=0},i.prototype.isEmpty=function(){return this.__tokens_length===0},i.prototype.hasNext=function(){return this.__position<this.__tokens_length},i.prototype.next=function(){var a=null;return this.hasNext()&&(a=this.__tokens[this.__position],this.__position+=1),a},i.prototype.peek=function(a){var r=null;return a=a||0,a+=this.__position,a>=0&&a<this.__tokens_length&&(r=this.__tokens[a]),r},i.prototype.add=function(a){this.__parent_token&&(a.parent=this.__parent_token),this.__tokens.push(a),this.__tokens_length+=1},ot.TokenStream=i,ot}var lt={},ht={},Wt;function tt(){if(Wt)return ht;Wt=1;function i(a,r){this._input=a,this._starting_pattern=null,this._match_pattern=null,this._until_pattern=null,this._until_after=!1,r&&(this._starting_pattern=this._input.get_regexp(r._starting_pattern,!0),this._match_pattern=this._input.get_regexp(r._match_pattern,!0),this._until_pattern=this._input.get_regexp(r._until_pattern),this._until_after=r._until_after)}return i.prototype.read=function(){var a=this._input.read(this._starting_pattern);return(!this._starting_pattern||a)&&(a+=this._input.read(this._match_pattern,this._until_pattern,this._until_after)),a},i.prototype.read_match=function(){return this._input.match(this._match_pattern)},i.prototype.until_after=function(a){var r=this._create();return r._until_after=!0,r._until_pattern=this._input.get_regexp(a),r._update(),r},i.prototype.until=function(a){var r=this._create();return r._until_after=!1,r._until_pattern=this._input.get_regexp(a),r._update(),r},i.prototype.starting_with=function(a){var r=this._create();return r._starting_pattern=this._input.get_regexp(a,!0),r._update(),r},i.prototype.matching=function(a){var r=this._create();return r._match_pattern=this._input.get_regexp(a,!0),r._update(),r},i.prototype._create=function(){return new i(this._input,this)},i.prototype._update=function(){},ht.Pattern=i,ht}var $t;function Qe(){if($t)return lt;$t=1;var i=tt().Pattern;function a(r,t){i.call(this,r,t),t?this._line_regexp=this._input.get_regexp(t._line_regexp):this.__set_whitespace_patterns("",""),this.newline_count=0,this.whitespace_before_token=""}return a.prototype=new i,a.prototype.__set_whitespace_patterns=function(r,t){r+="\\t ",t+="\\n\\r",this._match_pattern=this._input.get_regexp("["+r+t+"]+",!0),this._newline_regexp=this._input.get_regexp("\\r\\n|["+t+"]")},a.prototype.read=function(){this.newline_count=0,this.whitespace_before_token="";var r=this._input.read(this._match_pattern);if(r===" ")this.whitespace_before_token=" ";else if(r){var t=this.__split(this._newline_regexp,r);this.newline_count=t.length-1,this.whitespace_before_token=t[this.newline_count]}return r},a.prototype.matching=function(r,t){var n=this._create();return n.__set_whitespace_patterns(r,t),n._update(),n},a.prototype._create=function(){return new a(this._input,this)},a.prototype.__split=function(r,t){r.lastIndex=0;for(var n=0,_=[],d=r.exec(t);d;)_.push(t.substring(n,d.index)),n=d.index+d[0].length,d=r.exec(t);return n<t.length?_.push(t.substring(n,t.length)):_.push(""),_},lt.WhitespacePattern=a,lt}var Kt;function Y(){if(Kt)return q;Kt=1;var i=Et().InputScanner,a=ge().Token,r=Ge().TokenStream,t=Qe().WhitespacePattern,n={START:"TK_START",RAW:"TK_RAW",EOF:"TK_EOF"},_=function(d,u){this._input=new i(d),this._options=u||{},this.__tokens=null,this._patterns={},this._patterns.whitespace=new t(this._input)};return _.prototype.tokenize=function(){this._input.restart(),this.__tokens=new r,this._reset();for(var d,u=new a(n.START,""),o=null,O=[],y=new r;u.type!==n.EOF;){for(d=this._get_next_token(u,o);this._is_comment(d);)y.add(d),d=this._get_next_token(u,o);y.isEmpty()||(d.comments_before=y,y=new r),d.parent=o,this._is_opening(d)?(O.push(o),o=d):o&&this._is_closing(d,o)&&(d.opened=o,o.closed=d,o=O.pop(),d.parent=o),d.previous=u,u.next=d,this.__tokens.add(d),u=d}return this.__tokens},_.prototype._is_first_token=function(){return this.__tokens.isEmpty()},_.prototype._reset=function(){},_.prototype._get_next_token=function(d,u){this._readWhitespace();var o=this._input.read(/.+/g);return o?this._create_token(n.RAW,o):this._create_token(n.EOF,"")},_.prototype._is_comment=function(d){return!1},_.prototype._is_opening=function(d){return!1},_.prototype._is_closing=function(d,u){return!1},_.prototype._create_token=function(d,u){var o=new a(d,u,this._patterns.whitespace.newline_count,this._patterns.whitespace.whitespace_before_token);return o},_.prototype._readWhitespace=function(){return this._patterns.whitespace.read()},q.Tokenizer=_,q.TOKEN=n,q}var pt={},Ut;function Tt(){if(Ut)return pt;Ut=1;function i(a,r){a=typeof a=="string"?a:a.source,r=typeof r=="string"?r:r.source,this.__directives_block_pattern=new RegExp(a+/ beautify( \w+[:]\w+)+ /.source+r,"g"),this.__directive_pattern=/ (\w+)[:](\w+)/g,this.__directives_end_ignore_pattern=new RegExp(a+/\sbeautify\signore:end\s/.source+r,"g")}return i.prototype.get_directives=function(a){if(!a.match(this.__directives_block_pattern))return null;var r={};this.__directive_pattern.lastIndex=0;for(var t=this.__directive_pattern.exec(a);t;)r[t[1]]=t[2],t=this.__directive_pattern.exec(a);return r},i.prototype.readIgnored=function(a){return a.readUntilAfter(this.__directives_end_ignore_pattern)},pt.Directives=i,pt}var ft={},zt;function ye(){if(zt)return ft;zt=1;var i=tt().Pattern,a={django:!1,erb:!1,handlebars:!1,php:!1,smarty:!1,angular:!1};function r(t,n){i.call(this,t,n),this.__template_pattern=null,this._disabled=Object.assign({},a),this._excluded=Object.assign({},a),n&&(this.__template_pattern=this._input.get_regexp(n.__template_pattern),this._excluded=Object.assign(this._excluded,n._excluded),this._disabled=Object.assign(this._disabled,n._disabled));var _=new i(t);this.__patterns={handlebars_comment:_.starting_with(/{{!--/).until_after(/--}}/),handlebars_unescaped:_.starting_with(/{{{/).until_after(/}}}/),handlebars:_.starting_with(/{{/).until_after(/}}/),php:_.starting_with(/<\?(?:[= ]|php)/).until_after(/\?>/),erb:_.starting_with(/<%[^%]/).until_after(/[^%]%>/),django:_.starting_with(/{%/).until_after(/%}/),django_value:_.starting_with(/{{/).until_after(/}}/),django_comment:_.starting_with(/{#/).until_after(/#}/),smarty:_.starting_with(/{(?=[^}{\s\n])/).until_after(/[^\s\n]}/),smarty_comment:_.starting_with(/{\*/).until_after(/\*}/),smarty_literal:_.starting_with(/{literal}/).until_after(/{\/literal}/)}}return r.prototype=new i,r.prototype._create=function(){return new r(this._input,this)},r.prototype._update=function(){this.__set_templated_pattern()},r.prototype.disable=function(t){var n=this._create();return n._disabled[t]=!0,n._update(),n},r.prototype.read_options=function(t){var n=this._create();for(var _ in a)n._disabled[_]=t.templating.indexOf(_)===-1;return n._update(),n},r.prototype.exclude=function(t){var n=this._create();return n._excluded[t]=!0,n._update(),n},r.prototype.read=function(){var t="";this._match_pattern?t=this._input.read(this._starting_pattern):t=this._input.read(this._starting_pattern,this.__template_pattern);for(var n=this._read_template();n;)this._match_pattern?n+=this._input.read(this._match_pattern):n+=this._input.readUntil(this.__template_pattern),t+=n,n=this._read_template();return this._until_after&&(t+=this._input.readUntilAfter(this._until_pattern)),t},r.prototype.__set_templated_pattern=function(){var t=[];this._disabled.php||t.push(this.__patterns.php._starting_pattern.source),this._disabled.handlebars||t.push(this.__patterns.handlebars._starting_pattern.source),this._disabled.erb||t.push(this.__patterns.erb._starting_pattern.source),this._disabled.django||(t.push(this.__patterns.django._starting_pattern.source),t.push(this.__patterns.django_value._starting_pattern.source),t.push(this.__patterns.django_comment._starting_pattern.source)),this._disabled.smarty||t.push(this.__patterns.smarty._starting_pattern.source),this._until_pattern&&t.push(this._until_pattern.source),this.__template_pattern=this._input.get_regexp("(?:"+t.join("|")+")")},r.prototype._read_template=function(){var t="",n=this._input.peek();if(n==="<"){var _=this._input.peek(1);!this._disabled.php&&!this._excluded.php&&_==="?"&&(t=t||this.__patterns.php.read()),!this._disabled.erb&&!this._excluded.erb&&_==="%"&&(t=t||this.__patterns.erb.read())}else n==="{"&&(!this._disabled.handlebars&&!this._excluded.handlebars&&(t=t||this.__patterns.handlebars_comment.read(),t=t||this.__patterns.handlebars_unescaped.read(),t=t||this.__patterns.handlebars.read()),this._disabled.django||(!this._excluded.django&&!this._excluded.handlebars&&(t=t||this.__patterns.django_value.read()),this._excluded.django||(t=t||this.__patterns.django_comment.read(),t=t||this.__patterns.django.read())),this._disabled.smarty||this._disabled.django&&this._disabled.handlebars&&(t=t||this.__patterns.smarty_comment.read(),t=t||this.__patterns.smarty_literal.read(),t=t||this.__patterns.smarty.read()));return t},ft.TemplatablePattern=r,ft}var Ft;function V(){if(Ft)return I;Ft=1;var i=Et().InputScanner,a=Y().Tokenizer,r=Y().TOKEN,t=Tt().Directives,n=me(),_=tt().Pattern,d=ye().TemplatablePattern;function u(h,f){return f.indexOf(h)!==-1}var o={START_EXPR:"TK_START_EXPR",END_EXPR:"TK_END_EXPR",START_BLOCK:"TK_START_BLOCK",END_BLOCK:"TK_END_BLOCK",WORD:"TK_WORD",RESERVED:"TK_RESERVED",SEMICOLON:"TK_SEMICOLON",STRING:"TK_STRING",EQUALS:"TK_EQUALS",OPERATOR:"TK_OPERATOR",COMMA:"TK_COMMA",BLOCK_COMMENT:"TK_BLOCK_COMMENT",COMMENT:"TK_COMMENT",DOT:"TK_DOT",UNKNOWN:"TK_UNKNOWN",START:r.START,RAW:r.RAW,EOF:r.EOF},O=new t(/\/\*/,/\*\//),y=/0[xX][0123456789abcdefABCDEF_]*n?|0[oO][01234567_]*n?|0[bB][01_]*n?|\d[\d_]*n|(?:\.\d[\d_]*|\d[\d_]*\.?[\d_]*)(?:[eE][+-]?[\d_]+)?/,v=/[0-9]/,x=/[^\d\.]/,R=">>> === !== &&= ??= ||= << && >= ** != == <= >> || ?? |> < / - + > : & % ? ^ | *".split(" "),C=">>>= ... >>= <<= === >>> !== **= &&= ??= ||= => ^= :: /= << <= == && -= >= >> != -- += ** || ?? ++ %= &= *= |= |> = ! ? > < : / ^ - + * & % ~ |";C=C.replace(/[-[\]{}()*+?.,\\^$|#]/g,"\\$&"),C="\\?\\.(?!\\d) "+C,C=C.replace(/ /g,"|");var L=new RegExp(C),p="continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export".split(","),s=p.concat(["do","in","of","else","get","set","new","catch","finally","typeof","yield","async","await","from","as","class","extends"]),c=new RegExp("^(?:"+s.join("|")+")$"),k,A=function(h,f){a.call(this,h,f),this._patterns.whitespace=this._patterns.whitespace.matching(/\u00A0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff/.source,/\u2028\u2029/.source);var l=new _(this._input),b=new d(this._input).read_options(this._options);this.__patterns={template:b,identifier:b.starting_with(n.identifier).matching(n.identifierMatch),number:l.matching(y),punct:l.matching(L),comment:l.starting_with(/\/\//).until(/[\n\r\u2028\u2029]/),block_comment:l.starting_with(/\/\*/).until_after(/\*\//),html_comment_start:l.matching(/<!--/),html_comment_end:l.matching(/-->/),include:l.starting_with(/#include/).until_after(n.lineBreak),shebang:l.starting_with(/#!/).until_after(n.lineBreak),xml:l.matching(/[\s\S]*?<(\/?)([-a-zA-Z:0-9_.]+|{[^}]+?}|!\[CDATA\[[^\]]*?\]\]|)(\s*{[^}]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{([^{}]|{[^}]+?})+?}))*\s*(\/?)\s*>/),single_quote:b.until(/['\\\n\r\u2028\u2029]/),double_quote:b.until(/["\\\n\r\u2028\u2029]/),template_text:b.until(/[`\\$]/),template_expression:b.until(/[`}\\]/)}};A.prototype=new a,A.prototype._is_comment=function(h){return h.type===o.COMMENT||h.type===o.BLOCK_COMMENT||h.type===o.UNKNOWN},A.prototype._is_opening=function(h){return h.type===o.START_BLOCK||h.type===o.START_EXPR},A.prototype._is_closing=function(h,f){return(h.type===o.END_BLOCK||h.type===o.END_EXPR)&&f&&(h.text==="]"&&f.text==="["||h.text===")"&&f.text==="("||h.text==="}"&&f.text==="{")},A.prototype._reset=function(){k=!1},A.prototype._get_next_token=function(h,f){var l=null;this._readWhitespace();var b=this._input.peek();return b===null?this._create_token(o.EOF,""):(l=l||this._read_non_javascript(b),l=l||this._read_string(b),l=l||this._read_pair(b,this._input.peek(1)),l=l||this._read_word(h),l=l||this._read_singles(b),l=l||this._read_comment(b),l=l||this._read_regexp(b,h),l=l||this._read_xml(b,h),l=l||this._read_punctuation(),l=l||this._create_token(o.UNKNOWN,this._input.next()),l)},A.prototype._read_word=function(h){var f;if(f=this.__patterns.identifier.read(),f!=="")return f=f.replace(n.allLineBreaks,`
`),!(h.type===o.DOT||h.type===o.RESERVED&&(h.text==="set"||h.text==="get"))&&c.test(f)?(f==="in"||f==="of")&&(h.type===o.WORD||h.type===o.STRING)?this._create_token(o.OPERATOR,f):this._create_token(o.RESERVED,f):this._create_token(o.WORD,f);if(f=this.__patterns.number.read(),f!=="")return this._create_token(o.WORD,f)},A.prototype._read_singles=function(h){var f=null;return h==="("||h==="["?f=this._create_token(o.START_EXPR,h):h===")"||h==="]"?f=this._create_token(o.END_EXPR,h):h==="{"?f=this._create_token(o.START_BLOCK,h):h==="}"?f=this._create_token(o.END_BLOCK,h):h===";"?f=this._create_token(o.SEMICOLON,h):h==="."&&x.test(this._input.peek(1))?f=this._create_token(o.DOT,h):h===","&&(f=this._create_token(o.COMMA,h)),f&&this._input.next(),f},A.prototype._read_pair=function(h,f){var l=null;return h==="#"&&f==="{"&&(l=this._create_token(o.START_BLOCK,h+f)),l&&(this._input.next(),this._input.next()),l},A.prototype._read_punctuation=function(){var h=this.__patterns.punct.read();if(h!=="")return h==="="?this._create_token(o.EQUALS,h):h==="?."?this._create_token(o.DOT,h):this._create_token(o.OPERATOR,h)},A.prototype._read_non_javascript=function(h){var f="";if(h==="#"){if(this._is_first_token()&&(f=this.__patterns.shebang.read(),f))return this._create_token(o.UNKNOWN,f.trim()+`
`);if(f=this.__patterns.include.read(),f)return this._create_token(o.UNKNOWN,f.trim()+`
`);h=this._input.next();var l="#";if(this._input.hasNext()&&this._input.testChar(v)){do h=this._input.next(),l+=h;while(this._input.hasNext()&&h!=="#"&&h!=="=");return h==="#"||(this._input.peek()==="["&&this._input.peek(1)==="]"?(l+="[]",this._input.next(),this._input.next()):this._input.peek()==="{"&&this._input.peek(1)==="}"&&(l+="{}",this._input.next(),this._input.next())),this._create_token(o.WORD,l)}this._input.back()}else if(h==="<"&&this._is_first_token()){if(f=this.__patterns.html_comment_start.read(),f){for(;this._input.hasNext()&&!this._input.testChar(n.newline);)f+=this._input.next();return k=!0,this._create_token(o.COMMENT,f)}}else if(k&&h==="-"&&(f=this.__patterns.html_comment_end.read(),f))return k=!1,this._create_token(o.COMMENT,f);return null},A.prototype._read_comment=function(h){var f=null;if(h==="/"){var l="";if(this._input.peek(1)==="*"){l=this.__patterns.block_comment.read();var b=O.get_directives(l);b&&b.ignore==="start"&&(l+=O.readIgnored(this._input)),l=l.replace(n.allLineBreaks,`
`),f=this._create_token(o.BLOCK_COMMENT,l),f.directives=b}else this._input.peek(1)==="/"&&(l=this.__patterns.comment.read(),f=this._create_token(o.COMMENT,l))}return f},A.prototype._read_string=function(h){if(h==="`"||h==="'"||h==='"'){var f=this._input.next();return this.has_char_escapes=!1,h==="`"?f+=this._read_string_recursive("`",!0,"${"):f+=this._read_string_recursive(h),this.has_char_escapes&&this._options.unescape_strings&&(f=T(f)),this._input.peek()===h&&(f+=this._input.next()),f=f.replace(n.allLineBreaks,`
`),this._create_token(o.STRING,f)}return null},A.prototype._allow_regexp_or_xml=function(h){return h.type===o.RESERVED&&u(h.text,["return","case","throw","else","do","typeof","yield"])||h.type===o.END_EXPR&&h.text===")"&&h.opened.previous.type===o.RESERVED&&u(h.opened.previous.text,["if","while","for"])||u(h.type,[o.COMMENT,o.START_EXPR,o.START_BLOCK,o.START,o.END_BLOCK,o.OPERATOR,o.EQUALS,o.EOF,o.SEMICOLON,o.COMMA])},A.prototype._read_regexp=function(h,f){if(h==="/"&&this._allow_regexp_or_xml(f)){for(var l=this._input.next(),b=!1,e=!1;this._input.hasNext()&&(b||e||this._input.peek()!==h)&&!this._input.testChar(n.newline);)l+=this._input.peek(),b?b=!1:(b=this._input.peek()==="\\",this._input.peek()==="["?e=!0:this._input.peek()==="]"&&(e=!1)),this._input.next();return this._input.peek()===h&&(l+=this._input.next(),l+=this._input.read(n.identifier)),this._create_token(o.STRING,l)}return null},A.prototype._read_xml=function(h,f){if(this._options.e4x&&h==="<"&&this._allow_regexp_or_xml(f)){var l="",b=this.__patterns.xml.read_match();if(b){for(var e=b[2].replace(/^{\s+/,"{").replace(/\s+}$/,"}"),g=e.indexOf("{")===0,m=0;b;){var w=!!b[1],E=b[2],S=!!b[b.length-1]||E.slice(0,8)==="![CDATA[";if(!S&&(E===e||g&&E.replace(/^{\s+/,"{").replace(/\s+}$/,"}"))&&(w?--m:++m),l+=b[0],m<=0)break;b=this.__patterns.xml.read_match()}return b||(l+=this._input.match(/[\s\S]*/g)[0]),l=l.replace(n.allLineBreaks,`
`),this._create_token(o.STRING,l)}}return null};function T(h){for(var f="",l=0,b=new i(h),e=null;b.hasNext();)if(e=b.match(/([\s]|[^\\]|\\\\)+/g),e&&(f+=e[0]),b.peek()==="\\"){if(b.next(),b.peek()==="x")e=b.match(/x([0-9A-Fa-f]{2})/g);else if(b.peek()==="u")e=b.match(/u([0-9A-Fa-f]{4})/g),e||(e=b.match(/u\{([0-9A-Fa-f]+)\}/g));else{f+="\\",b.hasNext()&&(f+=b.next());continue}if(!e||(l=parseInt(e[1],16),l>126&&l<=255&&e[0].indexOf("x")===0))return h;l>=0&&l<32||l>1114111?f+="\\"+e[0]:l===34||l===39||l===92?f+="\\"+String.fromCharCode(l):f+=String.fromCharCode(l)}return f}return A.prototype._read_string_recursive=function(h,f,l){var b,e;h==="'"?e=this.__patterns.single_quote:h==='"'?e=this.__patterns.double_quote:h==="`"?e=this.__patterns.template_text:h==="}"&&(e=this.__patterns.template_expression);for(var g=e.read(),m="";this._input.hasNext();){if(m=this._input.next(),m===h||!f&&n.newline.test(m)){this._input.back();break}else m==="\\"&&this._input.hasNext()?(b=this._input.peek(),b==="x"||b==="u"?this.has_char_escapes=!0:b==="\r"&&this._input.peek(1)===`
`&&this._input.next(),m+=this._input.next()):l&&(l==="${"&&m==="$"&&this._input.peek()==="{"&&(m+=this._input.next()),l===m&&(h==="`"?m+=this._read_string_recursive("}",f,"`"):m+=this._read_string_recursive("`",f,"${"),this._input.hasNext()&&(m+=this._input.next())));m+=e.read(),g+=m}return g},I.Tokenizer=A,I.TOKEN=o,I.positionable_operators=R.slice(),I.line_starters=p.slice(),I}var qt;function He(){if(qt)return st;qt=1;var i=At().Output,a=ge().Token,r=me(),t=be().Options,n=V().Tokenizer,_=V().line_starters,d=V().positionable_operators,u=V().TOKEN;function o(e,g){return g.indexOf(e)!==-1}function O(e){return e.replace(/^\s+/g,"")}function y(e){for(var g={},m=0;m<e.length;m++)g[e[m].replace(/-/g,"_")]=e[m];return g}function v(e,g){return e&&e.type===u.RESERVED&&e.text===g}function x(e,g){return e&&e.type===u.RESERVED&&o(e.text,g)}var R=["case","return","do","if","throw","else","await","break","continue","async"],C=["before-newline","after-newline","preserve-newline"],L=y(C),p=[L.before_newline,L.preserve_newline],s={BlockStatement:"BlockStatement",Statement:"Statement",ObjectLiteral:"ObjectLiteral",ArrayLiteral:"ArrayLiteral",ForInitializer:"ForInitializer",Conditional:"Conditional",Expression:"Expression"};function c(e,g){g.multiline_frame||g.mode===s.ForInitializer||g.mode===s.Conditional||e.remove_indent(g.start_line_index)}function k(e){e=e.replace(r.allLineBreaks,`
`);for(var g=[],m=e.indexOf(`
`);m!==-1;)g.push(e.substring(0,m)),e=e.substring(m+1),m=e.indexOf(`
`);return e.length&&g.push(e),g}function A(e){return e===s.ArrayLiteral}function T(e){return o(e,[s.Expression,s.ForInitializer,s.Conditional])}function h(e,g){for(var m=0;m<e.length;m++){var w=e[m].trim();if(w.charAt(0)!==g)return!1}return!0}function f(e,g){for(var m=0,w=e.length,E;m<w;m++)if(E=e[m],E&&E.indexOf(g)!==0)return!1;return!0}function l(e,g){g=g||{},this._source_text=e||"",this._output=null,this._tokens=null,this._last_last_text=null,this._flags=null,this._previous_flags=null,this._flag_store=null,this._options=new t(g)}l.prototype.create_flags=function(e,g){var m=0;e&&(m=e.indentation_level,!this._output.just_added_newline()&&e.line_indent_level>m&&(m=e.line_indent_level));var w={mode:g,parent:e,last_token:e?e.last_token:new a(u.START_BLOCK,""),last_word:e?e.last_word:"",declaration_statement:!1,declaration_assignment:!1,multiline_frame:!1,inline_frame:!1,if_block:!1,else_block:!1,class_start_block:!1,do_block:!1,do_while:!1,import_block:!1,in_case_statement:!1,in_case:!1,case_body:!1,case_block:!1,indentation_level:m,alignment:0,line_indent_level:e?e.line_indent_level:m,start_line_index:this._output.get_line_number(),ternary_depth:0};return w},l.prototype._reset=function(e){var g=e.match(/^[\t ]*/)[0];this._last_last_text="",this._output=new i(this._options,g),this._output.raw=this._options.test_output_raw,this._flag_store=[],this.set_mode(s.BlockStatement);var m=new n(e,this._options);return this._tokens=m.tokenize(),e},l.prototype.beautify=function(){if(this._options.disabled)return this._source_text;var e,g=this._reset(this._source_text),m=this._options.eol;this._options.eol==="auto"&&(m=`
`,g&&r.lineBreak.test(g||"")&&(m=g.match(r.lineBreak)[0]));for(var w=this._tokens.next();w;)this.handle_token(w),this._last_last_text=this._flags.last_token.text,this._flags.last_token=w,w=this._tokens.next();return e=this._output.get_code(m),e},l.prototype.handle_token=function(e,g){e.type===u.START_EXPR?this.handle_start_expr(e):e.type===u.END_EXPR?this.handle_end_expr(e):e.type===u.START_BLOCK?this.handle_start_block(e):e.type===u.END_BLOCK?this.handle_end_block(e):e.type===u.WORD?this.handle_word(e):e.type===u.RESERVED?this.handle_word(e):e.type===u.SEMICOLON?this.handle_semicolon(e):e.type===u.STRING?this.handle_string(e):e.type===u.EQUALS?this.handle_equals(e):e.type===u.OPERATOR?this.handle_operator(e):e.type===u.COMMA?this.handle_comma(e):e.type===u.BLOCK_COMMENT?this.handle_block_comment(e,g):e.type===u.COMMENT?this.handle_comment(e,g):e.type===u.DOT?this.handle_dot(e):e.type===u.EOF?this.handle_eof(e):e.type===u.UNKNOWN?this.handle_unknown(e,g):this.handle_unknown(e,g)},l.prototype.handle_whitespace_and_comments=function(e,g){var m=e.newlines,w=this._options.keep_array_indentation&&A(this._flags.mode);if(e.comments_before)for(var E=e.comments_before.next();E;)this.handle_whitespace_and_comments(E,g),this.handle_token(E,g),E=e.comments_before.next();if(w)for(var S=0;S<m;S+=1)this.print_newline(S>0,g);else if(this._options.max_preserve_newlines&&m>this._options.max_preserve_newlines&&(m=this._options.max_preserve_newlines),this._options.preserve_newlines&&m>1){this.print_newline(!1,g);for(var P=1;P<m;P+=1)this.print_newline(!0,g)}};var b=["async","break","continue","return","throw","yield"];return l.prototype.allow_wrap_or_preserved_newline=function(e,g){if(g=g===void 0?!1:g,!this._output.just_added_newline()){var m=this._options.preserve_newlines&&e.newlines||g,w=o(this._flags.last_token.text,d)||o(e.text,d);if(w){var E=o(this._flags.last_token.text,d)&&o(this._options.operator_position,p)||o(e.text,d);m=m&&E}if(m)this.print_newline(!1,!0);else if(this._options.wrap_line_length){if(x(this._flags.last_token,b))return;this._output.set_wrap_point()}}},l.prototype.print_newline=function(e,g){if(!g&&this._flags.last_token.text!==";"&&this._flags.last_token.text!==","&&this._flags.last_token.text!=="="&&(this._flags.last_token.type!==u.OPERATOR||this._flags.last_token.text==="--"||this._flags.last_token.text==="++"))for(var m=this._tokens.peek();this._flags.mode===s.Statement&&!(this._flags.if_block&&v(m,"else"))&&!this._flags.do_block;)this.restore_mode();this._output.add_new_line(e)&&(this._flags.multiline_frame=!0)},l.prototype.print_token_line_indentation=function(e){this._output.just_added_newline()&&(this._options.keep_array_indentation&&e.newlines&&(e.text==="["||A(this._flags.mode))?(this._output.current_line.set_indent(-1),this._output.current_line.push(e.whitespace_before),this._output.space_before_token=!1):this._output.set_indent(this._flags.indentation_level,this._flags.alignment)&&(this._flags.line_indent_level=this._flags.indentation_level))},l.prototype.print_token=function(e){if(this._output.raw){this._output.add_raw_token(e);return}if(this._options.comma_first&&e.previous&&e.previous.type===u.COMMA&&this._output.just_added_newline()&&this._output.previous_line.last()===","){var g=this._output.previous_line.pop();this._output.previous_line.is_empty()&&(this._output.previous_line.push(g),this._output.trim(!0),this._output.current_line.pop(),this._output.trim()),this.print_token_line_indentation(e),this._output.add_token(","),this._output.space_before_token=!0}this.print_token_line_indentation(e),this._output.non_breaking_space=!0,this._output.add_token(e.text),this._output.previous_token_wrapped&&(this._flags.multiline_frame=!0)},l.prototype.indent=function(){this._flags.indentation_level+=1,this._output.set_indent(this._flags.indentation_level,this._flags.alignment)},l.prototype.deindent=function(){this._flags.indentation_level>0&&(!this._flags.parent||this._flags.indentation_level>this._flags.parent.indentation_level)&&(this._flags.indentation_level-=1,this._output.set_indent(this._flags.indentation_level,this._flags.alignment))},l.prototype.set_mode=function(e){this._flags?(this._flag_store.push(this._flags),this._previous_flags=this._flags):this._previous_flags=this.create_flags(null,e),this._flags=this.create_flags(this._previous_flags,e),this._output.set_indent(this._flags.indentation_level,this._flags.alignment)},l.prototype.restore_mode=function(){this._flag_store.length>0&&(this._previous_flags=this._flags,this._flags=this._flag_store.pop(),this._previous_flags.mode===s.Statement&&c(this._output,this._previous_flags),this._output.set_indent(this._flags.indentation_level,this._flags.alignment))},l.prototype.start_of_object_property=function(){return this._flags.parent.mode===s.ObjectLiteral&&this._flags.mode===s.Statement&&(this._flags.last_token.text===":"&&this._flags.ternary_depth===0||x(this._flags.last_token,["get","set"]))},l.prototype.start_of_statement=function(e){var g=!1;return g=g||x(this._flags.last_token,["var","let","const"])&&e.type===u.WORD,g=g||v(this._flags.last_token,"do"),g=g||!(this._flags.parent.mode===s.ObjectLiteral&&this._flags.mode===s.Statement)&&x(this._flags.last_token,b)&&!e.newlines,g=g||v(this._flags.last_token,"else")&&!(v(e,"if")&&!e.comments_before),g=g||this._flags.last_token.type===u.END_EXPR&&(this._previous_flags.mode===s.ForInitializer||this._previous_flags.mode===s.Conditional),g=g||this._flags.last_token.type===u.WORD&&this._flags.mode===s.BlockStatement&&!this._flags.in_case&&!(e.text==="--"||e.text==="++")&&this._last_last_text!=="function"&&e.type!==u.WORD&&e.type!==u.RESERVED,g=g||this._flags.mode===s.ObjectLiteral&&(this._flags.last_token.text===":"&&this._flags.ternary_depth===0||x(this._flags.last_token,["get","set"])),g?(this.set_mode(s.Statement),this.indent(),this.handle_whitespace_and_comments(e,!0),this.start_of_object_property()||this.allow_wrap_or_preserved_newline(e,x(e,["do","for","if","while"])),!0):!1},l.prototype.handle_start_expr=function(e){this.start_of_statement(e)||this.handle_whitespace_and_comments(e);var g=s.Expression;if(e.text==="["){if(this._flags.last_token.type===u.WORD||this._flags.last_token.text===")"){x(this._flags.last_token,_)&&(this._output.space_before_token=!0),this.print_token(e),this.set_mode(g),this.indent(),this._options.space_in_paren&&(this._output.space_before_token=!0);return}g=s.ArrayLiteral,A(this._flags.mode)&&(this._flags.last_token.text==="["||this._flags.last_token.text===","&&(this._last_last_text==="]"||this._last_last_text==="}"))&&(this._options.keep_array_indentation||this.print_newline()),o(this._flags.last_token.type,[u.START_EXPR,u.END_EXPR,u.WORD,u.OPERATOR,u.DOT])||(this._output.space_before_token=!0)}else{if(this._flags.last_token.type===u.RESERVED)this._flags.last_token.text==="for"?(this._output.space_before_token=this._options.space_before_conditional,g=s.ForInitializer):o(this._flags.last_token.text,["if","while","switch"])?(this._output.space_before_token=this._options.space_before_conditional,g=s.Conditional):o(this._flags.last_word,["await","async"])?this._output.space_before_token=!0:this._flags.last_token.text==="import"&&e.whitespace_before===""?this._output.space_before_token=!1:(o(this._flags.last_token.text,_)||this._flags.last_token.text==="catch")&&(this._output.space_before_token=!0);else if(this._flags.last_token.type===u.EQUALS||this._flags.last_token.type===u.OPERATOR)this.start_of_object_property()||this.allow_wrap_or_preserved_newline(e);else if(this._flags.last_token.type===u.WORD){this._output.space_before_token=!1;var m=this._tokens.peek(-3);if(this._options.space_after_named_function&&m){var w=this._tokens.peek(-4);x(m,["async","function"])||m.text==="*"&&x(w,["async","function"])?this._output.space_before_token=!0:this._flags.mode===s.ObjectLiteral?(m.text==="{"||m.text===","||m.text==="*"&&(w.text==="{"||w.text===","))&&(this._output.space_before_token=!0):this._flags.parent&&this._flags.parent.class_start_block&&(this._output.space_before_token=!0)}}else this.allow_wrap_or_preserved_newline(e);(this._flags.last_token.type===u.RESERVED&&(this._flags.last_word==="function"||this._flags.last_word==="typeof")||this._flags.last_token.text==="*"&&(o(this._last_last_text,["function","yield"])||this._flags.mode===s.ObjectLiteral&&o(this._last_last_text,["{",","])))&&(this._output.space_before_token=this._options.space_after_anon_function)}this._flags.last_token.text===";"||this._flags.last_token.type===u.START_BLOCK?this.print_newline():(this._flags.last_token.type===u.END_EXPR||this._flags.last_token.type===u.START_EXPR||this._flags.last_token.type===u.END_BLOCK||this._flags.last_token.text==="."||this._flags.last_token.type===u.COMMA)&&this.allow_wrap_or_preserved_newline(e,e.newlines),this.print_token(e),this.set_mode(g),this._options.space_in_paren&&(this._output.space_before_token=!0),this.indent()},l.prototype.handle_end_expr=function(e){for(;this._flags.mode===s.Statement;)this.restore_mode();this.handle_whitespace_and_comments(e),this._flags.multiline_frame&&this.allow_wrap_or_preserved_newline(e,e.text==="]"&&A(this._flags.mode)&&!this._options.keep_array_indentation),this._options.space_in_paren&&(this._flags.last_token.type===u.START_EXPR&&!this._options.space_in_empty_paren?(this._output.trim(),this._output.space_before_token=!1):this._output.space_before_token=!0),this.deindent(),this.print_token(e),this.restore_mode(),c(this._output,this._previous_flags),this._flags.do_while&&this._previous_flags.mode===s.Conditional&&(this._previous_flags.mode=s.Expression,this._flags.do_block=!1,this._flags.do_while=!1)},l.prototype.handle_start_block=function(e){this.handle_whitespace_and_comments(e);var g=this._tokens.peek(),m=this._tokens.peek(1);this._flags.last_word==="switch"&&this._flags.last_token.type===u.END_EXPR?(this.set_mode(s.BlockStatement),this._flags.in_case_statement=!0):this._flags.case_body?this.set_mode(s.BlockStatement):m&&(o(m.text,[":",","])&&o(g.type,[u.STRING,u.WORD,u.RESERVED])||o(g.text,["get","set","..."])&&o(m.type,[u.WORD,u.RESERVED]))?o(this._last_last_text,["class","interface"])&&!o(m.text,[":",","])?this.set_mode(s.BlockStatement):this.set_mode(s.ObjectLiteral):this._flags.last_token.type===u.OPERATOR&&this._flags.last_token.text==="=>"?this.set_mode(s.BlockStatement):o(this._flags.last_token.type,[u.EQUALS,u.START_EXPR,u.COMMA,u.OPERATOR])||x(this._flags.last_token,["return","throw","import","default"])?this.set_mode(s.ObjectLiteral):this.set_mode(s.BlockStatement),this._flags.last_token&&x(this._flags.last_token.previous,["class","extends"])&&(this._flags.class_start_block=!0);var w=!g.comments_before&&g.text==="}",E=w&&this._flags.last_word==="function"&&this._flags.last_token.type===u.END_EXPR;if(this._options.brace_preserve_inline){var S=0,P=null;this._flags.inline_frame=!0;do if(S+=1,P=this._tokens.peek(S-1),P.newlines){this._flags.inline_frame=!1;break}while(P.type!==u.EOF&&!(P.type===u.END_BLOCK&&P.opened===e))}(this._options.brace_style==="expand"||this._options.brace_style==="none"&&e.newlines)&&!this._flags.inline_frame?this._flags.last_token.type!==u.OPERATOR&&(E||this._flags.last_token.type===u.EQUALS||x(this._flags.last_token,R)&&this._flags.last_token.text!=="else")?this._output.space_before_token=!0:this.print_newline(!1,!0):(A(this._previous_flags.mode)&&(this._flags.last_token.type===u.START_EXPR||this._flags.last_token.type===u.COMMA)&&((this._flags.last_token.type===u.COMMA||this._options.space_in_paren)&&(this._output.space_before_token=!0),(this._flags.last_token.type===u.COMMA||this._flags.last_token.type===u.START_EXPR&&this._flags.inline_frame)&&(this.allow_wrap_or_preserved_newline(e),this._previous_flags.multiline_frame=this._previous_flags.multiline_frame||this._flags.multiline_frame,this._flags.multiline_frame=!1)),this._flags.last_token.type!==u.OPERATOR&&this._flags.last_token.type!==u.START_EXPR&&(o(this._flags.last_token.type,[u.START_BLOCK,u.SEMICOLON])&&!this._flags.inline_frame?this.print_newline():this._output.space_before_token=!0)),this.print_token(e),this.indent(),!w&&!(this._options.brace_preserve_inline&&this._flags.inline_frame)&&this.print_newline()},l.prototype.handle_end_block=function(e){for(this.handle_whitespace_and_comments(e);this._flags.mode===s.Statement;)this.restore_mode();var g=this._flags.last_token.type===u.START_BLOCK;this._flags.inline_frame&&!g?this._output.space_before_token=!0:this._options.brace_style==="expand"?g||this.print_newline():g||(A(this._flags.mode)&&this._options.keep_array_indentation?(this._options.keep_array_indentation=!1,this.print_newline(),this._options.keep_array_indentation=!0):this.print_newline()),this.restore_mode(),this.print_token(e)},l.prototype.handle_word=function(e){if(e.type===u.RESERVED){if(o(e.text,["set","get"])&&this._flags.mode!==s.ObjectLiteral)e.type=u.WORD;else if(e.text==="import"&&o(this._tokens.peek().text,["(","."]))e.type=u.WORD;else if(o(e.text,["as","from"])&&!this._flags.import_block)e.type=u.WORD;else if(this._flags.mode===s.ObjectLiteral){var g=this._tokens.peek();g.text===":"&&(e.type=u.WORD)}}if(this.start_of_statement(e)?x(this._flags.last_token,["var","let","const"])&&e.type===u.WORD&&(this._flags.declaration_statement=!0):e.newlines&&!T(this._flags.mode)&&(this._flags.last_token.type!==u.OPERATOR||this._flags.last_token.text==="--"||this._flags.last_token.text==="++")&&this._flags.last_token.type!==u.EQUALS&&(this._options.preserve_newlines||!x(this._flags.last_token,["var","let","const","set","get"]))?(this.handle_whitespace_and_comments(e),this.print_newline()):this.handle_whitespace_and_comments(e),this._flags.do_block&&!this._flags.do_while)if(v(e,"while")){this._output.space_before_token=!0,this.print_token(e),this._output.space_before_token=!0,this._flags.do_while=!0;return}else this.print_newline(),this._flags.do_block=!1;if(this._flags.if_block)if(!this._flags.else_block&&v(e,"else"))this._flags.else_block=!0;else{for(;this._flags.mode===s.Statement;)this.restore_mode();this._flags.if_block=!1,this._flags.else_block=!1}if(this._flags.in_case_statement&&x(e,["case","default"])){this.print_newline(),!this._flags.case_block&&(this._flags.case_body||this._options.jslint_happy)&&this.deindent(),this._flags.case_body=!1,this.print_token(e),this._flags.in_case=!0;return}if((this._flags.last_token.type===u.COMMA||this._flags.last_token.type===u.START_EXPR||this._flags.last_token.type===u.EQUALS||this._flags.last_token.type===u.OPERATOR)&&!this.start_of_object_property()&&!(o(this._flags.last_token.text,["+","-"])&&this._last_last_text===":"&&this._flags.parent.mode===s.ObjectLiteral)&&this.allow_wrap_or_preserved_newline(e),v(e,"function")){(o(this._flags.last_token.text,["}",";"])||this._output.just_added_newline()&&!(o(this._flags.last_token.text,["(","[","{",":","=",","])||this._flags.last_token.type===u.OPERATOR))&&!this._output.just_added_blankline()&&!e.comments_before&&(this.print_newline(),this.print_newline(!0)),this._flags.last_token.type===u.RESERVED||this._flags.last_token.type===u.WORD?x(this._flags.last_token,["get","set","new","export"])||x(this._flags.last_token,b)?this._output.space_before_token=!0:v(this._flags.last_token,"default")&&this._last_last_text==="export"?this._output.space_before_token=!0:this._flags.last_token.text==="declare"?this._output.space_before_token=!0:this.print_newline():this._flags.last_token.type===u.OPERATOR||this._flags.last_token.text==="="?this._output.space_before_token=!0:!this._flags.multiline_frame&&(T(this._flags.mode)||A(this._flags.mode))||this.print_newline(),this.print_token(e),this._flags.last_word=e.text;return}var m="NONE";if(this._flags.last_token.type===u.END_BLOCK?this._previous_flags.inline_frame?m="SPACE":x(e,["else","catch","finally","from"])?this._options.brace_style==="expand"||this._options.brace_style==="end-expand"||this._options.brace_style==="none"&&e.newlines?m="NEWLINE":(m="SPACE",this._output.space_before_token=!0):m="NEWLINE":this._flags.last_token.type===u.SEMICOLON&&this._flags.mode===s.BlockStatement?m="NEWLINE":this._flags.last_token.type===u.SEMICOLON&&T(this._flags.mode)?m="SPACE":this._flags.last_token.type===u.STRING?m="NEWLINE":this._flags.last_token.type===u.RESERVED||this._flags.last_token.type===u.WORD||this._flags.last_token.text==="*"&&(o(this._last_last_text,["function","yield"])||this._flags.mode===s.ObjectLiteral&&o(this._last_last_text,["{",","]))?m="SPACE":this._flags.last_token.type===u.START_BLOCK?this._flags.inline_frame?m="SPACE":m="NEWLINE":this._flags.last_token.type===u.END_EXPR&&(this._output.space_before_token=!0,m="NEWLINE"),x(e,_)&&this._flags.last_token.text!==")"&&(this._flags.inline_frame||this._flags.last_token.text==="else"||this._flags.last_token.text==="export"?m="SPACE":m="NEWLINE"),x(e,["else","catch","finally"]))if((!(this._flags.last_token.type===u.END_BLOCK&&this._previous_flags.mode===s.BlockStatement)||this._options.brace_style==="expand"||this._options.brace_style==="end-expand"||this._options.brace_style==="none"&&e.newlines)&&!this._flags.inline_frame)this.print_newline();else{this._output.trim(!0);var w=this._output.current_line;w.last()!=="}"&&this.print_newline(),this._output.space_before_token=!0}else m==="NEWLINE"?x(this._flags.last_token,R)?this._output.space_before_token=!0:this._flags.last_token.text==="declare"&&x(e,["var","let","const"])?this._output.space_before_token=!0:this._flags.last_token.type!==u.END_EXPR?(this._flags.last_token.type!==u.START_EXPR||!x(e,["var","let","const"]))&&this._flags.last_token.text!==":"&&(v(e,"if")&&v(e.previous,"else")?this._output.space_before_token=!0:this.print_newline()):x(e,_)&&this._flags.last_token.text!==")"&&this.print_newline():this._flags.multiline_frame&&A(this._flags.mode)&&this._flags.last_token.text===","&&this._last_last_text==="}"?this.print_newline():m==="SPACE"&&(this._output.space_before_token=!0);e.previous&&(e.previous.type===u.WORD||e.previous.type===u.RESERVED)&&(this._output.space_before_token=!0),this.print_token(e),this._flags.last_word=e.text,e.type===u.RESERVED&&(e.text==="do"?this._flags.do_block=!0:e.text==="if"?this._flags.if_block=!0:e.text==="import"?this._flags.import_block=!0:this._flags.import_block&&v(e,"from")&&(this._flags.import_block=!1))},l.prototype.handle_semicolon=function(e){this.start_of_statement(e)?this._output.space_before_token=!1:this.handle_whitespace_and_comments(e);for(var g=this._tokens.peek();this._flags.mode===s.Statement&&!(this._flags.if_block&&v(g,"else"))&&!this._flags.do_block;)this.restore_mode();this._flags.import_block&&(this._flags.import_block=!1),this.print_token(e)},l.prototype.handle_string=function(e){e.text.startsWith("`")&&e.newlines===0&&e.whitespace_before===""&&(e.previous.text===")"||this._flags.last_token.type===u.WORD)||(this.start_of_statement(e)?this._output.space_before_token=!0:(this.handle_whitespace_and_comments(e),this._flags.last_token.type===u.RESERVED||this._flags.last_token.type===u.WORD||this._flags.inline_frame?this._output.space_before_token=!0:this._flags.last_token.type===u.COMMA||this._flags.last_token.type===u.START_EXPR||this._flags.last_token.type===u.EQUALS||this._flags.last_token.type===u.OPERATOR?this.start_of_object_property()||this.allow_wrap_or_preserved_newline(e):e.text.startsWith("`")&&this._flags.last_token.type===u.END_EXPR&&(e.previous.text==="]"||e.previous.text===")")&&e.newlines===0?this._output.space_before_token=!0:this.print_newline())),this.print_token(e)},l.prototype.handle_equals=function(e){this.start_of_statement(e)||this.handle_whitespace_and_comments(e),this._flags.declaration_statement&&(this._flags.declaration_assignment=!0),this._output.space_before_token=!0,this.print_token(e),this._output.space_before_token=!0},l.prototype.handle_comma=function(e){this.handle_whitespace_and_comments(e,!0),this.print_token(e),this._output.space_before_token=!0,this._flags.declaration_statement?(T(this._flags.parent.mode)&&(this._flags.declaration_assignment=!1),this._flags.declaration_assignment?(this._flags.declaration_assignment=!1,this.print_newline(!1,!0)):this._options.comma_first&&this.allow_wrap_or_preserved_newline(e)):this._flags.mode===s.ObjectLiteral||this._flags.mode===s.Statement&&this._flags.parent.mode===s.ObjectLiteral?(this._flags.mode===s.Statement&&this.restore_mode(),this._flags.inline_frame||this.print_newline()):this._options.comma_first&&this.allow_wrap_or_preserved_newline(e)},l.prototype.handle_operator=function(e){var g=e.text==="*"&&(x(this._flags.last_token,["function","yield"])||o(this._flags.last_token.type,[u.START_BLOCK,u.COMMA,u.END_BLOCK,u.SEMICOLON])),m=o(e.text,["-","+"])&&(o(this._flags.last_token.type,[u.START_BLOCK,u.START_EXPR,u.EQUALS,u.OPERATOR])||o(this._flags.last_token.text,_)||this._flags.last_token.text===",");if(!this.start_of_statement(e)){var w=!g;this.handle_whitespace_and_comments(e,w)}if(e.text==="*"&&this._flags.last_token.type===u.DOT){this.print_token(e);return}if(e.text==="::"){this.print_token(e);return}if(o(e.text,["-","+"])&&this.start_of_object_property()){this.print_token(e);return}if(this._flags.last_token.type===u.OPERATOR&&o(this._options.operator_position,p)&&this.allow_wrap_or_preserved_newline(e),e.text===":"&&this._flags.in_case){this.print_token(e),this._flags.in_case=!1,this._flags.case_body=!0,this._tokens.peek().type!==u.START_BLOCK?(this.indent(),this.print_newline(),this._flags.case_block=!1):(this._flags.case_block=!0,this._output.space_before_token=!0);return}var E=!0,S=!0,P=!1;if(e.text===":"?this._flags.ternary_depth===0?E=!1:(this._flags.ternary_depth-=1,P=!0):e.text==="?"&&(this._flags.ternary_depth+=1),!m&&!g&&this._options.preserve_newlines&&o(e.text,d)){var M=e.text===":",j=M&&P,B=M&&!P;switch(this._options.operator_position){case L.before_newline:this._output.space_before_token=!B,this.print_token(e),(!M||j)&&this.allow_wrap_or_preserved_newline(e),this._output.space_before_token=!0;return;case L.after_newline:this._output.space_before_token=!0,!M||j?this._tokens.peek().newlines?this.print_newline(!1,!0):this.allow_wrap_or_preserved_newline(e):this._output.space_before_token=!1,this.print_token(e),this._output.space_before_token=!0;return;case L.preserve_newline:B||this.allow_wrap_or_preserved_newline(e),E=!(this._output.just_added_newline()||B),this._output.space_before_token=E,this.print_token(e),this._output.space_before_token=!0;return}}if(g){this.allow_wrap_or_preserved_newline(e),E=!1;var kt=this._tokens.peek();S=kt&&o(kt.type,[u.WORD,u.RESERVED])}else if(e.text==="...")this.allow_wrap_or_preserved_newline(e),E=this._flags.last_token.type===u.START_BLOCK,S=!1;else if(o(e.text,["--","++","!","~"])||m){if((this._flags.last_token.type===u.COMMA||this._flags.last_token.type===u.START_EXPR)&&this.allow_wrap_or_preserved_newline(e),E=!1,S=!1,e.newlines&&(e.text==="--"||e.text==="++"||e.text==="~")){var Rt=x(this._flags.last_token,R)&&e.newlines;Rt&&(this._previous_flags.if_block||this._previous_flags.else_block)&&this.restore_mode(),this.print_newline(Rt,!0)}this._flags.last_token.text===";"&&T(this._flags.mode)&&(E=!0),this._flags.last_token.type===u.RESERVED?E=!0:this._flags.last_token.type===u.END_EXPR?E=!(this._flags.last_token.text==="]"&&(e.text==="--"||e.text==="++")):this._flags.last_token.type===u.OPERATOR&&(E=o(e.text,["--","-","++","+"])&&o(this._flags.last_token.text,["--","-","++","+"]),o(e.text,["+","-"])&&o(this._flags.last_token.text,["--","++"])&&(S=!0)),(this._flags.mode===s.BlockStatement&&!this._flags.inline_frame||this._flags.mode===s.Statement)&&(this._flags.last_token.text==="{"||this._flags.last_token.text===";")&&this.print_newline()}this._output.space_before_token=this._output.space_before_token||E,this.print_token(e),this._output.space_before_token=S},l.prototype.handle_block_comment=function(e,g){if(this._output.raw){this._output.add_raw_token(e),e.directives&&e.directives.preserve==="end"&&(this._output.raw=this._options.test_output_raw);return}if(e.directives){this.print_newline(!1,g),this.print_token(e),e.directives.preserve==="start"&&(this._output.raw=!0),this.print_newline(!1,!0);return}if(!r.newline.test(e.text)&&!e.newlines){this._output.space_before_token=!0,this.print_token(e),this._output.space_before_token=!0;return}else this.print_block_commment(e,g)},l.prototype.print_block_commment=function(e,g){var m=k(e.text),w,E=!1,S=!1,P=e.whitespace_before,M=P.length;if(this.print_newline(!1,g),this.print_token_line_indentation(e),this._output.add_token(m[0]),this.print_newline(!1,g),m.length>1){for(m=m.slice(1),E=h(m,"*"),S=f(m,P),E&&(this._flags.alignment=1),w=0;w<m.length;w++)E?(this.print_token_line_indentation(e),this._output.add_token(O(m[w]))):S&&m[w]?(this.print_token_line_indentation(e),this._output.add_token(m[w].substring(M))):(this._output.current_line.set_indent(-1),this._output.add_token(m[w])),this.print_newline(!1,g);this._flags.alignment=0}},l.prototype.handle_comment=function(e,g){e.newlines?this.print_newline(!1,g):this._output.trim(!0),this._output.space_before_token=!0,this.print_token(e),this.print_newline(!1,g)},l.prototype.handle_dot=function(e){this.start_of_statement(e)||this.handle_whitespace_and_comments(e,!0),this._flags.last_token.text.match("^[0-9]+$")&&(this._output.space_before_token=!0),x(this._flags.last_token,R)?this._output.space_before_token=!1:this.allow_wrap_or_preserved_newline(e,this._flags.last_token.text===")"&&this._options.break_chained_methods),this._options.unindent_chained_methods&&this._output.just_added_newline()&&this.deindent(),this.print_token(e)},l.prototype.handle_unknown=function(e,g){this.print_token(e),e.text[e.text.length-1]===`
`&&this.print_newline(!1,g)},l.prototype.handle_eof=function(e){for(;this._flags.mode===s.Statement;)this.restore_mode();this.handle_whitespace_and_comments(e)},st.Beautifier=l,st}var Vt;function Ze(){if(Vt)return F.exports;Vt=1;var i=He().Beautifier,a=be().Options;function r(t,n){var _=new i(t,n);return _.beautify()}return F.exports=r,F.exports.defaultOptions=function(){return new a},F.exports}var X={exports:{}},ct={},dt={},Xt;function ve(){if(Xt)return dt;Xt=1;var i=Ot().Options;function a(r){i.call(this,r,"css"),this.selector_separator_newline=this._get_boolean("selector_separator_newline",!0),this.newline_between_rules=this._get_boolean("newline_between_rules",!0);var t=this._get_boolean("space_around_selector_separator");this.space_around_combinator=this._get_boolean("space_around_combinator")||t;var n=this._get_selection_list("brace_style",["collapse","expand","end-expand","none","preserve-inline"]);this.brace_style="collapse";for(var _=0;_<n.length;_++)n[_]!=="expand"?this.brace_style="collapse":this.brace_style=n[_]}return a.prototype=new i,dt.Options=a,dt}var Gt;function Ye(){if(Gt)return ct;Gt=1;var i=ve().Options,a=At().Output,r=Et().InputScanner,t=Tt().Directives,n=new t(/\/\*/,/\*\//),_=/\r\n|[\r\n]/,d=/\r\n|[\r\n]/g,u=/\s/,o=/(?:\s|\n)+/g,O=/\/\*(?:[\s\S]*?)((?:\*\/)|$)/g,y=/\/\/(?:[^\n\r\u2028\u2029]*)/g;function v(x,R){this._source_text=x||"",this._options=new i(R),this._ch=null,this._input=null,this.NESTED_AT_RULE={page:!0,"font-face":!0,keyframes:!0,media:!0,supports:!0,document:!0},this.CONDITIONAL_GROUP_RULE={media:!0,supports:!0,document:!0},this.NON_SEMICOLON_NEWLINE_PROPERTY=["grid-template-areas","grid-template"]}return v.prototype.eatString=function(x){var R="";for(this._ch=this._input.next();this._ch;){if(R+=this._ch,this._ch==="\\")R+=this._input.next();else if(x.indexOf(this._ch)!==-1||this._ch===`
`)break;this._ch=this._input.next()}return R},v.prototype.eatWhitespace=function(x){for(var R=u.test(this._input.peek()),C=0;u.test(this._input.peek());)this._ch=this._input.next(),x&&this._ch===`
`&&(C===0||C<this._options.max_preserve_newlines)&&(C++,this._output.add_new_line(!0));return R},v.prototype.foundNestedPseudoClass=function(){for(var x=0,R=1,C=this._input.peek(R);C;){if(C==="{")return!0;if(C==="(")x+=1;else if(C===")"){if(x===0)return!1;x-=1}else if(C===";"||C==="}")return!1;R++,C=this._input.peek(R)}return!1},v.prototype.print_string=function(x){this._output.set_indent(this._indentLevel),this._output.non_breaking_space=!0,this._output.add_token(x)},v.prototype.preserveSingleSpace=function(x){x&&(this._output.space_before_token=!0)},v.prototype.indent=function(){this._indentLevel++},v.prototype.outdent=function(){this._indentLevel>0&&this._indentLevel--},v.prototype.beautify=function(){if(this._options.disabled)return this._source_text;var x=this._source_text,R=this._options.eol;R==="auto"&&(R=`
`,x&&_.test(x||"")&&(R=x.match(_)[0])),x=x.replace(d,`
`);var C=x.match(/^[\t ]*/)[0];this._output=new a(this._options,C),this._input=new r(x),this._indentLevel=0,this._nestedLevel=0,this._ch=null;for(var L=0,p=!1,s=!1,c=!1,k=!1,A=!1,T=this._ch,h=!1,f,l,b;f=this._input.read(o),l=f!=="",b=T,this._ch=this._input.next(),this._ch==="\\"&&this._input.hasNext()&&(this._ch+=this._input.next()),T=this._ch,this._ch;)if(this._ch==="/"&&this._input.peek()==="*"){this._output.add_new_line(),this._input.back();var e=this._input.read(O),g=n.get_directives(e);g&&g.ignore==="start"&&(e+=n.readIgnored(this._input)),this.print_string(e),this.eatWhitespace(!0),this._output.add_new_line()}else if(this._ch==="/"&&this._input.peek()==="/")this._output.space_before_token=!0,this._input.back(),this.print_string(this._input.read(y)),this.eatWhitespace(!0);else if(this._ch==="$"){this.preserveSingleSpace(l),this.print_string(this._ch);var m=this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);m.match(/[ :]$/)&&(m=this.eatString(": ").replace(/\s+$/,""),this.print_string(m),this._output.space_before_token=!0),L===0&&m.indexOf(":")!==-1&&(s=!0,this.indent())}else if(this._ch==="@")if(this.preserveSingleSpace(l),this._input.peek()==="{")this.print_string(this._ch+this.eatString("}"));else{this.print_string(this._ch);var w=this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);w.match(/[ :]$/)&&(w=this.eatString(": ").replace(/\s+$/,""),this.print_string(w),this._output.space_before_token=!0),L===0&&w.indexOf(":")!==-1?(s=!0,this.indent()):w in this.NESTED_AT_RULE?(this._nestedLevel+=1,w in this.CONDITIONAL_GROUP_RULE&&(c=!0)):L===0&&!s&&(k=!0)}else if(this._ch==="#"&&this._input.peek()==="{")this.preserveSingleSpace(l),this.print_string(this._ch+this.eatString("}"));else if(this._ch==="{")s&&(s=!1,this.outdent()),k=!1,c?(c=!1,p=this._indentLevel>=this._nestedLevel):p=this._indentLevel>=this._nestedLevel-1,this._options.newline_between_rules&&p&&this._output.previous_line&&this._output.previous_line.item(-1)!=="{"&&this._output.ensure_empty_line_above("/",","),this._output.space_before_token=!0,this._options.brace_style==="expand"?(this._output.add_new_line(),this.print_string(this._ch),this.indent(),this._output.set_indent(this._indentLevel)):(b==="("?this._output.space_before_token=!1:b!==","&&this.indent(),this.print_string(this._ch)),this.eatWhitespace(!0),this._output.add_new_line();else if(this._ch==="}")this.outdent(),this._output.add_new_line(),b==="{"&&this._output.trim(!0),s&&(this.outdent(),s=!1),this.print_string(this._ch),p=!1,this._nestedLevel&&this._nestedLevel--,this.eatWhitespace(!0),this._output.add_new_line(),this._options.newline_between_rules&&!this._output.just_added_blankline()&&this._input.peek()!=="}"&&this._output.add_new_line(!0),this._input.peek()===")"&&(this._output.trim(!0),this._options.brace_style==="expand"&&this._output.add_new_line(!0));else if(this._ch===":"){for(var E=0;E<this.NON_SEMICOLON_NEWLINE_PROPERTY.length;E++)if(this._input.lookBack(this.NON_SEMICOLON_NEWLINE_PROPERTY[E])){h=!0;break}(p||c)&&!(this._input.lookBack("&")||this.foundNestedPseudoClass())&&!this._input.lookBack("(")&&!k&&L===0?(this.print_string(":"),s||(s=!0,this._output.space_before_token=!0,this.eatWhitespace(!0),this.indent())):(this._input.lookBack(" ")&&(this._output.space_before_token=!0),this._input.peek()===":"?(this._ch=this._input.next(),this.print_string("::")):this.print_string(":"))}else if(this._ch==='"'||this._ch==="'"){var S=b==='"'||b==="'";this.preserveSingleSpace(S||l),this.print_string(this._ch+this.eatString(this._ch)),this.eatWhitespace(!0)}else if(this._ch===";")h=!1,L===0?(s&&(this.outdent(),s=!1),k=!1,this.print_string(this._ch),this.eatWhitespace(!0),this._input.peek()!=="/"&&this._output.add_new_line()):(this.print_string(this._ch),this.eatWhitespace(!0),this._output.space_before_token=!0);else if(this._ch==="(")if(this._input.lookBack("url"))this.print_string(this._ch),this.eatWhitespace(),L++,this.indent(),this._ch=this._input.next(),this._ch===")"||this._ch==='"'||this._ch==="'"?this._input.back():this._ch&&(this.print_string(this._ch+this.eatString(")")),L&&(L--,this.outdent()));else{var P=!1;this._input.lookBack("with")&&(P=!0),this.preserveSingleSpace(l||P),this.print_string(this._ch),s&&b==="$"&&this._options.selector_separator_newline?(this._output.add_new_line(),A=!0):(this.eatWhitespace(),L++,this.indent())}else if(this._ch===")")L&&(L--,this.outdent()),A&&this._input.peek()===";"&&this._options.selector_separator_newline&&(A=!1,this.outdent(),this._output.add_new_line()),this.print_string(this._ch);else if(this._ch===",")this.print_string(this._ch),this.eatWhitespace(!0),this._options.selector_separator_newline&&(!s||A)&&L===0&&!k?this._output.add_new_line():this._output.space_before_token=!0;else if((this._ch===">"||this._ch==="+"||this._ch==="~")&&!s&&L===0)this._options.space_around_combinator?(this._output.space_before_token=!0,this.print_string(this._ch),this._output.space_before_token=!0):(this.print_string(this._ch),this.eatWhitespace(),this._ch&&u.test(this._ch)&&(this._ch=""));else if(this._ch==="]")this.print_string(this._ch);else if(this._ch==="[")this.preserveSingleSpace(l),this.print_string(this._ch);else if(this._ch==="=")this.eatWhitespace(),this.print_string("="),u.test(this._ch)&&(this._ch="");else if(this._ch==="!"&&!this._input.lookBack("\\"))this._output.space_before_token=!0,this.print_string(this._ch);else{var M=b==='"'||b==="'";this.preserveSingleSpace(M||l),this.print_string(this._ch),!this._output.just_added_newline()&&this._input.peek()===`
`&&h&&this._output.add_new_line()}var j=this._output.get_code(R);return j},ct.Beautifier=v,ct}var Qt;function Je(){if(Qt)return X.exports;Qt=1;var i=Ye().Beautifier,a=ve().Options;function r(t,n){var _=new i(t,n);return _.beautify()}return X.exports=r,X.exports.defaultOptions=function(){return new a},X.exports}var G={exports:{}},gt={},mt={},Ht;function xe(){if(Ht)return mt;Ht=1;var i=Ot().Options;function a(r){i.call(this,r,"html"),this.templating.length===1&&this.templating[0]==="auto"&&(this.templating=["django","erb","handlebars","php"]),this.indent_inner_html=this._get_boolean("indent_inner_html"),this.indent_body_inner_html=this._get_boolean("indent_body_inner_html",!0),this.indent_head_inner_html=this._get_boolean("indent_head_inner_html",!0),this.indent_handlebars=this._get_boolean("indent_handlebars",!0),this.wrap_attributes=this._get_selection("wrap_attributes",["auto","force","force-aligned","force-expand-multiline","aligned-multiple","preserve","preserve-aligned"]),this.wrap_attributes_min_attrs=this._get_number("wrap_attributes_min_attrs",2),this.wrap_attributes_indent_size=this._get_number("wrap_attributes_indent_size",this.indent_size),this.extra_liners=this._get_array("extra_liners",["head","body","/html"]),this.inline=this._get_array("inline",["a","abbr","area","audio","b","bdi","bdo","br","button","canvas","cite","code","data","datalist","del","dfn","em","embed","i","iframe","img","input","ins","kbd","keygen","label","map","mark","math","meter","noscript","object","output","progress","q","ruby","s","samp","select","small","span","strong","sub","sup","svg","template","textarea","time","u","var","video","wbr","text","acronym","big","strike","tt"]),this.inline_custom_elements=this._get_boolean("inline_custom_elements",!0),this.void_elements=this._get_array("void_elements",["area","base","br","col","embed","hr","img","input","keygen","link","menuitem","meta","param","source","track","wbr","!doctype","?xml","basefont","isindex"]),this.unformatted=this._get_array("unformatted",[]),this.content_unformatted=this._get_array("content_unformatted",["pre","textarea"]),this.unformatted_content_delimiter=this._get_characters("unformatted_content_delimiter"),this.indent_scripts=this._get_selection("indent_scripts",["normal","keep","separate"])}return a.prototype=new i,mt.Options=a,mt}var Q={},Zt;function Yt(){if(Zt)return Q;Zt=1;var i=Y().Tokenizer,a=Y().TOKEN,r=Tt().Directives,t=ye().TemplatablePattern,n=tt().Pattern,_={TAG_OPEN:"TK_TAG_OPEN",TAG_CLOSE:"TK_TAG_CLOSE",CONTROL_FLOW_OPEN:"TK_CONTROL_FLOW_OPEN",CONTROL_FLOW_CLOSE:"TK_CONTROL_FLOW_CLOSE",ATTRIBUTE:"TK_ATTRIBUTE",EQUALS:"TK_EQUALS",VALUE:"TK_VALUE",COMMENT:"TK_COMMENT",TEXT:"TK_TEXT",UNKNOWN:"TK_UNKNOWN",START:a.START,RAW:a.RAW,EOF:a.EOF},d=new r(/<\!--/,/-->/),u=function(o,O){i.call(this,o,O),this._current_tag_name="";var y=new t(this._input).read_options(this._options),v=new n(this._input);if(this.__patterns={word:y.until(/[\n\r\t <]/),word_control_flow_close_excluded:y.until(/[\n\r\t <}]/),single_quote:y.until_after(/'/),double_quote:y.until_after(/"/),attribute:y.until(/[\n\r\t =>]|\/>/),element_name:y.until(/[\n\r\t >\/]/),angular_control_flow_start:v.matching(/\@[a-zA-Z]+[^({]*[({]/),handlebars_comment:v.starting_with(/{{!--/).until_after(/--}}/),handlebars:v.starting_with(/{{/).until_after(/}}/),handlebars_open:v.until(/[\n\r\t }]/),handlebars_raw_close:v.until(/}}/),comment:v.starting_with(/<!--/).until_after(/-->/),cdata:v.starting_with(/<!\[CDATA\[/).until_after(/]]>/),conditional_comment:v.starting_with(/<!\[/).until_after(/]>/),processing:v.starting_with(/<\?/).until_after(/\?>/)},this._options.indent_handlebars&&(this.__patterns.word=this.__patterns.word.exclude("handlebars"),this.__patterns.word_control_flow_close_excluded=this.__patterns.word_control_flow_close_excluded.exclude("handlebars")),this._unformatted_content_delimiter=null,this._options.unformatted_content_delimiter){var x=this._input.get_literal_regexp(this._options.unformatted_content_delimiter);this.__patterns.unformatted_content_delimiter=v.matching(x).until_after(x)}};return u.prototype=new i,u.prototype._is_comment=function(o){return!1},u.prototype._is_opening=function(o){return o.type===_.TAG_OPEN||o.type===_.CONTROL_FLOW_OPEN},u.prototype._is_closing=function(o,O){return o.type===_.TAG_CLOSE&&O&&((o.text===">"||o.text==="/>")&&O.text[0]==="<"||o.text==="}}"&&O.text[0]==="{"&&O.text[1]==="{")||o.type===_.CONTROL_FLOW_CLOSE&&o.text==="}"&&O.text.endsWith("{")},u.prototype._reset=function(){this._current_tag_name=""},u.prototype._get_next_token=function(o,O){var y=null;this._readWhitespace();var v=this._input.peek();return v===null?this._create_token(_.EOF,""):(y=y||this._read_open_handlebars(v,O),y=y||this._read_attribute(v,o,O),y=y||this._read_close(v,O),y=y||this._read_control_flows(v,O),y=y||this._read_raw_content(v,o,O),y=y||this._read_content_word(v,O),y=y||this._read_comment_or_cdata(v),y=y||this._read_processing(v),y=y||this._read_open(v,O),y=y||this._create_token(_.UNKNOWN,this._input.next()),y)},u.prototype._read_comment_or_cdata=function(o){var O=null,y=null,v=null;if(o==="<"){var x=this._input.peek(1);x==="!"&&(y=this.__patterns.comment.read(),y?(v=d.get_directives(y),v&&v.ignore==="start"&&(y+=d.readIgnored(this._input))):y=this.__patterns.cdata.read()),y&&(O=this._create_token(_.COMMENT,y),O.directives=v)}return O},u.prototype._read_processing=function(o){var O=null,y=null,v=null;if(o==="<"){var x=this._input.peek(1);(x==="!"||x==="?")&&(y=this.__patterns.conditional_comment.read(),y=y||this.__patterns.processing.read()),y&&(O=this._create_token(_.COMMENT,y),O.directives=v)}return O},u.prototype._read_open=function(o,O){var y=null,v=null;return(!O||O.type===_.CONTROL_FLOW_OPEN)&&o==="<"&&(y=this._input.next(),this._input.peek()==="/"&&(y+=this._input.next()),y+=this.__patterns.element_name.read(),v=this._create_token(_.TAG_OPEN,y)),v},u.prototype._read_open_handlebars=function(o,O){var y=null,v=null;return(!O||O.type===_.CONTROL_FLOW_OPEN)&&this._options.indent_handlebars&&o==="{"&&this._input.peek(1)==="{"&&(this._input.peek(2)==="!"?(y=this.__patterns.handlebars_comment.read(),y=y||this.__patterns.handlebars.read(),v=this._create_token(_.COMMENT,y)):(y=this.__patterns.handlebars_open.read(),v=this._create_token(_.TAG_OPEN,y))),v},u.prototype._read_control_flows=function(o,O){var y="",v=null;if(!this._options.templating.includes("angular")||!this._options.indent_handlebars)return v;if(o==="@"){if(y=this.__patterns.angular_control_flow_start.read(),y==="")return v;for(var x=y.endsWith("(")?1:0,R=0;!(y.endsWith("{")&&x===R);){var C=this._input.next();if(C===null)break;C==="("?x++:C===")"&&R++,y+=C}v=this._create_token(_.CONTROL_FLOW_OPEN,y)}else o==="}"&&O&&O.type===_.CONTROL_FLOW_OPEN&&(y=this._input.next(),v=this._create_token(_.CONTROL_FLOW_CLOSE,y));return v},u.prototype._read_close=function(o,O){var y=null,v=null;return O&&O.type===_.TAG_OPEN&&(O.text[0]==="<"&&(o===">"||o==="/"&&this._input.peek(1)===">")?(y=this._input.next(),o==="/"&&(y+=this._input.next()),v=this._create_token(_.TAG_CLOSE,y)):O.text[0]==="{"&&o==="}"&&this._input.peek(1)==="}"&&(this._input.next(),this._input.next(),v=this._create_token(_.TAG_CLOSE,"}}"))),v},u.prototype._read_attribute=function(o,O,y){var v=null,x="";if(y&&y.text[0]==="<")if(o==="=")v=this._create_token(_.EQUALS,this._input.next());else if(o==='"'||o==="'"){var R=this._input.next();o==='"'?R+=this.__patterns.double_quote.read():R+=this.__patterns.single_quote.read(),v=this._create_token(_.VALUE,R)}else x=this.__patterns.attribute.read(),x&&(O.type===_.EQUALS?v=this._create_token(_.VALUE,x):v=this._create_token(_.ATTRIBUTE,x));return v},u.prototype._is_content_unformatted=function(o){return this._options.void_elements.indexOf(o)===-1&&(this._options.content_unformatted.indexOf(o)!==-1||this._options.unformatted.indexOf(o)!==-1)},u.prototype._read_raw_content=function(o,O,y){var v="";if(y&&y.text[0]==="{")v=this.__patterns.handlebars_raw_close.read();else if(O.type===_.TAG_CLOSE&&O.opened.text[0]==="<"&&O.text[0]!=="/"){var x=O.opened.text.substr(1).toLowerCase();if(x==="script"||x==="style"){var R=this._read_comment_or_cdata(o);if(R)return R.type=_.TEXT,R;v=this._input.readUntil(new RegExp("</"+x+"[\\n\\r\\t ]*?>","ig"))}else this._is_content_unformatted(x)&&(v=this._input.readUntil(new RegExp("</"+x+"[\\n\\r\\t ]*?>","ig")))}return v?this._create_token(_.TEXT,v):null},u.prototype._read_content_word=function(o,O){var y="";if(this._options.unformatted_content_delimiter&&o===this._options.unformatted_content_delimiter[0]&&(y=this.__patterns.unformatted_content_delimiter.read()),y||(y=O&&O.type===_.CONTROL_FLOW_OPEN?this.__patterns.word_control_flow_close_excluded.read():this.__patterns.word.read()),y)return this._create_token(_.TEXT,y)},Q.Tokenizer=u,Q.TOKEN=_,Q}var Jt;function ti(){if(Jt)return gt;Jt=1;var i=xe().Options,a=At().Output,r=Yt().Tokenizer,t=Yt().TOKEN,n=/\r\n|[\r\n]/,_=/\r\n|[\r\n]/g,d=function(p,s){this.indent_level=0,this.alignment_size=0,this.max_preserve_newlines=p.max_preserve_newlines,this.preserve_newlines=p.preserve_newlines,this._output=new a(p,s)};d.prototype.current_line_has_match=function(p){return this._output.current_line.has_match(p)},d.prototype.set_space_before_token=function(p,s){this._output.space_before_token=p,this._output.non_breaking_space=s},d.prototype.set_wrap_point=function(){this._output.set_indent(this.indent_level,this.alignment_size),this._output.set_wrap_point()},d.prototype.add_raw_token=function(p){this._output.add_raw_token(p)},d.prototype.print_preserved_newlines=function(p){var s=0;p.type!==t.TEXT&&p.previous.type!==t.TEXT&&(s=p.newlines?1:0),this.preserve_newlines&&(s=p.newlines<this.max_preserve_newlines+1?p.newlines:this.max_preserve_newlines+1);for(var c=0;c<s;c++)this.print_newline(c>0);return s!==0},d.prototype.traverse_whitespace=function(p){return p.whitespace_before||p.newlines?(this.print_preserved_newlines(p)||(this._output.space_before_token=!0),!0):!1},d.prototype.previous_token_wrapped=function(){return this._output.previous_token_wrapped},d.prototype.print_newline=function(p){this._output.add_new_line(p)},d.prototype.print_token=function(p){p.text&&(this._output.set_indent(this.indent_level,this.alignment_size),this._output.add_token(p.text))},d.prototype.indent=function(){this.indent_level++},d.prototype.deindent=function(){this.indent_level>0&&(this.indent_level--,this._output.set_indent(this.indent_level,this.alignment_size))},d.prototype.get_full_indent=function(p){return p=this.indent_level+(p||0),p<1?"":this._output.get_indent_string(p)};var u=function(p){for(var s=null,c=p.next;c.type!==t.EOF&&p.closed!==c;){if(c.type===t.ATTRIBUTE&&c.text==="type"){c.next&&c.next.type===t.EQUALS&&c.next.next&&c.next.next.type===t.VALUE&&(s=c.next.next.text);break}c=c.next}return s},o=function(p,s){var c=null,k=null;return s.closed?(p==="script"?c="text/javascript":p==="style"&&(c="text/css"),c=u(s)||c,c.search("text/css")>-1?k="css":c.search(/module|((text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect))/)>-1?k="javascript":c.search(/(text|application|dojo)\/(x-)?(html)/)>-1?k="html":c.search(/test\/null/)>-1&&(k="null"),k):null};function O(p,s){return s.indexOf(p)!==-1}function y(p,s,c){this.parent=p||null,this.tag=s?s.tag_name:"",this.indent_level=c||0,this.parser_token=s||null}function v(p){this._printer=p,this._current_frame=null}v.prototype.get_parser_token=function(){return this._current_frame?this._current_frame.parser_token:null},v.prototype.record_tag=function(p){var s=new y(this._current_frame,p,this._printer.indent_level);this._current_frame=s},v.prototype._try_pop_frame=function(p){var s=null;return p&&(s=p.parser_token,this._printer.indent_level=p.indent_level,this._current_frame=p.parent),s},v.prototype._get_frame=function(p,s){for(var c=this._current_frame;c&&p.indexOf(c.tag)===-1;){if(s&&s.indexOf(c.tag)!==-1){c=null;break}c=c.parent}return c},v.prototype.try_pop=function(p,s){var c=this._get_frame([p],s);return this._try_pop_frame(c)},v.prototype.indent_to_tag=function(p){var s=this._get_frame(p);s&&(this._printer.indent_level=s.indent_level)};function x(p,s,c,k){this._source_text=p||"",s=s||{},this._js_beautify=c,this._css_beautify=k,this._tag_stack=null;var A=new i(s,"html");this._options=A,this._is_wrap_attributes_force=this._options.wrap_attributes.substr(0,5)==="force",this._is_wrap_attributes_force_expand_multiline=this._options.wrap_attributes==="force-expand-multiline",this._is_wrap_attributes_force_aligned=this._options.wrap_attributes==="force-aligned",this._is_wrap_attributes_aligned_multiple=this._options.wrap_attributes==="aligned-multiple",this._is_wrap_attributes_preserve=this._options.wrap_attributes.substr(0,8)==="preserve",this._is_wrap_attributes_preserve_aligned=this._options.wrap_attributes==="preserve-aligned"}x.prototype.beautify=function(){if(this._options.disabled)return this._source_text;var p=this._source_text,s=this._options.eol;this._options.eol==="auto"&&(s=`
`,p&&n.test(p)&&(s=p.match(n)[0])),p=p.replace(_,`
`);var c=p.match(/^[\t ]*/)[0],k={text:"",type:""},A=new R,T=new d(this._options,c),h=new r(p,this._options).tokenize();this._tag_stack=new v(T);for(var f=null,l=h.next();l.type!==t.EOF;)l.type===t.TAG_OPEN||l.type===t.COMMENT?(f=this._handle_tag_open(T,l,A,k,h),A=f):l.type===t.ATTRIBUTE||l.type===t.EQUALS||l.type===t.VALUE||l.type===t.TEXT&&!A.tag_complete?f=this._handle_inside_tag(T,l,A,k):l.type===t.TAG_CLOSE?f=this._handle_tag_close(T,l,A):l.type===t.TEXT?f=this._handle_text(T,l,A):l.type===t.CONTROL_FLOW_OPEN?f=this._handle_control_flow_open(T,l):l.type===t.CONTROL_FLOW_CLOSE?f=this._handle_control_flow_close(T,l):T.add_raw_token(l),k=f,l=h.next();var b=T._output.get_code(s);return b},x.prototype._handle_control_flow_open=function(p,s){var c={text:s.text,type:s.type};return p.set_space_before_token(s.newlines||s.whitespace_before!=="",!0),s.newlines?p.print_preserved_newlines(s):p.set_space_before_token(s.newlines||s.whitespace_before!=="",!0),p.print_token(s),p.indent(),c},x.prototype._handle_control_flow_close=function(p,s){var c={text:s.text,type:s.type};return p.deindent(),s.newlines?p.print_preserved_newlines(s):p.set_space_before_token(s.newlines||s.whitespace_before!=="",!0),p.print_token(s),c},x.prototype._handle_tag_close=function(p,s,c){var k={text:s.text,type:s.type};return p.alignment_size=0,c.tag_complete=!0,p.set_space_before_token(s.newlines||s.whitespace_before!=="",!0),c.is_unformatted?p.add_raw_token(s):(c.tag_start_char==="<"&&(p.set_space_before_token(s.text[0]==="/",!0),this._is_wrap_attributes_force_expand_multiline&&c.has_wrapped_attrs&&p.print_newline(!1)),p.print_token(s)),c.indent_content&&!(c.is_unformatted||c.is_content_unformatted)&&(p.indent(),c.indent_content=!1),!c.is_inline_element&&!(c.is_unformatted||c.is_content_unformatted)&&p.set_wrap_point(),k},x.prototype._handle_inside_tag=function(p,s,c,k){var A=c.has_wrapped_attrs,T={text:s.text,type:s.type};return p.set_space_before_token(s.newlines||s.whitespace_before!=="",!0),c.is_unformatted?p.add_raw_token(s):c.tag_start_char==="{"&&s.type===t.TEXT?p.print_preserved_newlines(s)?(s.newlines=0,p.add_raw_token(s)):p.print_token(s):(s.type===t.ATTRIBUTE?p.set_space_before_token(!0):(s.type===t.EQUALS||s.type===t.VALUE&&s.previous.type===t.EQUALS)&&p.set_space_before_token(!1),s.type===t.ATTRIBUTE&&c.tag_start_char==="<"&&((this._is_wrap_attributes_preserve||this._is_wrap_attributes_preserve_aligned)&&(p.traverse_whitespace(s),A=A||s.newlines!==0),this._is_wrap_attributes_force&&c.attr_count>=this._options.wrap_attributes_min_attrs&&(k.type!==t.TAG_OPEN||this._is_wrap_attributes_force_expand_multiline)&&(p.print_newline(!1),A=!0)),p.print_token(s),A=A||p.previous_token_wrapped(),c.has_wrapped_attrs=A),T},x.prototype._handle_text=function(p,s,c){var k={text:s.text,type:"TK_CONTENT"};return c.custom_beautifier_name?this._print_custom_beatifier_text(p,s,c):c.is_unformatted||c.is_content_unformatted?p.add_raw_token(s):(p.traverse_whitespace(s),p.print_token(s)),k},x.prototype._print_custom_beatifier_text=function(p,s,c){var k=this;if(s.text!==""){var A=s.text,T,h=1,f="",l="";c.custom_beautifier_name==="javascript"&&typeof this._js_beautify=="function"?T=this._js_beautify:c.custom_beautifier_name==="css"&&typeof this._css_beautify=="function"?T=this._css_beautify:c.custom_beautifier_name==="html"&&(T=function(E,S){var P=new x(E,S,k._js_beautify,k._css_beautify);return P.beautify()}),this._options.indent_scripts==="keep"?h=0:this._options.indent_scripts==="separate"&&(h=-p.indent_level);var b=p.get_full_indent(h);if(A=A.replace(/\n[ \t]*$/,""),c.custom_beautifier_name!=="html"&&A[0]==="<"&&A.match(/^(<!--|<!\[CDATA\[)/)){var e=/^(<!--[^\n]*|<!\[CDATA\[)(\n?)([ \t\n]*)([\s\S]*)(-->|]]>)$/.exec(A);if(!e){p.add_raw_token(s);return}f=b+e[1]+`
`,A=e[4],e[5]&&(l=b+e[5]),A=A.replace(/\n[ \t]*$/,""),(e[2]||e[3].indexOf(`
`)!==-1)&&(e=e[3].match(/[ \t]+$/),e&&(s.whitespace_before=e[0]))}if(A)if(T){var g=function(){this.eol=`
`};g.prototype=this._options.raw_options;var m=new g;A=T(b+A,m)}else{var w=s.whitespace_before;w&&(A=A.replace(new RegExp(`
(`+w+")?","g"),`
`)),A=b+A.replace(/\n/g,`
`+b)}f&&(A?A=f+A+`
`+l:A=f+l),p.print_newline(!1),A&&(s.text=A,s.whitespace_before="",s.newlines=0,p.add_raw_token(s),p.print_newline(!0))}},x.prototype._handle_tag_open=function(p,s,c,k,A){var T=this._get_tag_open_token(s);if((c.is_unformatted||c.is_content_unformatted)&&!c.is_empty_element&&s.type===t.TAG_OPEN&&!T.is_start_tag?(p.add_raw_token(s),T.start_tag_token=this._tag_stack.try_pop(T.tag_name)):(p.traverse_whitespace(s),this._set_tag_position(p,s,T,c,k),T.is_inline_element||p.set_wrap_point(),p.print_token(s)),T.is_start_tag&&this._is_wrap_attributes_force){var h=0,f;do f=A.peek(h),f.type===t.ATTRIBUTE&&(T.attr_count+=1),h+=1;while(f.type!==t.EOF&&f.type!==t.TAG_CLOSE)}return(this._is_wrap_attributes_force_aligned||this._is_wrap_attributes_aligned_multiple||this._is_wrap_attributes_preserve_aligned)&&(T.alignment_size=s.text.length+1),!T.tag_complete&&!T.is_unformatted&&(p.alignment_size=T.alignment_size),T};var R=function(p,s){if(this.parent=p||null,this.text="",this.type="TK_TAG_OPEN",this.tag_name="",this.is_inline_element=!1,this.is_unformatted=!1,this.is_content_unformatted=!1,this.is_empty_element=!1,this.is_start_tag=!1,this.is_end_tag=!1,this.indent_content=!1,this.multiline_content=!1,this.custom_beautifier_name=null,this.start_tag_token=null,this.attr_count=0,this.has_wrapped_attrs=!1,this.alignment_size=0,this.tag_complete=!1,this.tag_start_char="",this.tag_check="",!s)this.tag_complete=!0;else{var c;this.tag_start_char=s.text[0],this.text=s.text,this.tag_start_char==="<"?(c=s.text.match(/^<([^\s>]*)/),this.tag_check=c?c[1]:""):(c=s.text.match(/^{{~?(?:[\^]|#\*?)?([^\s}]+)/),this.tag_check=c?c[1]:"",(s.text.startsWith("{{#>")||s.text.startsWith("{{~#>"))&&this.tag_check[0]===">"&&(this.tag_check===">"&&s.next!==null?this.tag_check=s.next.text.split(" ")[0]:this.tag_check=s.text.split(">")[1])),this.tag_check=this.tag_check.toLowerCase(),s.type===t.COMMENT&&(this.tag_complete=!0),this.is_start_tag=this.tag_check.charAt(0)!=="/",this.tag_name=this.is_start_tag?this.tag_check:this.tag_check.substr(1),this.is_end_tag=!this.is_start_tag||s.closed&&s.closed.text==="/>";var k=2;this.tag_start_char==="{"&&this.text.length>=3&&this.text.charAt(2)==="~"&&(k=3),this.is_end_tag=this.is_end_tag||this.tag_start_char==="{"&&(this.text.length<3||/[^#\^]/.test(this.text.charAt(k)))}};x.prototype._get_tag_open_token=function(p){var s=new R(this._tag_stack.get_parser_token(),p);return s.alignment_size=this._options.wrap_attributes_indent_size,s.is_end_tag=s.is_end_tag||O(s.tag_check,this._options.void_elements),s.is_empty_element=s.tag_complete||s.is_start_tag&&s.is_end_tag,s.is_unformatted=!s.tag_complete&&O(s.tag_check,this._options.unformatted),s.is_content_unformatted=!s.is_empty_element&&O(s.tag_check,this._options.content_unformatted),s.is_inline_element=O(s.tag_name,this._options.inline)||this._options.inline_custom_elements&&s.tag_name.includes("-")||s.tag_start_char==="{",s},x.prototype._set_tag_position=function(p,s,c,k,A){if(c.is_empty_element||(c.is_end_tag?c.start_tag_token=this._tag_stack.try_pop(c.tag_name):(this._do_optional_end_element(c)&&(c.is_inline_element||p.print_newline(!1)),this._tag_stack.record_tag(c),(c.tag_name==="script"||c.tag_name==="style")&&!(c.is_unformatted||c.is_content_unformatted)&&(c.custom_beautifier_name=o(c.tag_check,s)))),O(c.tag_check,this._options.extra_liners)&&(p.print_newline(!1),p._output.just_added_blankline()||p.print_newline(!0)),c.is_empty_element){if(c.tag_start_char==="{"&&c.tag_check==="else"){this._tag_stack.indent_to_tag(["if","unless","each"]),c.indent_content=!0;var T=p.current_line_has_match(/{{#if/);T||p.print_newline(!1)}c.tag_name==="!--"&&A.type===t.TAG_CLOSE&&k.is_end_tag&&c.text.indexOf(`
`)===-1||(c.is_inline_element||c.is_unformatted||p.print_newline(!1),this._calcluate_parent_multiline(p,c))}else if(c.is_end_tag){var h=!1;h=c.start_tag_token&&c.start_tag_token.multiline_content,h=h||!c.is_inline_element&&!(k.is_inline_element||k.is_unformatted)&&!(A.type===t.TAG_CLOSE&&c.start_tag_token===k)&&A.type!=="TK_CONTENT",(c.is_content_unformatted||c.is_unformatted)&&(h=!1),h&&p.print_newline(!1)}else c.indent_content=!c.custom_beautifier_name,c.tag_start_char==="<"&&(c.tag_name==="html"?c.indent_content=this._options.indent_inner_html:c.tag_name==="head"?c.indent_content=this._options.indent_head_inner_html:c.tag_name==="body"&&(c.indent_content=this._options.indent_body_inner_html)),!(c.is_inline_element||c.is_unformatted)&&(A.type!=="TK_CONTENT"||c.is_content_unformatted)&&p.print_newline(!1),this._calcluate_parent_multiline(p,c)},x.prototype._calcluate_parent_multiline=function(p,s){s.parent&&p._output.just_added_newline()&&!((s.is_inline_element||s.is_unformatted)&&s.parent.is_inline_element)&&(s.parent.multiline_content=!0)};var C=["address","article","aside","blockquote","details","div","dl","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hr","main","menu","nav","ol","p","pre","section","table","ul"],L=["a","audio","del","ins","map","noscript","video"];return x.prototype._do_optional_end_element=function(p){var s=null;if(!(p.is_empty_element||!p.is_start_tag||!p.parent)){if(p.tag_name==="body")s=s||this._tag_stack.try_pop("head");else if(p.tag_name==="li")s=s||this._tag_stack.try_pop("li",["ol","ul","menu"]);else if(p.tag_name==="dd"||p.tag_name==="dt")s=s||this._tag_stack.try_pop("dt",["dl"]),s=s||this._tag_stack.try_pop("dd",["dl"]);else if(p.parent.tag_name==="p"&&C.indexOf(p.tag_name)!==-1){var c=p.parent.parent;(!c||L.indexOf(c.tag_name)===-1)&&(s=s||this._tag_stack.try_pop("p"))}else p.tag_name==="rp"||p.tag_name==="rt"?(s=s||this._tag_stack.try_pop("rt",["ruby","rtc"]),s=s||this._tag_stack.try_pop("rp",["ruby","rtc"])):p.tag_name==="optgroup"?s=s||this._tag_stack.try_pop("optgroup",["select"]):p.tag_name==="option"?s=s||this._tag_stack.try_pop("option",["select","datalist","optgroup"]):p.tag_name==="colgroup"?s=s||this._tag_stack.try_pop("caption",["table"]):p.tag_name==="thead"?(s=s||this._tag_stack.try_pop("caption",["table"]),s=s||this._tag_stack.try_pop("colgroup",["table"])):p.tag_name==="tbody"||p.tag_name==="tfoot"?(s=s||this._tag_stack.try_pop("caption",["table"]),s=s||this._tag_stack.try_pop("colgroup",["table"]),s=s||this._tag_stack.try_pop("thead",["table"]),s=s||this._tag_stack.try_pop("tbody",["table"])):p.tag_name==="tr"?(s=s||this._tag_stack.try_pop("caption",["table"]),s=s||this._tag_stack.try_pop("colgroup",["table"]),s=s||this._tag_stack.try_pop("tr",["table","thead","tbody","tfoot"])):(p.tag_name==="th"||p.tag_name==="td")&&(s=s||this._tag_stack.try_pop("td",["table","thead","tbody","tfoot","tr"]),s=s||this._tag_stack.try_pop("th",["table","thead","tbody","tfoot","tr"]));return p.parent=this._tag_stack.get_parser_token(),s}},gt.Beautifier=x,gt}var te;function ei(){if(te)return G.exports;te=1;var i=ti().Beautifier,a=xe().Options;function r(t,n,_,d){var u=new i(t,n,_,d);return u.beautify()}return G.exports=r,G.exports.defaultOptions=function(){return new a},G.exports}var ee;function ii(){if(ee)return $;ee=1;var i=Ze(),a=Je(),r=ei();function t(n,_,d,u){return d=d||i,u=u||a,r(n,_,d,u)}return t.defaultOptions=r.defaultOptions,$.js=i,$.css=a,$.html=t,$}(function(i){function a(r,t,n){var _=function(d,u){return r.js_beautify(d,u)};return _.js=r.js_beautify,_.css=t.css_beautify,_.html=n.html_beautify,_.js_beautify=r.js_beautify,_.css_beautify=t.css_beautify,_.html_beautify=n.html_beautify,_}(function(r){var t=ii();t.js_beautify=t.js,t.css_beautify=t.css,t.html_beautify=t.html,r.exports=a(t,t,t)})(i)})(de);var fi=de.exports;export{pi as C,li as F,oi as H,hi as M,si as R,ui as V,fi as a,Xe as b,ri as c,_i as f,ai as h,it as j,wt as r,ni as s};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
