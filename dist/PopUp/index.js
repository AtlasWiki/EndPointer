import"../assets/modulepreload-polyfill.B5Qt9EMX.js";import{r as p,b as n,j as e}from"../assets/index.1CxfGuLD.js";import{c as F,H as E,R as S,a as L,U as A}from"../assets/urls.C53Aa3qF.js";const P="/assets/EndPointer.png";function k(){const[l,o]=p.useState({urlParser:!1,urlCount:0,jsFileCount:0,scopes:[],reqAmt:1}),x=p.useRef(null);p.useEffect(()=>{u();const r=c=>{c.autoParserEnabled&&o(i=>({...i,urlParser:c.autoParserEnabled.newValue}))};return n.storage.onChanged.addListener(r),()=>{n.storage.onChanged.removeListener(r)}},[]);const u=async()=>{try{const[r,c,i]=await Promise.all([n.runtime.sendMessage({action:"getAutoParserState"}),n.storage.local.get("scope"),n.storage.local.get("requests")]);o(N=>({...N,urlParser:r.state??!1,scopes:c.scope||[],reqAmt:i.requests||1}));const w=await n.tabs.query({active:!0,currentWindow:!0});if(w[0]?.id){const[N,C]=await Promise.all([n.tabs.sendMessage(w[0].id,{action:"countURLs"}),n.tabs.sendMessage(w[0].id,{action:"countJSFiles"})]);o(y=>({...y,urlCount:N.count??0,jsFileCount:C.count??0}))}}catch(r){console.error("Failed to update state:",r)}},t=async(r,c)=>{try{const i=await n.tabs.query({active:!0,currentWindow:!0});if(i[0]?.id){const w=await n.tabs.sendMessage(i[0].id,{action:r,...c});if(!w.success)throw new Error(w.error);await u()}}catch(i){console.error(`Error in ${r}:`,i)}},s=()=>t("reparse"),a=()=>t("clearURLs"),h=()=>t("countURLs");p.useEffect(()=>{const r=()=>{h()};return n.storage.onChanged.addListener(r),()=>{n.storage.onChanged.removeListener(r)}},[]);const d=async()=>{const r=!l.urlParser;(await n.runtime.sendMessage({action:"setAutoParserState",state:r})).success&&o(i=>({...i,urlParser:r}))},m=()=>{const r=x.current?.value;r&&(o(c=>{const i=[...c.scopes,r];return n.storage.local.set({scope:i}),{...c,scopes:i}}),x.current&&(x.current.value=""))},b=r=>{o(c=>{const i=c.scopes.filter(w=>w!==r);return n.storage.local.set({scope:i}),{...c,scopes:i}})},f=r=>{const c=Number(r.target.value);o(i=>({...i,reqAmt:c})),n.storage.local.set({requests:c}),console.log(`set requests to ${c}`)},g=async()=>{await n.storage.local.clear(),alert("Cache cleared"),u()},j=()=>{n.storage.local.set({scope:[]}),o(r=>({...r,scopes:[]}))},R=({state:r})=>e.jsx("div",{className:"flex",children:e.jsxs("div",{className:"flex items-center",children:[e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsx("path",{fill:r?"#82e467":"#e63946",d:"M12 18a6 6 0 1 0 0-12a6 6 0 0 0 0 12"})}),e.jsx("span",{className:r?"text-white  font-semibold":"text-customFont  font-semibold",children:r?"ON":"OFF"})]})}),v=({scope:r,onRemove:c})=>e.jsxs("div",{className:"flex justify-between items-center gap-3",children:[e.jsx("span",{className:"text-white py-1 px-1",children:r}),e.jsx("button",{className:"text-center pl-1 bg-transparent text-rose-500",onClick:c,children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsx("path",{fill:"#df4950",d:"M19 12.998H5v-2h14z"})})})]});return e.jsxs("div",{className:"bg-customBg w-full md:h-screen m-0  md:justify-center py-5 px-3",children:[e.jsxs("div",{className:"text-center",children:[e.jsx("div",{className:"flex",children:e.jsxs("div",{className:"flex gap-3 justify-center mb-5",children:[e.jsx("img",{src:P,style:{width:"12%",height:"77%"}}),e.jsx("h1",{className:"text-3xl text-customRed font-bold md:text-6xl mb-1",children:"EndPointer"})]})}),e.jsxs("div",{className:"flex flex-col justify-center gap-2 items-center w-full mx-0",children:[e.jsxs("div",{className:"flex flex-col gap-2 md:gap-5 w-full",children:[e.jsxs("button",{className:" w-full font-semibold border-2 rounded-sm p-2 border-customFont bg-gradient-to-r from-customFont to-customBg text-white",children:[e.jsx("span",{className:"text-white",children:"URLs"})," (",l.urlCount,")"]}),e.jsxs("div",{className:"text-md flex w-full gap-2 ",children:[e.jsx("button",{className:" p-2 rounded-sm w-[50%] border-2 border-customFont  bg-customFont flex justify-center items-center",onClick:a,children:e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"20",height:"20",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"none",stroke:"#e96c4c",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"2",d:"M4 7h16m-10 4v6m4-6v6M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2l1-12M9 7V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3"}),e.jsx("title",{children:"Delete URLs"})]})}),e.jsx("button",{className:" p-2 rounded-sm w-[50%] bg-customBg border-2 border-customFont flex justify-center items-center",onClick:g,children:e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"#FFFFFF",d:"M5.505 9.117a7.7 7.7 0 0 1-1.497-.852V12c0 .524.473 1.23 1.8 1.883c1.267.625 3.085 1.071 5.18 1.182a.76.76 0 0 1-.08 1.517c-2.242-.118-4.274-.598-5.772-1.336a7.3 7.3 0 0 1-1.128-.68V18.3c0 .282.127.61.476.973c.352.366.899.732 1.633 1.055c1.466.645 3.545 1.063 5.881 1.063q.867 0 1.683-.074a.76.76 0 0 1 .135 1.513a21 21 0 0 1-1.818.08c-2.496 0-4.792-.443-6.493-1.192c-.849-.374-1.584-.838-2.117-1.393c-.536-.558-.9-1.244-.9-2.025V5.7c0-.782.364-1.467.9-2.025c.533-.555 1.268-1.02 2.117-1.393c1.7-.749 3.997-1.193 6.493-1.193s4.793.444 6.493 1.193c.85.373 1.585.838 2.117 1.393c.537.558.9 1.243.9 2.025s-.363 1.467-.9 2.025c-.532.554-1.267 1.02-2.117 1.393c-1.7.748-3.996 1.192-6.493 1.192c-2.496 0-4.792-.444-6.493-1.192Zm-1.021-4.39c-.35.362-.476.69-.476.972s.127.61.476.972c.352.367.899.732 1.633 1.055c1.466.646 3.545 1.064 5.881 1.064s4.415-.418 5.882-1.064c.734-.323 1.28-.688 1.633-1.055c.35-.363.476-.69.476-.972s-.127-.61-.476-.973c-.353-.367-.9-.732-1.633-1.055c-1.467-.645-3.545-1.063-5.882-1.063s-4.415.418-5.88 1.063c-.735.323-1.282.688-1.634 1.055Z"}),e.jsx("path",{fill:"#FFFFFF",d:"M21.425 11.11a.5.5 0 0 0-.881-.418l-5.438 6.937a.5.5 0 0 0 .394.808h3.268l-.945 4.46a.5.5 0 0 0 .888.405l4.688-6.188a.5.5 0 0 0-.399-.802h-2.745z"}),e.jsx("title",{children:"Delete Cache"})]})})]})]}),e.jsxs("div",{className:"flex w-full mb-3 gap-2 justify-content items-center",children:[e.jsx("a",{href:document.location.origin+"/PopUp/popup.html#urls",target:"_blank",className:" p-2 rounded-sm w-[50%] bg-customFont border-2 border-customFont flex justify-center items-center text-white",children:"Panel"}),e.jsx("button",{className:" p-2 rounded-sm w-[50%] bg-customBg border-2 text-white border-customFont flex justify-center items-center",onClick:s,children:"REPARSE"})]})]})]}),e.jsxs("div",{className:"w-full text-center flex flex-col justify-center items-center",children:[e.jsx("h1",{className:"text-2xl text-customRed font-semibold mb-2",children:"Auto Parser"}),e.jsx("p",{className:"text-white mb-2",children:"Auto parses after page load"}),e.jsx("div",{className:"mb-2",children:e.jsx("button",{className:"bg-customBg border-2 border-customBg p-2",onClick:d,children:e.jsx(R,{state:l.urlParser})})})]}),e.jsxs("div",{className:"w-full text-center flex flex-col justify-center items-center",children:[e.jsx("h1",{className:"text-2xl text-customRed font-semibold mb-2",children:"Concurrent Requests"}),e.jsx("p",{className:"text-white",children:"A request of 1 is recommended for higher accuracy when dealing with big web apps with many dynamic js files"}),e.jsxs("div",{className:"mb-3",children:[e.jsx("div",{className:"mt-5 mb-1",children:e.jsx("span",{className:"w-full py-1 px-3 text-white bg-customFont font-semibold rounded-sm",children:l.reqAmt})}),e.jsx("input",{type:"range",min:"1",max:"10",value:l.reqAmt,onChange:f,className:"mt-1 w-64 h-2 mb-3 bg-customFont rounded-lg appearance-none cursor-pointer"})]})]}),e.jsxs("div",{className:"w-full text-center flex flex-col justify-center items-center",children:[e.jsx("h1",{className:"text-2xl text-customRed font-semibold mb-2",children:"SCOPE"}),e.jsxs("div",{className:"flex gap-0.5",children:[e.jsx("p",{className:"text-white mb-3",children:"Keep scope empty if you want to parse from all scopes"}),e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"12",viewBox:"0 0 16 16",children:[e.jsx("path",{fill:"#615c5c",d:"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.93-9.412l-1 4.705c-.07.34.029.533.304.533c.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598c-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081l.082-.381l2.29-.287zM8 5.5a1 1 0 1 1 0-2a1 1 0 0 1 0 2"}),e.jsx("title",{children:"You can either specify SLD + TLD (example.com) or subdomains (www.example.com). For example, example.com would cover all subdomains (all other hosts belonging to example.com like help.example.com) while www.example.com only covers one host/domain. Or scope can be left empty to parse all web apps you go to."})]})]}),e.jsxs("div",{className:"flex items-center justify-center w-full gap-0.5",children:[e.jsx("input",{type:"text",ref:x,className:"w-full border-gray-400/60 text-gray-400/60 outline-none border-2 py-1 rounded-sm px-2 bg-transparent",placeholder:"example.com or www.example.com"}),e.jsx("button",{className:"bg-transparent text-xl text-customFont rounded-sm py-1 px-2 font-bold",onClick:m,children:"+"})]}),e.jsx("div",{className:"flex w-full justify-between gap-2",children:e.jsxs("div",{className:"flex mt-5 w-full text-center border-2 border-gray-400/60 overflow-auto h-20 pb-5 rounded-md container",children:[e.jsx("div",{className:"mt-5 flex flex-col px-1",children:l.scopes.map((r,c)=>e.jsx(v,{scope:r,onRemove:()=>b(r)},c))}),e.jsx("button",{className:"mt-2 bg-transparent deleteIcon ",onClick:j,children:e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"#e96c4c",d:"M19 4h-3.5l-1-1h-5l-1 1H5v2h14M6 19a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7H6z"}),e.jsx("title",{children:"Clear All"})]})})]})})]}),e.jsx("div",{children:e.jsxs("p",{className:"text-customFont mt-8 mb-5 md:text-lg",children:["An endpoint parser and extractor with many flexible features by",e.jsxs("span",{className:"text-white",children:[" ",e.jsx("a",{target:"_blank",href:"https://www.linkedin.com/in/nathan-w-76ba78202/",children:"  AtlasWiki/mrunoriginal "})]})," and"," ",e.jsx("span",{className:"text-white",children:e.jsx("a",{href:"https://www.linkedin.com/in/kristian-alex-kelly/",children:"LordCat"})})," | Designed by ",e.jsx("span",{className:"text-white",children:e.jsx("a",{href:"https://www.linkedin.com/in/mahenoor-salat/",children:"Mahenoor"})})]})}),e.jsx("div",{className:"flex gap-2 justify-center items-center",children:e.jsx("a",{href:"https://github.com/AtlasWiki/endPointer/",target:"_blank",children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"40",height:"34",viewBox:"0 0 24 24",children:e.jsx("path",{fill:"#FFFFFF",d:"M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33s1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2"})})})})]})}function M(){const[l,o]=p.useState([]),x=t=>{let s;const a=t.webpage.replace(/\/$/,"").split("#")[0];return t.url&&(t.url.startsWith("http://")||t.url.startsWith("https://"))?s=t.url:t.url.startsWith("/")?s=a+t.url:s=a+"/"+t.url,s=s.replace(/([^:]\/)\/+/g,"$1"),s},u=()=>{const t=l.map(x).join(`
`),s=new Blob([t],{type:"text/plain"}),a=document.createElement("a");a.href=URL.createObjectURL(s),a.download="urls.txt",a.click()};return p.useEffect(()=>{const t=()=>{let a=[];n.storage.local.get("URL-PARSER").then(h=>{const d=h["URL-PARSER"];Object.keys(d).forEach(m=>{if(m!=="current"){const b=d[m].currPage,f=d[m].externalJSFiles;a.push(...b.map(g=>({url:g,foundAt:decodeURIComponent(m),webpage:decodeURIComponent(m)}))),Object.entries(f).forEach(([g,j])=>{const R=decodeURIComponent(g);a.push(...j.map(v=>({url:v,foundAt:R,webpage:decodeURIComponent(m)})))})}}),o(a)})};t();const s=a=>{a["URL-PARSER"]&&t()};return n.storage.onChanged.addListener(s),()=>{n.storage.onChanged.removeListener(s)}},[]),e.jsxs("div",{className:"mt-2 ml-1",children:[e.jsx("button",{onClick:u,className:"mt-4 p-2 text-white bg-transparent border border-gray-500 mb-5 rounded",children:"Download URLs as .txt"}),e.jsx("pre",{className:"bg-gray-500 p-2 mb-4",children:`
          Showing modified relative paths (format: root webpage + relative paths)
          Example: https://www.example.com + /help: https://www.example.com/help
          and absolute urls
          `}),l.map((t,s)=>e.jsx("p",{className:"",children:x(t)},s))]})}function q(){const[l,o]=p.useState([]),x=t=>{let s;const a=t.webpage.replace(/\/$/,"").split("#")[0];return t.url&&(t.url.startsWith("http://")||t.url.startsWith("https://"))?s=t.url:t.url.startsWith("/")?s=a+t.url:s=a+"/"+t.url,s=s.replace(/([^:]\/)\/+/g,"$1"),s},u=()=>{const t=`endpoint,parsed from,root webpage
`,s=l.map(d=>`${x(d)},${d.foundAt},${d.webpage}`).join(`
`),a=new Blob([t+s],{type:"text/csv"}),h=document.createElement("a");h.href=URL.createObjectURL(a),h.download="urls.csv",h.click()};return p.useEffect(()=>{const t=()=>{let a=[];n.storage.local.get("URL-PARSER").then(h=>{const d=h["URL-PARSER"];Object.keys(d).forEach(m=>{if(m!=="current"){const b=d[m].currPage,f=d[m].externalJSFiles;a.push(...b.map(g=>({url:g,foundAt:decodeURIComponent(m),webpage:decodeURIComponent(m)}))),Object.entries(f).forEach(([g,j])=>{const R=decodeURIComponent(g);a.push(...j.map(v=>({url:v,foundAt:R,webpage:decodeURIComponent(m)})))})}}),o(a)})};t();const s=a=>{a["URL-PARSER"]&&t()};return n.storage.onChanged.addListener(s),()=>{n.storage.onChanged.removeListener(s)}},[]),e.jsxs("div",{className:"mt-2 ml-1",children:[e.jsx("button",{onClick:u,className:"mt-4 p-2 text-white bg-transparent border border-gray-500 mb-5 rounded",children:"Download URLs as .csv"}),e.jsx("pre",{className:"bg-gray-500 p-2 mb-4",children:"endpoint,parsed from,root webpage"}),e.jsx("pre",{className:"text-md p-2",children:l.map((t,s)=>`${x(t)},${t.foundAt},${t.webpage}`).join(`
`)})]})}function B(){const[l,o]=p.useState([]),x=()=>{const u=l.map(a=>a.url).join(`
`),t=new Blob([u],{type:"text/plain"}),s=document.createElement("a");s.href=URL.createObjectURL(t),s.download="urls.txt",s.click()};return p.useEffect(()=>{const u=()=>{let s=[];n.storage.local.get("URL-PARSER").then(a=>{const h=a["URL-PARSER"];Object.keys(h).forEach(d=>{if(d!=="current"){const m=h[d].currPage,b=h[d].externalJSFiles;s.push(...m.map(f=>({url:f}))),Object.values(b).forEach(f=>{s.push(...f.map(g=>({url:g})))})}}),o(s)})};u();const t=s=>{s["URL-PARSER"]&&u()};return n.storage.onChanged.addListener(t),()=>{n.storage.onChanged.removeListener(t)}},[]),e.jsxs("div",{className:"mt-2 ml-1",children:[e.jsx("button",{onClick:x,className:"mt-4 p-2 text-white bg-transparent border border-gray-500 mb-5 rounded",children:"Download URLs as .txt"}),e.jsx("pre",{className:"bg-gray-500 p-2 mb-4",children:"showing umodified relative paths and absolute paths"}),l.map((u,t)=>e.jsx("p",{className:"",children:u.url},t))]})}function D(){const[l,o]=p.useState("txt");return e.jsxs("div",{children:[e.jsxs("div",{className:"flex",children:[e.jsx("button",{className:`px-10 py-2 font-semibold ${l=="txt"?"text-purple-500 bg-black":""}`,onClick:()=>o("txt"),children:"TXT"}),e.jsx("button",{className:`px-10 py-2 font-semibold ${l=="csv"?"text-purple-500 bg-black":""}`,onClick:()=>o("csv"),children:"CSV"}),e.jsx("button",{className:`px-10 py-2 font-semibold ${l=="unmodified"?"text-purple-500 bg-black":""}`,onClick:()=>o("unmodified"),children:"UNMODIFIED"})]}),e.jsx("div",{className:"py-1"}),l==="txt"&&e.jsx(M,{}),l==="csv"&&e.jsx(q,{}),l==="unmodified"&&e.jsx(B,{})]})}const U=document.getElementById("root");U?F(U).render(e.jsx(p.StrictMode,{children:e.jsx(E,{children:e.jsxs(S,{children:[e.jsx(L,{path:"",element:e.jsx(k,{})}),e.jsx(L,{path:"/urls",element:e.jsx(A,{})}),e.jsx(L,{path:"/urls/output",element:e.jsx(D,{})})]})})})):console.error("Root element not found");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2ljb25zL0VuZFBvaW50ZXIucG5nIiwiLi4vLi4vc3JjL1BvcFVwL1BvcFVwQXBwLnRzeCIsIi4uLy4uL3NyYy9yb3V0ZXMvdXJscy1wbGFpbi50c3giLCIuLi8uLi9zcmMvcm91dGVzL3VybHMtY3N2LnRzeCIsIi4uLy4uL3NyYy9yb3V0ZXMvdXJscy11bm1vZGlmaWVkLnRzeCIsIi4uLy4uL3NyYy9yb3V0ZXMvdXJscy1vdXRwdXQudHN4IiwiLi4vLi4vc3JjL1BvcFVwL1BvcFVwUm91dGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIl9fVklURV9BU1NFVF9fQkhza1RRYmNfX1wiIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgYnJvd3NlciBmcm9tIFwid2ViZXh0ZW5zaW9uLXBvbHlmaWxsXCI7XHJcbmltcG9ydCBcIi4vQXBwLmNzc1wiO1xyXG5pbXBvcnQgeyBNZXNzYWdlUmVzcG9uc2UgfSBmcm9tIFwiLi4vY29uc3RhbnRzL21lc3NhZ2VfdHlwZXNcIjtcclxuaW1wb3J0IExvZ28gZnJvbSBcIi4uLy4uL2Rpc3QvaWNvbnMvRW5kUG9pbnRlci5wbmdcIjtcclxuXHJcbmludGVyZmFjZSBBcHBTdGF0ZSB7XHJcbiAgdXJsUGFyc2VyOiBib29sZWFuO1xyXG4gIHVybENvdW50OiBudW1iZXI7XHJcbiAganNGaWxlQ291bnQ6IG51bWJlcjtcclxuICBzY29wZXM6IHN0cmluZ1tdO1xyXG4gIHJlcUFtdDogbnVtYmVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBQb3BVcEFwcCgpIHtcclxuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlPEFwcFN0YXRlPih7XHJcbiAgICB1cmxQYXJzZXI6IGZhbHNlLFxyXG4gICAgdXJsQ291bnQ6IDAsXHJcbiAgICBqc0ZpbGVDb3VudDogMCxcclxuICAgIHNjb3BlczogW10sXHJcbiAgICByZXFBbXQ6IDEsXHJcbiAgfSk7XHJcbiAgY29uc3QgaW5wdXRSZWYgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudCB8IG51bGw+KG51bGwpO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgdXBkYXRlQWxsU3RhdGUoKTtcclxuXHJcbiAgICBjb25zdCBsaXN0ZW5lciA9IChjaGFuZ2VzOiB7XHJcbiAgICAgIFtrZXk6IHN0cmluZ106IGJyb3dzZXIuU3RvcmFnZS5TdG9yYWdlQ2hhbmdlO1xyXG4gICAgfSkgPT4ge1xyXG4gICAgICBpZiAoY2hhbmdlcy5hdXRvUGFyc2VyRW5hYmxlZCkge1xyXG4gICAgICAgIHNldFN0YXRlKChwcmV2U3RhdGUpID0+ICh7XHJcbiAgICAgICAgICAuLi5wcmV2U3RhdGUsXHJcbiAgICAgICAgICB1cmxQYXJzZXI6IGNoYW5nZXMuYXV0b1BhcnNlckVuYWJsZWQubmV3VmFsdWUgYXMgYm9vbGVhbixcclxuICAgICAgICB9KSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgYnJvd3Nlci5zdG9yYWdlLm9uQ2hhbmdlZC5hZGRMaXN0ZW5lcihsaXN0ZW5lcik7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgYnJvd3Nlci5zdG9yYWdlLm9uQ2hhbmdlZC5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7XHJcbiAgICB9O1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgdXBkYXRlQWxsU3RhdGUgPSBhc3luYyAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBbYXV0b1BhcnNlclN0YXRlLCBzY29wZVJlc3VsdCwgcmVxQW10UmVzdWx0XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICBicm93c2VyLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgYWN0aW9uOiBcImdldEF1dG9QYXJzZXJTdGF0ZVwiLFxyXG4gICAgICAgIH0pIGFzIFByb21pc2U8TWVzc2FnZVJlc3BvbnNlPixcclxuICAgICAgICBicm93c2VyLnN0b3JhZ2UubG9jYWwuZ2V0KFwic2NvcGVcIiksXHJcbiAgICAgICAgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldChcInJlcXVlc3RzXCIpLFxyXG4gICAgICBdKTtcclxuXHJcbiAgICAgIHNldFN0YXRlKChwcmV2U3RhdGUpID0+ICh7XHJcbiAgICAgICAgLi4ucHJldlN0YXRlLFxyXG4gICAgICAgIHVybFBhcnNlcjogYXV0b1BhcnNlclN0YXRlLnN0YXRlID8/IGZhbHNlLFxyXG4gICAgICAgIHNjb3BlczogKHNjb3BlUmVzdWx0LnNjb3BlIGFzIHN0cmluZ1tdKSB8fCBbXSxcclxuICAgICAgICByZXFBbXQ6IChyZXFBbXRSZXN1bHQucmVxdWVzdHMgYXMgbnVtYmVyKSB8fCAxLFxyXG4gICAgICB9KSk7XHJcblxyXG4gICAgICAvLyBPbmx5IHVwZGF0ZSBVUkwgYW5kIEpTIGZpbGUgY291bnRzIGlmIHRoZXJlJ3MgYW4gYWN0aXZlIHRhYlxyXG4gICAgICBjb25zdCB0YWJzID0gYXdhaXQgYnJvd3Nlci50YWJzLnF1ZXJ5KHtcclxuICAgICAgICBhY3RpdmU6IHRydWUsXHJcbiAgICAgICAgY3VycmVudFdpbmRvdzogdHJ1ZSxcclxuICAgICAgfSk7XHJcbiAgICAgIGlmICh0YWJzWzBdPy5pZCkge1xyXG4gICAgICAgIGNvbnN0IFt1cmxDb3VudCwganNGaWxlQ291bnRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgICAgYnJvd3Nlci50YWJzLnNlbmRNZXNzYWdlKHRhYnNbMF0uaWQsIHsgYWN0aW9uOiAnY291bnRVUkxzJyB9KSBhcyBQcm9taXNlPE1lc3NhZ2VSZXNwb25zZT4sXHJcbiAgICAgICAgICBicm93c2VyLnRhYnMuc2VuZE1lc3NhZ2UodGFic1swXS5pZCwgeyBhY3Rpb246ICdjb3VudEpTRmlsZXMnIH0pIGFzIFByb21pc2U8TWVzc2FnZVJlc3BvbnNlPixcclxuICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgc2V0U3RhdGUocHJldlN0YXRlID0+ICh7XHJcbiAgICAgICAgICAuLi5wcmV2U3RhdGUsXHJcbiAgICAgICAgICB1cmxDb3VudDogdXJsQ291bnQuY291bnQgPz8gMCxcclxuICAgICAgICAgIGpzRmlsZUNvdW50OiBqc0ZpbGVDb3VudC5jb3VudCA/PyAwLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byB1cGRhdGUgc3RhdGU6XCIsIGVycm9yKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBoYW5kbGVBY3Rpb24gPSBhc3luYyAoYWN0aW9uOiBzdHJpbmcsIHBheWxvYWQ/OiBhbnkpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHRhYnMgPSBhd2FpdCBicm93c2VyLnRhYnMucXVlcnkoe2FjdGl2ZTogdHJ1ZSwgY3VycmVudFdpbmRvdzogdHJ1ZX0pO1xyXG4gICAgICBpZiAodGFic1swXT8uaWQpIHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGJyb3dzZXIudGFicy5zZW5kTWVzc2FnZSh0YWJzWzBdLmlkLCB7IGFjdGlvbiwgLi4ucGF5bG9hZCB9KSBhcyBNZXNzYWdlUmVzcG9uc2U7XHJcbiAgICAgICAgaWYgKCFyZXNwb25zZS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2UuZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCB1cGRhdGVBbGxTdGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBpbiAke2FjdGlvbn06YCwgZXJyb3IpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHBhcnNlVVJMcyA9ICgpID0+IGhhbmRsZUFjdGlvbihcInJlcGFyc2VcIik7XHJcbiAgY29uc3QgY2xlYXJVUkxzID0gKCkgPT4gaGFuZGxlQWN0aW9uKFwiY2xlYXJVUkxzXCIpO1xyXG4gIGNvbnN0IGNvdW50VVJMcyA9ICgpID0+IGhhbmRsZUFjdGlvbihcImNvdW50VVJMc1wiKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgY291bnRVUkxzKCk7XHJcbiAgICB9O1xyXG4gICAgYnJvd3Nlci5zdG9yYWdlLm9uQ2hhbmdlZC5hZGRMaXN0ZW5lcihoYW5kbGVDaGFuZ2UpO1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgYnJvd3Nlci5zdG9yYWdlLm9uQ2hhbmdlZC5yZW1vdmVMaXN0ZW5lcihoYW5kbGVDaGFuZ2UpO1xyXG4gICAgfTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IHRvZ2dsZVVybFBhcnNlclN0YXRlID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgbmV3U3RhdGUgPSAhc3RhdGUudXJsUGFyc2VyO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBicm93c2VyLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoeyBhY3Rpb246ICdzZXRBdXRvUGFyc2VyU3RhdGUnLCBzdGF0ZTogbmV3U3RhdGUgfSkgYXMgTWVzc2FnZVJlc3BvbnNlO1xyXG4gICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcclxuICAgICAgc2V0U3RhdGUocHJldlN0YXRlID0+ICh7IC4uLnByZXZTdGF0ZSwgdXJsUGFyc2VyOiBuZXdTdGF0ZSB9KSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaGFuZGxlQWRkU2NvcGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBuZXdTY29wZSA9IGlucHV0UmVmLmN1cnJlbnQ/LnZhbHVlO1xyXG4gICAgaWYgKG5ld1Njb3BlKSB7XHJcbiAgICAgIHNldFN0YXRlKHByZXZTdGF0ZSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlZFNjb3BlcyA9IFsuLi5wcmV2U3RhdGUuc2NvcGVzLCBuZXdTY29wZV07XHJcbiAgICAgICAgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLnNldCh7IHNjb3BlOiB1cGRhdGVkU2NvcGVzIH0pO1xyXG4gICAgICAgIHJldHVybiB7IC4uLnByZXZTdGF0ZSwgc2NvcGVzOiB1cGRhdGVkU2NvcGVzIH07XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAoaW5wdXRSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGlucHV0UmVmLmN1cnJlbnQudmFsdWUgPSBcIlwiO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaGFuZGxlUmVtb3ZlU2NvcGUgPSAoc2NvcGVUb1JlbW92ZTogc3RyaW5nKSA9PiB7XHJcbiAgICBzZXRTdGF0ZShwcmV2U3RhdGUgPT4ge1xyXG4gICAgICBjb25zdCB1cGRhdGVkU2NvcGVzID0gcHJldlN0YXRlLnNjb3Blcy5maWx0ZXIoc2NvcGUgPT4gc2NvcGUgIT09IHNjb3BlVG9SZW1vdmUpO1xyXG4gICAgICBicm93c2VyLnN0b3JhZ2UubG9jYWwuc2V0KHsgc2NvcGU6IHVwZGF0ZWRTY29wZXMgfSk7XHJcbiAgICAgIHJldHVybiB7IC4uLnByZXZTdGF0ZSwgc2NvcGVzOiB1cGRhdGVkU2NvcGVzIH07XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBoYW5kbGVSZXFBbXQgPSAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcclxuICAgIGNvbnN0IG5ld1JlcUFtdFZhbHVlID0gTnVtYmVyKGUudGFyZ2V0LnZhbHVlKTtcclxuICAgIHNldFN0YXRlKHByZXZTdGF0ZSA9PiAoeyAuLi5wcmV2U3RhdGUsIHJlcUFtdDogbmV3UmVxQW10VmFsdWUgfSkpO1xyXG4gICAgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLnNldCh7IHJlcXVlc3RzOiBuZXdSZXFBbXRWYWx1ZSB9KTtcclxuICAgIGNvbnNvbGUubG9nKGBzZXQgcmVxdWVzdHMgdG8gJHtuZXdSZXFBbXRWYWx1ZX1gKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBjbGVhckNhY2hlID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmNsZWFyKCk7XHJcbiAgICBhbGVydChcIkNhY2hlIGNsZWFyZWRcIik7XHJcbiAgICB1cGRhdGVBbGxTdGF0ZSgpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGNsZWFyQWxsU2NvcGVzID0gKCkgPT4ge1xyXG4gICAgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLnNldCh7c2NvcGU6IFtdfSk7XHJcbiAgICBzZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHsgLi4ucHJldlN0YXRlLCBzY29wZXM6IFtdIH0pKTtcclxuICB9O1xyXG5cclxuICAvLyBVSSBDb21wb25lbnRzXHJcbiAgY29uc3QgRGlzcGxheVN0YXRlOiBSZWFjdC5GQzx7IHN0YXRlOiBib29sZWFuIH0+ID0gKHsgc3RhdGUgfSkgPT4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICA8c3ZnXHJcbiAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuICAgICAgICAgIHdpZHRoPVwiMjRcIlxyXG4gICAgICAgICAgaGVpZ2h0PVwiMjRcIlxyXG4gICAgICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPHBhdGhcclxuICAgICAgICAgICAgZmlsbD17c3RhdGUgPyBcIiM4MmU0NjdcIiA6IFwiI2U2Mzk0NlwifVxyXG4gICAgICAgICAgICBkPVwiTTEyIDE4YTYgNiAwIDEgMCAwLTEyYTYgNiAwIDAgMCAwIDEyXCJcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgPHNwYW5cclxuICAgICAgICAgIGNsYXNzTmFtZT17XHJcbiAgICAgICAgICAgIHN0YXRlXHJcbiAgICAgICAgICAgICAgPyBcInRleHQtd2hpdGUgIGZvbnQtc2VtaWJvbGRcIlxyXG4gICAgICAgICAgICAgIDogXCJ0ZXh0LWN1c3RvbUZvbnQgIGZvbnQtc2VtaWJvbGRcIlxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtzdGF0ZSA/IFwiT05cIiA6IFwiT0ZGXCJ9XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcblxyXG4gIGNvbnN0IERpc3BsYXlTY29wZTogUmVhY3QuRkM8eyBzY29wZTogc3RyaW5nOyBvblJlbW92ZTogKCkgPT4gdm9pZCB9PiA9ICh7XHJcbiAgICBzY29wZSxcclxuICAgIG9uUmVtb3ZlLFxyXG4gIH0pID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWJldHdlZW4gaXRlbXMtY2VudGVyIGdhcC0zXCI+XHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC13aGl0ZSBweS0xIHB4LTFcIj57c2NvcGV9PC9zcGFuPlxyXG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgcGwtMSBiZy10cmFuc3BhcmVudCB0ZXh0LXJvc2UtNTAwXCIgb25DbGljaz17b25SZW1vdmV9PlxyXG4gICAgICAgICAgPHN2Z1xyXG4gICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuICAgICAgICAgICAgd2lkdGg9XCIyNFwiXHJcbiAgICAgICAgICAgIGhlaWdodD1cIjI0XCJcclxuICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxwYXRoIGZpbGw9XCIjZGY0OTUwXCIgZD1cIk0xOSAxMi45OThINXYtMmgxNHpcIiAvPlxyXG4gICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJiZy1jdXN0b21CZyB3LWZ1bGwgbWQ6aC1zY3JlZW4gbS0wICBtZDpqdXN0aWZ5LWNlbnRlciBweS01IHB4LTNcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGdhcC0zIGp1c3RpZnktY2VudGVyIG1iLTVcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9e0xvZ299IHN0eWxlPXt7IHdpZHRoOiBcIjEyJVwiLCBoZWlnaHQ6IFwiNzclXCIgfX0gLz5cclxuICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtM3hsIHRleHQtY3VzdG9tUmVkIGZvbnQtYm9sZCBtZDp0ZXh0LTZ4bCBtYi0xXCI+XHJcbiAgICAgICAgICAgICAgRW5kUG9pbnRlclxyXG4gICAgICAgICAgICA8L2gxPlxyXG5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wganVzdGlmeS1jZW50ZXIgZ2FwLTIgaXRlbXMtY2VudGVyIHctZnVsbCBteC0wXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgZ2FwLTIgbWQ6Z2FwLTUgdy1mdWxsXCI+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiIHctZnVsbCBmb250LXNlbWlib2xkIGJvcmRlci0yIHJvdW5kZWQtc20gcC0yIGJvcmRlci1jdXN0b21Gb250IGJnLWdyYWRpZW50LXRvLXIgZnJvbS1jdXN0b21Gb250IHRvLWN1c3RvbUJnIHRleHQtd2hpdGVcIj5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlXCI+VVJMczwvc3Bhbj4gKHtzdGF0ZS51cmxDb3VudH0pXHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtbWQgZmxleCB3LWZ1bGwgZ2FwLTIgXCI+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiIHAtMiByb3VuZGVkLXNtIHctWzUwJV0gYm9yZGVyLTIgYm9yZGVyLWN1c3RvbUZvbnQgIGJnLWN1c3RvbUZvbnQgZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXJcIlxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17Y2xlYXJVUkxzfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxzdmdcclxuICAgICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICAgICAgICAgICAgICAgIHdpZHRoPVwiMjBcIlxyXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIyMFwiXHJcbiAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICA8cGF0aFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGw9XCJub25lXCJcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U9XCIjZTk2YzRjXCJcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoPVwiMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgZD1cIk00IDdoMTZtLTEwIDR2Nm00LTZ2Nk01IDdsMSAxMmEyIDIgMCAwIDAgMiAyaDhhMiAyIDAgMCAwIDItMmwxLTEyTTkgN1Y0YTEgMSAwIDAgMSAxLTFoNGExIDEgMCAwIDEgMSAxdjNcIlxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICA8dGl0bGU+RGVsZXRlIFVSTHM8L3RpdGxlPlxyXG4gICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiIHAtMiByb3VuZGVkLXNtIHctWzUwJV0gYmctY3VzdG9tQmcgYm9yZGVyLTIgYm9yZGVyLWN1c3RvbUZvbnQgZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXJcIlxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17Y2xlYXJDYWNoZX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8c3ZnXHJcbiAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjI0XCJcclxuICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiMjRcIlxyXG4gICAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgPHBhdGhcclxuICAgICAgICAgICAgICAgICAgICBmaWxsPVwiI0ZGRkZGRlwiXHJcbiAgICAgICAgICAgICAgICAgICAgZD1cIk01LjUwNSA5LjExN2E3LjcgNy43IDAgMCAxLTEuNDk3LS44NTJWMTJjMCAuNTI0LjQ3MyAxLjIzIDEuOCAxLjg4M2MxLjI2Ny42MjUgMy4wODUgMS4wNzEgNS4xOCAxLjE4MmEuNzYuNzYgMCAwIDEtLjA4IDEuNTE3Yy0yLjI0Mi0uMTE4LTQuMjc0LS41OTgtNS43NzItMS4zMzZhNy4zIDcuMyAwIDAgMS0xLjEyOC0uNjhWMTguM2MwIC4yODIuMTI3LjYxLjQ3Ni45NzNjLjM1Mi4zNjYuODk5LjczMiAxLjYzMyAxLjA1NWMxLjQ2Ni42NDUgMy41NDUgMS4wNjMgNS44ODEgMS4wNjNxLjg2NyAwIDEuNjgzLS4wNzRhLjc2Ljc2IDAgMCAxIC4xMzUgMS41MTNhMjEgMjEgMCAwIDEtMS44MTguMDhjLTIuNDk2IDAtNC43OTItLjQ0My02LjQ5My0xLjE5MmMtLjg0OS0uMzc0LTEuNTg0LS44MzgtMi4xMTctMS4zOTNjLS41MzYtLjU1OC0uOS0xLjI0NC0uOS0yLjAyNVY1LjdjMC0uNzgyLjM2NC0xLjQ2Ny45LTIuMDI1Yy41MzMtLjU1NSAxLjI2OC0xLjAyIDIuMTE3LTEuMzkzYzEuNy0uNzQ5IDMuOTk3LTEuMTkzIDYuNDkzLTEuMTkzczQuNzkzLjQ0NCA2LjQ5MyAxLjE5M2MuODUuMzczIDEuNTg1LjgzOCAyLjExNyAxLjM5M2MuNTM3LjU1OC45IDEuMjQzLjkgMi4wMjVzLS4zNjMgMS40NjctLjkgMi4wMjVjLS41MzIuNTU0LTEuMjY3IDEuMDItMi4xMTcgMS4zOTNjLTEuNy43NDgtMy45OTYgMS4xOTItNi40OTMgMS4xOTJjLTIuNDk2IDAtNC43OTItLjQ0NC02LjQ5My0xLjE5MlptLTEuMDIxLTQuMzljLS4zNS4zNjItLjQ3Ni42OS0uNDc2Ljk3MnMuMTI3LjYxLjQ3Ni45NzJjLjM1Mi4zNjcuODk5LjczMiAxLjYzMyAxLjA1NWMxLjQ2Ni42NDYgMy41NDUgMS4wNjQgNS44ODEgMS4wNjRzNC40MTUtLjQxOCA1Ljg4Mi0xLjA2NGMuNzM0LS4zMjMgMS4yOC0uNjg4IDEuNjMzLTEuMDU1Yy4zNS0uMzYzLjQ3Ni0uNjkuNDc2LS45NzJzLS4xMjctLjYxLS40NzYtLjk3M2MtLjM1My0uMzY3LS45LS43MzItMS42MzMtMS4wNTVjLTEuNDY3LS42NDUtMy41NDUtMS4wNjMtNS44ODItMS4wNjNzLTQuNDE1LjQxOC01Ljg4IDEuMDYzYy0uNzM1LjMyMy0xLjI4Mi42ODgtMS42MzQgMS4wNTVaXCJcclxuICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgPHBhdGhcclxuICAgICAgICAgICAgICAgICAgICBmaWxsPVwiI0ZGRkZGRlwiXHJcbiAgICAgICAgICAgICAgICAgICAgZD1cIk0yMS40MjUgMTEuMTFhLjUuNSAwIDAgMC0uODgxLS40MThsLTUuNDM4IDYuOTM3YS41LjUgMCAwIDAgLjM5NC44MDhoMy4yNjhsLS45NDUgNC40NmEuNS41IDAgMCAwIC44ODguNDA1bDQuNjg4LTYuMTg4YS41LjUgMCAwIDAtLjM5OS0uODAyaC0yLjc0NXpcIlxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICA8dGl0bGU+RGVsZXRlIENhY2hlPC90aXRsZT5cclxuICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IHctZnVsbCBtYi0zIGdhcC0yIGp1c3RpZnktY29udGVudCBpdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICAgICAgPGFcclxuICAgICAgICAgICAgICBocmVmPXtkb2N1bWVudC5sb2NhdGlvbi5vcmlnaW4gKyBcIi9Qb3BVcC9wb3B1cC5odG1sI3VybHNcIn1cclxuICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIiBwLTIgcm91bmRlZC1zbSB3LVs1MCVdIGJnLWN1c3RvbUZvbnQgYm9yZGVyLTIgYm9yZGVyLWN1c3RvbUZvbnQgZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXIgdGV4dC13aGl0ZVwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBQYW5lbFxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCIgcC0yIHJvdW5kZWQtc20gdy1bNTAlXSBiZy1jdXN0b21CZyBib3JkZXItMiB0ZXh0LXdoaXRlIGJvcmRlci1jdXN0b21Gb250IGZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyXCJcclxuICAgICAgICAgICAgICBvbkNsaWNrPXtwYXJzZVVSTHN9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBSRVBBUlNFXHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgdGV4dC1jZW50ZXIgZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICB7LyogPGhyIGNsYXNzTmFtZT1cInctZnVsbCBib3JkZXItZ3JheS00MDAvNjAgbWItNVwiIC8+ICovfVxyXG4gICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0ZXh0LTJ4bCB0ZXh0LWN1c3RvbVJlZCBmb250LXNlbWlib2xkIG1iLTJcIj5cclxuICAgICAgICAgIEF1dG8gUGFyc2VyXHJcbiAgICAgICAgPC9oMT5cclxuICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIG1iLTJcIj5BdXRvIHBhcnNlcyBhZnRlciBwYWdlIGxvYWQ8L3A+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYi0yXCI+XHJcbiAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJnLWN1c3RvbUJnIGJvcmRlci0yIGJvcmRlci1jdXN0b21CZyBwLTJcIlxyXG4gICAgICAgICAgICBvbkNsaWNrPXt0b2dnbGVVcmxQYXJzZXJTdGF0ZX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPERpc3BsYXlTdGF0ZSBzdGF0ZT17c3RhdGUudXJsUGFyc2VyfSAvPlxyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgdGV4dC1jZW50ZXIgZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICB7LyogPGhyIGNsYXNzTmFtZT1cInctZnVsbCBib3JkZXItZ3JheS00MDAvNjAgbWItNVwiIC8+ICovfVxyXG4gICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0ZXh0LTJ4bCB0ZXh0LWN1c3RvbVJlZCBmb250LXNlbWlib2xkIG1iLTJcIj5cclxuICAgICAgICAgIENvbmN1cnJlbnQgUmVxdWVzdHNcclxuICAgICAgICA8L2gxPlxyXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtd2hpdGVcIj5cclxuICAgICAgICAgIEEgcmVxdWVzdCBvZiAxIGlzIHJlY29tbWVuZGVkIGZvciBoaWdoZXIgYWNjdXJhY3kgd2hlbiBkZWFsaW5nIHdpdGhcclxuICAgICAgICAgIGJpZyB3ZWIgYXBwcyB3aXRoIG1hbnkgZHluYW1pYyBqcyBmaWxlc1xyXG4gICAgICAgIDwvcD5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1iLTNcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtNSBtYi0xXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInctZnVsbCBweS0xIHB4LTMgdGV4dC13aGl0ZSBiZy1jdXN0b21Gb250IGZvbnQtc2VtaWJvbGQgcm91bmRlZC1zbVwiPlxyXG4gICAgICAgICAgICAgIHtzdGF0ZS5yZXFBbXR9XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICB0eXBlPVwicmFuZ2VcIlxyXG4gICAgICAgICAgICBtaW49XCIxXCJcclxuICAgICAgICAgICAgbWF4PVwiMTBcIlxyXG4gICAgICAgICAgICB2YWx1ZT17c3RhdGUucmVxQW10fVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlUmVxQW10fVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJtdC0xIHctNjQgaC0yIG1iLTMgYmctY3VzdG9tRm9udCByb3VuZGVkLWxnIGFwcGVhcmFuY2Utbm9uZSBjdXJzb3ItcG9pbnRlclwiXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIHRleHQtY2VudGVyIGZsZXggZmxleC1jb2wganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyXCI+XHJcbiAgICAgICAgey8qIDxociBjbGFzc05hbWU9XCJ3LWZ1bGwgYm9yZGVyLWdyYXktNDAwLzYwIG1iLTVcIiAvPiAqL31cclxuICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC0yeGwgdGV4dC1jdXN0b21SZWQgZm9udC1zZW1pYm9sZCBtYi0yXCI+U0NPUEU8L2gxPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBnYXAtMC41XCI+XHJcbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIG1iLTNcIj5cclxuICAgICAgICAgICAgS2VlcCBzY29wZSBlbXB0eSBpZiB5b3Ugd2FudCB0byBwYXJzZSBmcm9tIGFsbCBzY29wZXNcclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxzdmdcclxuICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICAgICAgICAgIHdpZHRoPVwiMTJcIlxyXG4gICAgICAgICAgICBoZWlnaHQ9XCIxMlwiXHJcbiAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8cGF0aFxyXG4gICAgICAgICAgICAgIGZpbGw9XCIjNjE1YzVjXCJcclxuICAgICAgICAgICAgICBkPVwiTTggMTZBOCA4IDAgMSAwIDggMGE4IDggMCAwIDAgMCAxNm0uOTMtOS40MTJsLTEgNC43MDVjLS4wNy4zNC4wMjkuNTMzLjMwNC41MzNjLjE5NCAwIC40ODctLjA3LjY4Ni0uMjQ2bC0uMDg4LjQxNmMtLjI4Ny4zNDYtLjkyLjU5OC0xLjQ2NS41OThjLS43MDMgMC0xLjAwMi0uNDIyLS44MDgtMS4zMTlsLjczOC0zLjQ2OGMuMDY0LS4yOTMuMDA2LS4zOTktLjI4Ny0uNDdsLS40NTEtLjA4MWwuMDgyLS4zODFsMi4yOS0uMjg3ek04IDUuNWExIDEgMCAxIDEgMC0yYTEgMSAwIDAgMSAwIDJcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8dGl0bGU+XHJcbiAgICAgICAgICAgICAgWW91IGNhbiBlaXRoZXIgc3BlY2lmeSBTTEQgKyBUTEQgKGV4YW1wbGUuY29tKSBvciBzdWJkb21haW5zXHJcbiAgICAgICAgICAgICAgKHd3dy5leGFtcGxlLmNvbSkuIEZvciBleGFtcGxlLCBleGFtcGxlLmNvbSB3b3VsZCBjb3ZlciBhbGxcclxuICAgICAgICAgICAgICBzdWJkb21haW5zIChhbGwgb3RoZXIgaG9zdHMgYmVsb25naW5nIHRvIGV4YW1wbGUuY29tIGxpa2VcclxuICAgICAgICAgICAgICBoZWxwLmV4YW1wbGUuY29tKSB3aGlsZSB3d3cuZXhhbXBsZS5jb20gb25seSBjb3ZlcnMgb25lXHJcbiAgICAgICAgICAgICAgaG9zdC9kb21haW4uIE9yIHNjb3BlIGNhbiBiZSBsZWZ0IGVtcHR5IHRvIHBhcnNlIGFsbCB3ZWIgYXBwcyB5b3VcclxuICAgICAgICAgICAgICBnbyB0by5cclxuICAgICAgICAgICAgPC90aXRsZT5cclxuICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdy1mdWxsIGdhcC0wLjVcIj5cclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgIHJlZj17aW5wdXRSZWZ9XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBib3JkZXItZ3JheS00MDAvNjAgdGV4dC1ncmF5LTQwMC82MCBvdXRsaW5lLW5vbmUgYm9yZGVyLTIgcHktMSByb3VuZGVkLXNtIHB4LTIgYmctdHJhbnNwYXJlbnRcIlxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cImV4YW1wbGUuY29tIG9yIHd3dy5leGFtcGxlLmNvbVwiXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJiZy10cmFuc3BhcmVudCB0ZXh0LXhsIHRleHQtY3VzdG9tRm9udCByb3VuZGVkLXNtIHB5LTEgcHgtMiBmb250LWJvbGRcIlxyXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVBZGRTY29wZX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgK1xyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCB3LWZ1bGwganVzdGlmeS1iZXR3ZWVuIGdhcC0yXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggbXQtNSB3LWZ1bGwgdGV4dC1jZW50ZXIgYm9yZGVyLTIgYm9yZGVyLWdyYXktNDAwLzYwIG92ZXJmbG93LWF1dG8gaC0yMCBwYi01IHJvdW5kZWQtbWQgY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtNSBmbGV4IGZsZXgtY29sIHB4LTFcIj5cclxuICAgICAgICAgICAgICB7c3RhdGUuc2NvcGVzLm1hcCgoc2NvcGUsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICAgICAgICA8RGlzcGxheVNjb3BlXHJcbiAgICAgICAgICAgICAgICAgIGtleT17aW5kZXh9XHJcbiAgICAgICAgICAgICAgICAgIHNjb3BlPXtzY29wZX1cclxuICAgICAgICAgICAgICAgICAgb25SZW1vdmU9eygpID0+IGhhbmRsZVJlbW92ZVNjb3BlKHNjb3BlKX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm10LTIgYmctdHJhbnNwYXJlbnQgZGVsZXRlSWNvbiBcIiBvbkNsaWNrPXtjbGVhckFsbFNjb3Blc30+XHJcbiAgICAgICAgICAgIDxzdmdcclxuICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuICAgICAgICAgICAgICB3aWR0aD1cIjI0XCJcclxuICAgICAgICAgICAgICBoZWlnaHQ9XCIyNFwiXHJcbiAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8cGF0aFxyXG4gICAgICAgICAgICAgICAgZmlsbD1cIiNlOTZjNGNcIlxyXG4gICAgICAgICAgICAgICAgZD1cIk0xOSA0aC0zLjVsLTEtMWgtNWwtMSAxSDV2MmgxNE02IDE5YTIgMiAwIDAgMCAyIDJoOGEyIDIgMCAwIDAgMi0yVjdINnpcIlxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgPHRpdGxlPkNsZWFyIEFsbDwvdGl0bGU+XHJcbiAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgXHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIHsvKiA8aHIgY2xhc3NOYW1lPVwidy1mdWxsIGJnLWdyYXktNDAwLzYwIGJvcmRlci1ncmF5LTQwMC82MCBtYi01IG10LTVcIiAvPiAqL31cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtY3VzdG9tRm9udCBtdC04IG1iLTUgbWQ6dGV4dC1sZ1wiPlxyXG4gICAgICAgICAgQW4gZW5kcG9pbnQgcGFyc2VyIGFuZCBleHRyYWN0b3Igd2l0aCBtYW55IGZsZXhpYmxlIGZlYXR1cmVzIGJ5XHJcbiAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtd2hpdGVcIj4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9uYXRoYW4tdy03NmJhNzgyMDIvXCI+ICBBdGxhc1dpa2kvbXJ1bm9yaWdpbmFsIDwvYT48L3NwYW4+IGFuZHtcIiBcIn1cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtd2hpdGVcIj48YSBocmVmPVwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2tyaXN0aWFuLWFsZXgta2VsbHkvXCI+TG9yZENhdDwvYT48L3NwYW4+IHwgRGVzaWduZWQgYnkgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC13aGl0ZVwiPjxhIGhyZWY9XCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vbWFoZW5vb3Itc2FsYXQvXCI+TWFoZW5vb3I8L2E+PC9zcGFuPlxyXG4gICAgICAgIDwvcD5cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZ2FwLTIganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyXCI+XHJcbiAgICAgICAgey8qIDxoND4gIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vQXRsYXNXaWtpL2VuZFBvaW50ZXIvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+IHZpZXcgb24gZ2l0aHViPC9hPjwvaDQ+ICovfVxyXG4gICAgICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vQXRsYXNXaWtpL2VuZFBvaW50ZXIvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICA8c3ZnXHJcbiAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgICAgICAgICB3aWR0aD1cIjQwXCJcclxuICAgICAgICAgICAgaGVpZ2h0PVwiMzRcIlxyXG4gICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHBhdGhcclxuICAgICAgICAgICAgICBmaWxsPVwiI0ZGRkZGRlwiXHJcbiAgICAgICAgICAgICAgZD1cIk0xMiAyQTEwIDEwIDAgMCAwIDIgMTJjMCA0LjQyIDIuODcgOC4xNyA2Ljg0IDkuNWMuNS4wOC42Ni0uMjMuNjYtLjV2LTEuNjljLTIuNzcuNi0zLjM2LTEuMzQtMy4zNi0xLjM0Yy0uNDYtMS4xNi0xLjExLTEuNDctMS4xMS0xLjQ3Yy0uOTEtLjYyLjA3LS42LjA3LS42YzEgLjA3IDEuNTMgMS4wMyAxLjUzIDEuMDNjLjg3IDEuNTIgMi4zNCAxLjA3IDIuOTEuODNjLjA5LS42NS4zNS0xLjA5LjYzLTEuMzRjLTIuMjItLjI1LTQuNTUtMS4xMS00LjU1LTQuOTJjMC0xLjExLjM4LTIgMS4wMy0yLjcxYy0uMS0uMjUtLjQ1LTEuMjkuMS0yLjY0YzAgMCAuODQtLjI3IDIuNzUgMS4wMmMuNzktLjIyIDEuNjUtLjMzIDIuNS0uMzNzMS43MS4xMSAyLjUuMzNjMS45MS0xLjI5IDIuNzUtMS4wMiAyLjc1LTEuMDJjLjU1IDEuMzUuMiAyLjM5LjEgMi42NGMuNjUuNzEgMS4wMyAxLjYgMS4wMyAyLjcxYzAgMy44Mi0yLjM0IDQuNjYtNC41NyA0LjkxYy4zNi4zMS42OS45Mi42OSAxLjg1VjIxYzAgLjI3LjE2LjU5LjY3LjVDMTkuMTQgMjAuMTYgMjIgMTYuNDIgMjIgMTJBMTAgMTAgMCAwIDAgMTIgMlwiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICA8L2E+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG5leHBvcnQgZGVmYXVsdCBQb3BVcEFwcDtcclxuIiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFVSTHNQbGFpbigpIHtcclxuICBpbnRlcmZhY2UgRW5kcG9pbnQge1xyXG4gICAgdXJsOiBzdHJpbmc7XHJcbiAgICBmb3VuZEF0OiBzdHJpbmc7XHJcbiAgICB3ZWJwYWdlOiBzdHJpbmc7XHJcbiAgfVxyXG5cclxuICBpbnRlcmZhY2UgVVJMRW50cnkge1xyXG4gICAgY3VyclBhZ2U6IHN0cmluZ1tdO1xyXG4gICAgZXh0ZXJuYWxKU0ZpbGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZ1tdIH07XHJcbiAgfVxyXG5cclxuICBpbnRlcmZhY2UgVVJMUGFyc2VyIHtcclxuICAgIFtrZXk6IHN0cmluZ106IFVSTEVudHJ5O1xyXG4gIH1cclxuXHJcbiAgdHlwZSBMb2NhdGlvbiA9IHN0cmluZztcclxuXHJcbiAgY29uc3QgW3VybHMsIHNldFVSTHNdID0gdXNlU3RhdGU8RW5kcG9pbnRbXT4oW10pO1xyXG5cclxuICAvLyBGdW5jdGlvbiB0byBzYW5pdGl6ZSBVUkxzXHJcbiAgY29uc3Qgc2FuaXRpemVkVVJMID0gKGVuZHBvaW50OiBFbmRwb2ludCkgPT4ge1xyXG4gICAgbGV0IHZlcmlmaWVkVVJMOiBzdHJpbmc7XHJcbiAgICBjb25zdCBjbGVhbmVkV2VicGFnZSA9IGVuZHBvaW50LndlYnBhZ2UucmVwbGFjZSgvXFwvJC8sICcnKS5zcGxpdCgnIycpWzBdO1xyXG5cclxuICAgIGlmIChlbmRwb2ludC51cmwgJiYgKGVuZHBvaW50LnVybC5zdGFydHNXaXRoKFwiaHR0cDovL1wiKSB8fCBlbmRwb2ludC51cmwuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpKSkge1xyXG4gICAgICB2ZXJpZmllZFVSTCA9IGVuZHBvaW50LnVybDtcclxuICAgIH0gZWxzZSBpZiAoZW5kcG9pbnQudXJsLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG4gICAgICB2ZXJpZmllZFVSTCA9IGNsZWFuZWRXZWJwYWdlICsgZW5kcG9pbnQudXJsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmVyaWZpZWRVUkwgPSBjbGVhbmVkV2VicGFnZSArICcvJyArIGVuZHBvaW50LnVybDtcclxuICAgIH1cclxuICAgIHZlcmlmaWVkVVJMID0gdmVyaWZpZWRVUkwucmVwbGFjZSgvKFteOl1cXC8pXFwvKy9nLCBcIiQxXCIpO1xyXG5cclxuICAgIHJldHVybiB2ZXJpZmllZFVSTDtcclxuICB9O1xyXG5cclxuICAvLyBGdW5jdGlvbiB0byBkb3dubG9hZCBVUkxzIGFzIGEgLnR4dCBmaWxlXHJcbiAgY29uc3QgZG93bmxvYWRVUkxzQXNUeHQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB1cmxTdHJpbmdzID0gdXJscy5tYXAoc2FuaXRpemVkVVJMKS5qb2luKCdcXG4nKTsgLy8gSm9pbiBVUkxzIGFzIG5ld2xpbmUtc2VwYXJhdGVkIHN0cmluZ3NcclxuICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbdXJsU3RyaW5nc10sIHsgdHlwZTogJ3RleHQvcGxhaW4nIH0pO1xyXG4gICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgIGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcbiAgICBsaW5rLmRvd25sb2FkID0gJ3VybHMudHh0JztcclxuICAgIGxpbmsuY2xpY2soKTtcclxuICB9O1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgZmV0Y2hEYXRhID0gKCkgPT4ge1xyXG4gICAgICBsZXQgYWxsRW5kcG9pbnRzOiBFbmRwb2ludFtdID0gW107XHJcbiAgICAgIGxldCBsb2NhdGlvbnM6IExvY2F0aW9uW10gPSBbXTtcclxuXHJcbiAgICAgIGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5nZXQoXCJVUkwtUEFSU0VSXCIpLnRoZW4oKGRhdGE6IHsgW2tleTogc3RyaW5nXTogYW55IH0pID0+IHtcclxuICAgICAgICBjb25zdCB1cmxQYXJzZXIgPSBkYXRhW1wiVVJMLVBBUlNFUlwiXTtcclxuXHJcbiAgICAgICAgT2JqZWN0LmtleXModXJsUGFyc2VyKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgIGlmIChrZXkgIT09IFwiY3VycmVudFwiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJVUkxFbmRwb2ludHMgPSB1cmxQYXJzZXJba2V5XS5jdXJyUGFnZTtcclxuICAgICAgICAgICAgY29uc3QgY3VyclVSTEV4dEpTRmlsZXMgPSB1cmxQYXJzZXJba2V5XS5leHRlcm5hbEpTRmlsZXM7XHJcbiAgICAgICAgICAgIGxvY2F0aW9ucy5wdXNoKGRlY29kZVVSSUNvbXBvbmVudChrZXkpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBjdXJyUGFnZSBlbmRwb2ludHNcclxuICAgICAgICAgICAgYWxsRW5kcG9pbnRzLnB1c2goLi4uY3VyclVSTEVuZHBvaW50cy5tYXAoKGVuZHBvaW50OiBhbnkpOiBFbmRwb2ludCA9PiAoe1xyXG4gICAgICAgICAgICAgIHVybDogZW5kcG9pbnQsXHJcbiAgICAgICAgICAgICAgZm91bmRBdDogZGVjb2RlVVJJQ29tcG9uZW50KGtleSksIC8vIEZvdW5kIGF0IHRoZSBtYWluIHdlYnBhZ2VcclxuICAgICAgICAgICAgICB3ZWJwYWdlOiBkZWNvZGVVUklDb21wb25lbnQoa2V5KSxcclxuICAgICAgICAgICAgfSkpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBleHRlcm5hbEpTRmlsZXMgZW5kcG9pbnRzXHJcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGN1cnJVUkxFeHRKU0ZpbGVzKS5mb3JFYWNoKChbanNGaWxlLCBlbmRwb2ludHNdKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgZGVjb2RlZEpzRmlsZSA9IGRlY29kZVVSSUNvbXBvbmVudChqc0ZpbGUpO1xyXG4gICAgICAgICAgICAgIGlmICghbG9jYXRpb25zLmluY2x1ZGVzKGRlY29kZWRKc0ZpbGUpKSB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnMucHVzaChkZWNvZGVkSnNGaWxlKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYWxsRW5kcG9pbnRzLnB1c2goLi4uKGVuZHBvaW50cyBhcyBhbnkpLm1hcCgoZW5kcG9pbnQ6IGFueSk6IEVuZHBvaW50ID0+ICh7XHJcbiAgICAgICAgICAgICAgICB1cmw6IGVuZHBvaW50LFxyXG4gICAgICAgICAgICAgICAgZm91bmRBdDogZGVjb2RlZEpzRmlsZSwgLy8gRm91bmQgYXQgdGhlIHNwZWNpZmljIEpTIGZpbGVcclxuICAgICAgICAgICAgICAgIHdlYnBhZ2U6IGRlY29kZVVSSUNvbXBvbmVudChrZXkpLFxyXG4gICAgICAgICAgICAgIH0pKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBFbnN1cmUgXCJBbGxcIiBpcyBpbmNsdWRlZCBvbmx5IG9uY2UgYW5kIG90aGVyIGxvY2F0aW9ucyBhcmUgdW5pcXVlXHJcbiAgICAgICAgc2V0VVJMcyhhbGxFbmRwb2ludHMpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gSW5pdGlhbCBmZXRjaFxyXG4gICAgZmV0Y2hEYXRhKCk7XHJcblxyXG4gICAgLy8gTGlzdGVuZXIgZm9yIHN0b3JhZ2UgY2hhbmdlc1xyXG4gICAgY29uc3QgaGFuZGxlU3RvcmFnZUNoYW5nZSA9IChjaGFuZ2VzOiB7IFtrZXk6IHN0cmluZ106IGJyb3dzZXIuU3RvcmFnZS5TdG9yYWdlQ2hhbmdlIH0pID0+IHtcclxuICAgICAgaWYgKGNoYW5nZXNbXCJVUkwtUEFSU0VSXCJdKSB7XHJcbiAgICAgICAgZmV0Y2hEYXRhKCk7IC8vIFJlLWZldGNoIGRhdGEgd2hlbiBVUkwtUEFSU0VSIGNoYW5nZXNcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBicm93c2VyLnN0b3JhZ2Uub25DaGFuZ2VkLmFkZExpc3RlbmVyKGhhbmRsZVN0b3JhZ2VDaGFuZ2UpO1xyXG5cclxuICAgIC8vIENsZWFudXAgbGlzdGVuZXIgb24gY29tcG9uZW50IHVubW91bnRcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGJyb3dzZXIuc3RvcmFnZS5vbkNoYW5nZWQucmVtb3ZlTGlzdGVuZXIoaGFuZGxlU3RvcmFnZUNoYW5nZSk7XHJcbiAgICB9O1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtMiBtbC0xXCI+XHJcbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtkb3dubG9hZFVSTHNBc1R4dH0gY2xhc3NOYW1lPVwibXQtNCBwLTIgdGV4dC13aGl0ZSBiZy10cmFuc3BhcmVudCBib3JkZXIgYm9yZGVyLWdyYXktNTAwIG1iLTUgcm91bmRlZFwiPlxyXG4gICAgICAgICAgICBEb3dubG9hZCBVUkxzIGFzIC50eHRcclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8cHJlIGNsYXNzTmFtZT1cImJnLWdyYXktNTAwIHAtMiBtYi00XCI+XHJcbiAgICAgICAgICAgICAgICAgIHtgXHJcbiAgICAgICAgICBTaG93aW5nIG1vZGlmaWVkIHJlbGF0aXZlIHBhdGhzIChmb3JtYXQ6IHJvb3Qgd2VicGFnZSArIHJlbGF0aXZlIHBhdGhzKVxyXG4gICAgICAgICAgRXhhbXBsZTogaHR0cHM6Ly93d3cuZXhhbXBsZS5jb20gKyAvaGVscDogaHR0cHM6Ly93d3cuZXhhbXBsZS5jb20vaGVscFxyXG4gICAgICAgICAgYW5kIGFic29sdXRlIHVybHNcclxuICAgICAgICAgIGB9XHJcbiAgICAgICAgPC9wcmU+XHJcbiAgICAgICAge3VybHMubWFwKChlbmRwb2ludCwgaW5kZXgpID0+IChcclxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiXCIga2V5PXtpbmRleH0+e3Nhbml0aXplZFVSTChlbmRwb2ludCl9PC9wPlxyXG4gICAgICAgICkpfVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBicm93c2VyIGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVVJMc0NTVigpIHtcclxuICBpbnRlcmZhY2UgRW5kcG9pbnQge1xyXG4gICAgdXJsOiBzdHJpbmc7XHJcbiAgICBmb3VuZEF0OiBzdHJpbmc7XHJcbiAgICB3ZWJwYWdlOiBzdHJpbmc7XHJcbiAgfVxyXG5cclxuICBpbnRlcmZhY2UgVVJMRW50cnkge1xyXG4gICAgY3VyclBhZ2U6IHN0cmluZ1tdO1xyXG4gICAgZXh0ZXJuYWxKU0ZpbGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZ1tdIH07XHJcbiAgfVxyXG5cclxuICBpbnRlcmZhY2UgVVJMUGFyc2VyIHtcclxuICAgIFtrZXk6IHN0cmluZ106IFVSTEVudHJ5O1xyXG4gIH1cclxuXHJcbiAgdHlwZSBMb2NhdGlvbiA9IHN0cmluZztcclxuXHJcbiAgY29uc3QgW3VybHMsIHNldFVSTHNdID0gdXNlU3RhdGU8RW5kcG9pbnRbXT4oW10pO1xyXG5cclxuICAvLyBGdW5jdGlvbiB0byBzYW5pdGl6ZSBVUkxzXHJcbiAgY29uc3Qgc2FuaXRpemVkVVJMID0gKGVuZHBvaW50OiBFbmRwb2ludCkgPT4ge1xyXG4gICAgbGV0IHZlcmlmaWVkVVJMOiBzdHJpbmc7XHJcbiAgICBjb25zdCBjbGVhbmVkV2VicGFnZSA9IGVuZHBvaW50LndlYnBhZ2UucmVwbGFjZSgvXFwvJC8sICcnKS5zcGxpdCgnIycpWzBdO1xyXG5cclxuICAgIGlmIChlbmRwb2ludC51cmwgJiYgKGVuZHBvaW50LnVybC5zdGFydHNXaXRoKFwiaHR0cDovL1wiKSB8fCBlbmRwb2ludC51cmwuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpKSkge1xyXG4gICAgICB2ZXJpZmllZFVSTCA9IGVuZHBvaW50LnVybDtcclxuICAgIH0gZWxzZSBpZiAoZW5kcG9pbnQudXJsLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG4gICAgICB2ZXJpZmllZFVSTCA9IGNsZWFuZWRXZWJwYWdlICsgZW5kcG9pbnQudXJsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmVyaWZpZWRVUkwgPSBjbGVhbmVkV2VicGFnZSArICcvJyArIGVuZHBvaW50LnVybDtcclxuICAgIH1cclxuICAgIHZlcmlmaWVkVVJMID0gdmVyaWZpZWRVUkwucmVwbGFjZSgvKFteOl1cXC8pXFwvKy9nLCBcIiQxXCIpO1xyXG5cclxuICAgIHJldHVybiB2ZXJpZmllZFVSTDtcclxuICB9O1xyXG5cclxuICAvLyBGdW5jdGlvbiB0byBkb3dubG9hZCBVUkxzIGFzIGEgLmNzdiBmaWxlXHJcbiAgY29uc3QgZG93bmxvYWRVUkxzQXNDc3YgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjc3ZIZWFkZXIgPSAnZW5kcG9pbnQscGFyc2VkIGZyb20scm9vdCB3ZWJwYWdlXFxuJzsgLy8gQ1NWIGhlYWRlclxyXG4gICAgY29uc3QgY3N2Q29udGVudCA9IHVybHMubWFwKChlbmRwb2ludCkgPT4gXHJcbiAgICAgIGAke3Nhbml0aXplZFVSTChlbmRwb2ludCl9LCR7ZW5kcG9pbnQuZm91bmRBdH0sJHtlbmRwb2ludC53ZWJwYWdlfWBcclxuICAgICkuam9pbignXFxuJyk7IC8vIEpvaW4gZWFjaCBlbmRwb2ludCByb3cgd2l0aCBuZXdsaW5lXHJcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2NzdkhlYWRlciArIGNzdkNvbnRlbnRdLCB7IHR5cGU6ICd0ZXh0L2NzdicgfSk7XHJcbiAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgbGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgIGxpbmsuZG93bmxvYWQgPSAndXJscy5jc3YnO1xyXG4gICAgbGluay5jbGljaygpO1xyXG4gIH07XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBmZXRjaERhdGEgPSAoKSA9PiB7XHJcbiAgICAgIGxldCBhbGxFbmRwb2ludHM6IEVuZHBvaW50W10gPSBbXTtcclxuICAgICAgbGV0IGxvY2F0aW9uczogTG9jYXRpb25bXSA9IFtdO1xyXG5cclxuICAgICAgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldChcIlVSTC1QQVJTRVJcIikudGhlbigoZGF0YTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybFBhcnNlciA9IGRhdGFbXCJVUkwtUEFSU0VSXCJdO1xyXG5cclxuICAgICAgICBPYmplY3Qua2V5cyh1cmxQYXJzZXIpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgaWYgKGtleSAhPT0gXCJjdXJyZW50XCIpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VyclVSTEVuZHBvaW50cyA9IHVybFBhcnNlcltrZXldLmN1cnJQYWdlO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyVVJMRXh0SlNGaWxlcyA9IHVybFBhcnNlcltrZXldLmV4dGVybmFsSlNGaWxlcztcclxuICAgICAgICAgICAgbG9jYXRpb25zLnB1c2goZGVjb2RlVVJJQ29tcG9uZW50KGtleSkpO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGN1cnJQYWdlIGVuZHBvaW50c1xyXG4gICAgICAgICAgICBhbGxFbmRwb2ludHMucHVzaCguLi5jdXJyVVJMRW5kcG9pbnRzLm1hcCgoZW5kcG9pbnQ6IGFueSk6IEVuZHBvaW50ID0+ICh7XHJcbiAgICAgICAgICAgICAgdXJsOiBlbmRwb2ludCxcclxuICAgICAgICAgICAgICBmb3VuZEF0OiBkZWNvZGVVUklDb21wb25lbnQoa2V5KSwgLy8gRm91bmQgYXQgdGhlIG1haW4gd2VicGFnZVxyXG4gICAgICAgICAgICAgIHdlYnBhZ2U6IGRlY29kZVVSSUNvbXBvbmVudChrZXkpLFxyXG4gICAgICAgICAgICB9KSkpO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGV4dGVybmFsSlNGaWxlcyBlbmRwb2ludHNcclxuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoY3VyclVSTEV4dEpTRmlsZXMpLmZvckVhY2goKFtqc0ZpbGUsIGVuZHBvaW50c10pID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCBkZWNvZGVkSnNGaWxlID0gZGVjb2RlVVJJQ29tcG9uZW50KGpzRmlsZSk7XHJcbiAgICAgICAgICAgICAgaWYgKCFsb2NhdGlvbnMuaW5jbHVkZXMoZGVjb2RlZEpzRmlsZSkpIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9ucy5wdXNoKGRlY29kZWRKc0ZpbGUpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBhbGxFbmRwb2ludHMucHVzaCguLi4oZW5kcG9pbnRzIGFzIGFueSkubWFwKChlbmRwb2ludDogYW55KTogRW5kcG9pbnQgPT4gKHtcclxuICAgICAgICAgICAgICAgIHVybDogZW5kcG9pbnQsXHJcbiAgICAgICAgICAgICAgICBmb3VuZEF0OiBkZWNvZGVkSnNGaWxlLCAvLyBGb3VuZCBhdCB0aGUgc3BlY2lmaWMgSlMgZmlsZVxyXG4gICAgICAgICAgICAgICAgd2VicGFnZTogZGVjb2RlVVJJQ29tcG9uZW50KGtleSksXHJcbiAgICAgICAgICAgICAgfSkpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEVuc3VyZSBcIkFsbFwiIGlzIGluY2x1ZGVkIG9ubHkgb25jZSBhbmQgb3RoZXIgbG9jYXRpb25zIGFyZSB1bmlxdWVcclxuICAgICAgICBzZXRVUkxzKGFsbEVuZHBvaW50cyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBJbml0aWFsIGZldGNoXHJcbiAgICBmZXRjaERhdGEoKTtcclxuXHJcbiAgICAvLyBMaXN0ZW5lciBmb3Igc3RvcmFnZSBjaGFuZ2VzXHJcbiAgICBjb25zdCBoYW5kbGVTdG9yYWdlQ2hhbmdlID0gKGNoYW5nZXM6IHsgW2tleTogc3RyaW5nXTogYnJvd3Nlci5TdG9yYWdlLlN0b3JhZ2VDaGFuZ2UgfSkgPT4ge1xyXG4gICAgICBpZiAoY2hhbmdlc1tcIlVSTC1QQVJTRVJcIl0pIHtcclxuICAgICAgICBmZXRjaERhdGEoKTsgLy8gUmUtZmV0Y2ggZGF0YSB3aGVuIFVSTC1QQVJTRVIgY2hhbmdlc1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGJyb3dzZXIuc3RvcmFnZS5vbkNoYW5nZWQuYWRkTGlzdGVuZXIoaGFuZGxlU3RvcmFnZUNoYW5nZSk7XHJcblxyXG4gICAgLy8gQ2xlYW51cCBsaXN0ZW5lciBvbiBjb21wb25lbnQgdW5tb3VudFxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgYnJvd3Nlci5zdG9yYWdlLm9uQ2hhbmdlZC5yZW1vdmVMaXN0ZW5lcihoYW5kbGVTdG9yYWdlQ2hhbmdlKTtcclxuICAgIH07XHJcbiAgfSwgW10pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJtdC0yIG1sLTFcIj5cclxuICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtkb3dubG9hZFVSTHNBc0Nzdn0gY2xhc3NOYW1lPVwibXQtNCBwLTIgdGV4dC13aGl0ZSBiZy10cmFuc3BhcmVudCBib3JkZXIgYm9yZGVyLWdyYXktNTAwIG1iLTUgcm91bmRlZFwiPlxyXG4gICAgICAgIERvd25sb2FkIFVSTHMgYXMgLmNzdlxyXG4gICAgICA8L2J1dHRvbj5cclxuICAgICAgey8qIENTViBTeW50YXggRGlzcGxheSAqL31cclxuICAgICAgPHByZSBjbGFzc05hbWU9XCJiZy1ncmF5LTUwMCBwLTIgbWItNFwiPlxyXG4gICAgICAgIGVuZHBvaW50LHBhcnNlZCBmcm9tLHJvb3Qgd2VicGFnZVxyXG4gICAgICA8L3ByZT5cclxuICAgICAgey8qIERpc3BsYXkgVVJMcyBpbiBDU1YgZm9ybWF0ICovfVxyXG4gICAgICA8cHJlIGNsYXNzTmFtZT1cInRleHQtbWQgcC0yXCI+XHJcbiAgICAgICAge3VybHMubWFwKChlbmRwb2ludCwgaW5kZXgpID0+IFxyXG4gICAgICAgICAgYCR7c2FuaXRpemVkVVJMKGVuZHBvaW50KX0sJHtlbmRwb2ludC5mb3VuZEF0fSwke2VuZHBvaW50LndlYnBhZ2V9YFxyXG4gICAgICAgICkuam9pbignXFxuJyl9XHJcbiAgICAgIDwvcHJlPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBicm93c2VyIGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVVJMc1VubW9kaWZpZWQoKSB7XHJcbiAgLy8gU2ltcGxpZmllZCBFbmRwb2ludCBpbnRlcmZhY2UgdG8gb25seSBpbmNsdWRlICd1cmwnXHJcbiAgaW50ZXJmYWNlIEVuZHBvaW50IHtcclxuICAgIHVybDogc3RyaW5nO1xyXG4gIH1cclxuXHJcbiAgaW50ZXJmYWNlIFVSTEVudHJ5IHtcclxuICAgIGN1cnJQYWdlOiBzdHJpbmdbXTtcclxuICAgIGV4dGVybmFsSlNGaWxlczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmdbXSB9O1xyXG4gIH1cclxuXHJcbiAgaW50ZXJmYWNlIFVSTFBhcnNlciB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBVUkxFbnRyeTtcclxuICB9XHJcblxyXG4gIGNvbnN0IFt1cmxzLCBzZXRVUkxzXSA9IHVzZVN0YXRlPEVuZHBvaW50W10+KFtdKTtcclxuXHJcbiAgLy8gRnVuY3Rpb24gdG8gZG93bmxvYWQgVVJMcyBhcyBhIC50eHQgZmlsZVxyXG4gIGNvbnN0IGRvd25sb2FkVVJMc0FzVHh0ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgdXJsU3RyaW5ncyA9IHVybHMubWFwKChlbmRwb2ludCkgPT4gZW5kcG9pbnQudXJsKS5qb2luKCdcXG4nKTsgLy8gRXh0cmFjdCBvbmx5IHRoZSBVUkxzXHJcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW3VybFN0cmluZ3NdLCB7IHR5cGU6ICd0ZXh0L3BsYWluJyB9KTtcclxuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICBsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG4gICAgbGluay5kb3dubG9hZCA9ICd1cmxzLnR4dCc7XHJcbiAgICBsaW5rLmNsaWNrKCk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IGZldGNoRGF0YSA9ICgpID0+IHtcclxuICAgICAgbGV0IGFsbEVuZHBvaW50czogRW5kcG9pbnRbXSA9IFtdO1xyXG4gIFxyXG4gICAgICBicm93c2VyLnN0b3JhZ2UubG9jYWwuZ2V0KFwiVVJMLVBBUlNFUlwiKS50aGVuKChkYXRhOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsUGFyc2VyID0gZGF0YVtcIlVSTC1QQVJTRVJcIl07XHJcbiAgXHJcbiAgICAgICAgT2JqZWN0LmtleXModXJsUGFyc2VyKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgIGlmIChrZXkgIT09IFwiY3VycmVudFwiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJVUkxFbmRwb2ludHM6IHN0cmluZ1tdID0gdXJsUGFyc2VyW2tleV0uY3VyclBhZ2U7IC8vIEV4cGxpY2l0bHkgdHlwaW5nIGFzIHN0cmluZyBhcnJheVxyXG4gICAgICAgICAgICBjb25zdCBjdXJyVVJMRXh0SlNGaWxlczogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+ID0gdXJsUGFyc2VyW2tleV0uZXh0ZXJuYWxKU0ZpbGVzOyAvLyBBc3N1bWluZyBpdCdzIGFuIG9iamVjdCB3aXRoIHN0cmluZyBhcnJheXNcclxuICBcclxuICAgICAgICAgICAgLy8gQWRkIGN1cnJQYWdlIGVuZHBvaW50cyAob25seSBzdG9yZSBVUkwpXHJcbiAgICAgICAgICAgIGFsbEVuZHBvaW50cy5wdXNoKFxyXG4gICAgICAgICAgICAgIC4uLmN1cnJVUkxFbmRwb2ludHMubWFwKChlbmRwb2ludDogc3RyaW5nKTogRW5kcG9pbnQgPT4gKHtcclxuICAgICAgICAgICAgICAgIHVybDogZW5kcG9pbnQsXHJcbiAgICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgICk7XHJcbiAgXHJcbiAgICAgICAgICAgIC8vIEFkZCBleHRlcm5hbEpTRmlsZXMgZW5kcG9pbnRzIChvbmx5IHN0b3JlIFVSTClcclxuICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhjdXJyVVJMRXh0SlNGaWxlcykuZm9yRWFjaCgoZW5kcG9pbnRzOiBzdHJpbmdbXSkgPT4ge1xyXG4gICAgICAgICAgICAgIGFsbEVuZHBvaW50cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgLi4uZW5kcG9pbnRzLm1hcCgoZW5kcG9pbnQ6IHN0cmluZyk6IEVuZHBvaW50ID0+ICh7XHJcbiAgICAgICAgICAgICAgICAgIHVybDogZW5kcG9pbnQsXHJcbiAgICAgICAgICAgICAgICB9KSlcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICBcclxuICAgICAgICBzZXRVUkxzKGFsbEVuZHBvaW50cyk7IC8vIFVwZGF0ZSBzdGF0ZSB3aXRoIFVSTHMgb25seVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgXHJcbiAgICAvLyBJbml0aWFsIGZldGNoXHJcbiAgICBmZXRjaERhdGEoKTtcclxuICBcclxuICAgIC8vIExpc3RlbmVyIGZvciBzdG9yYWdlIGNoYW5nZXNcclxuICAgIGNvbnN0IGhhbmRsZVN0b3JhZ2VDaGFuZ2UgPSAoY2hhbmdlczogeyBba2V5OiBzdHJpbmddOiBicm93c2VyLlN0b3JhZ2UuU3RvcmFnZUNoYW5nZSB9KSA9PiB7XHJcbiAgICAgIGlmIChjaGFuZ2VzW1wiVVJMLVBBUlNFUlwiXSkge1xyXG4gICAgICAgIGZldGNoRGF0YSgpOyAvLyBSZS1mZXRjaCBkYXRhIHdoZW4gVVJMLVBBUlNFUiBjaGFuZ2VzXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgXHJcbiAgICBicm93c2VyLnN0b3JhZ2Uub25DaGFuZ2VkLmFkZExpc3RlbmVyKGhhbmRsZVN0b3JhZ2VDaGFuZ2UpO1xyXG4gIFxyXG4gICAgLy8gQ2xlYW51cCBsaXN0ZW5lciBvbiBjb21wb25lbnQgdW5tb3VudFxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgYnJvd3Nlci5zdG9yYWdlLm9uQ2hhbmdlZC5yZW1vdmVMaXN0ZW5lcihoYW5kbGVTdG9yYWdlQ2hhbmdlKTtcclxuICAgIH07XHJcbiAgfSwgW10pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJtdC0yIG1sLTFcIj5cclxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2Rvd25sb2FkVVJMc0FzVHh0fSBjbGFzc05hbWU9XCJtdC00IHAtMiB0ZXh0LXdoaXRlIGJnLXRyYW5zcGFyZW50IGJvcmRlciBib3JkZXItZ3JheS01MDAgbWItNSByb3VuZGVkXCI+XHJcbiAgICAgICAgICAgIERvd25sb2FkIFVSTHMgYXMgLnR4dFxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDxwcmUgY2xhc3NOYW1lPVwiYmctZ3JheS01MDAgcC0yIG1iLTRcIj5cclxuICAgICAgICAgIHNob3dpbmcgdW1vZGlmaWVkIHJlbGF0aXZlIHBhdGhzIGFuZCBhYnNvbHV0ZSBwYXRoc1xyXG4gICAgICAgIDwvcHJlPlxyXG4gICAgICAgIHt1cmxzLm1hcCgoZW5kcG9pbnQsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJcIiBrZXk9e2luZGV4fT57ZW5kcG9pbnQudXJsfTwvcD5cclxuICAgICAgICApKX1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIiwiaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFVSTHNQbGFpbiB9IGZyb20gJy4vdXJscy1wbGFpbidcclxuaW1wb3J0IHsgVVJMc0NTViB9IGZyb20gJy4vdXJscy1jc3YnXHJcbmltcG9ydCB7IFVSTHNVbm1vZGlmaWVkIH0gZnJvbSAnLi91cmxzLXVubW9kaWZpZWQnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVVJMc091dHB1dCgpIHtcclxuICAgIGNvbnN0IFtzZWxlY3Rpb24sIHNldFNlbGVjdGlvbl0gPSB1c2VTdGF0ZShcInR4dFwiKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleFwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e2BweC0xMCBweS0yIGZvbnQtc2VtaWJvbGQgJHtzZWxlY3Rpb24gPT0gXCJ0eHRcIiA/IFwidGV4dC1wdXJwbGUtNTAwIGJnLWJsYWNrXCI6IFwiXCJ9YH0gb25DbGljaz17KCkgPT4gc2V0U2VsZWN0aW9uKFwidHh0XCIpfT5UWFQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtgcHgtMTAgcHktMiBmb250LXNlbWlib2xkICR7c2VsZWN0aW9uID09IFwiY3N2XCIgPyBcInRleHQtcHVycGxlLTUwMCBiZy1ibGFja1wiOiBcIlwifWB9IG9uQ2xpY2s9eygpID0+IHNldFNlbGVjdGlvbihcImNzdlwiKX0+Q1NWPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17YHB4LTEwIHB5LTIgZm9udC1zZW1pYm9sZCAke3NlbGVjdGlvbiA9PSBcInVubW9kaWZpZWRcIiA/IFwidGV4dC1wdXJwbGUtNTAwIGJnLWJsYWNrXCI6IFwiXCJ9YH0gb25DbGljaz17KCkgPT4gc2V0U2VsZWN0aW9uKFwidW5tb2RpZmllZFwiKX0+VU5NT0RJRklFRDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJweS0xXCI+PC9kaXY+XHJcbiAgICAgICAgICAgIHtzZWxlY3Rpb24gPT09IFwidHh0XCIgJiYgPFVSTHNQbGFpbiAvPn1cclxuICAgICAgICAgICAge3NlbGVjdGlvbiA9PT0gXCJjc3ZcIiAmJiA8VVJMc0NTViAvPn1cclxuICAgICAgICAgICAge3NlbGVjdGlvbiA9PT0gXCJ1bm1vZGlmaWVkXCIgJiYgPFVSTHNVbm1vZGlmaWVkIC8+fVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufVxyXG4iLCJpbXBvcnQgeyBTdHJpY3RNb2RlIH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tICdyZWFjdC1kb20vY2xpZW50J1xyXG5pbXBvcnQge1xyXG4gIEhhc2hSb3V0ZXIgYXMgUm91dGVyLFxyXG4gIFJvdXRlLFxyXG4gIFJvdXRlcyxcclxufSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5pbXBvcnQgUG9wVXBBcHAgZnJvbSAnLi9Qb3BVcEFwcCdcclxuaW1wb3J0ICcuL2luZGV4LmNzcydcclxuaW1wb3J0IHsgVVJMcyB9IGZyb20gJy4uL3JvdXRlcy91cmxzJ1xyXG5cclxuaW1wb3J0IHsgVVJMc091dHB1dCB9IGZyb20gJy4uL3JvdXRlcy91cmxzLW91dHB1dCdcclxuXHJcbmNvbnN0IHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKTtcclxuaWYgKHJvb3RFbGVtZW50KSB7XHJcbiAgY3JlYXRlUm9vdChyb290RWxlbWVudCkucmVuZGVyKFxyXG4gICAgPFN0cmljdE1vZGU+XHJcbiAgICAgIDxSb3V0ZXI+XHJcbiAgICAgICAgPFJvdXRlcz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiXCIgZWxlbWVudD17PFBvcFVwQXBwIC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdXJsc1wiIGVsZW1lbnQ9ezxVUkxzIC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdXJscy9vdXRwdXRcIiBlbGVtZW50PXs8VVJMc091dHB1dCAvPn0gLz5cclxuICAgICAgICA8L1JvdXRlcz5cclxuICAgICAgPC9Sb3V0ZXI+XHJcbiAgICA8L1N0cmljdE1vZGU+XHJcbiAgKTtcclxuICB9IGVsc2Uge1xyXG4gIGNvbnNvbGUuZXJyb3IoJ1Jvb3QgZWxlbWVudCBub3QgZm91bmQnKTtcclxufSJdLCJuYW1lcyI6WyJMb2dvIiwiUG9wVXBBcHAiLCJzdGF0ZSIsInNldFN0YXRlIiwidXNlU3RhdGUiLCJpbnB1dFJlZiIsInVzZVJlZiIsInVzZUVmZmVjdCIsInVwZGF0ZUFsbFN0YXRlIiwibGlzdGVuZXIiLCJjaGFuZ2VzIiwicHJldlN0YXRlIiwiYnJvd3NlciIsImF1dG9QYXJzZXJTdGF0ZSIsInNjb3BlUmVzdWx0IiwicmVxQW10UmVzdWx0IiwidGFicyIsInVybENvdW50IiwianNGaWxlQ291bnQiLCJlcnJvciIsImhhbmRsZUFjdGlvbiIsImFjdGlvbiIsInBheWxvYWQiLCJyZXNwb25zZSIsInBhcnNlVVJMcyIsImNsZWFyVVJMcyIsImNvdW50VVJMcyIsImhhbmRsZUNoYW5nZSIsInRvZ2dsZVVybFBhcnNlclN0YXRlIiwibmV3U3RhdGUiLCJoYW5kbGVBZGRTY29wZSIsIm5ld1Njb3BlIiwidXBkYXRlZFNjb3BlcyIsImhhbmRsZVJlbW92ZVNjb3BlIiwic2NvcGVUb1JlbW92ZSIsInNjb3BlIiwiaGFuZGxlUmVxQW10IiwiZSIsIm5ld1JlcUFtdFZhbHVlIiwiY2xlYXJDYWNoZSIsImNsZWFyQWxsU2NvcGVzIiwiRGlzcGxheVN0YXRlIiwianN4IiwianN4cyIsIkRpc3BsYXlTY29wZSIsIm9uUmVtb3ZlIiwiaW5kZXgiLCJVUkxzUGxhaW4iLCJ1cmxzIiwic2V0VVJMcyIsInNhbml0aXplZFVSTCIsImVuZHBvaW50IiwidmVyaWZpZWRVUkwiLCJjbGVhbmVkV2VicGFnZSIsImRvd25sb2FkVVJMc0FzVHh0IiwidXJsU3RyaW5ncyIsImJsb2IiLCJsaW5rIiwiZmV0Y2hEYXRhIiwiYWxsRW5kcG9pbnRzIiwiZGF0YSIsInVybFBhcnNlciIsImtleSIsImN1cnJVUkxFbmRwb2ludHMiLCJjdXJyVVJMRXh0SlNGaWxlcyIsImpzRmlsZSIsImVuZHBvaW50cyIsImRlY29kZWRKc0ZpbGUiLCJoYW5kbGVTdG9yYWdlQ2hhbmdlIiwiVVJMc0NTViIsImRvd25sb2FkVVJMc0FzQ3N2IiwiY3N2SGVhZGVyIiwiY3N2Q29udGVudCIsIlVSTHNVbm1vZGlmaWVkIiwiVVJMc091dHB1dCIsInNlbGVjdGlvbiIsInNldFNlbGVjdGlvbiIsInJvb3RFbGVtZW50IiwiY3JlYXRlUm9vdCIsIlN0cmljdE1vZGUiLCJSb3V0ZXIiLCJSb3V0ZXMiLCJSb3V0ZSIsIlVSTHMiXSwibWFwcGluZ3MiOiI4TEFBQSxNQUFlQSxFQUFBLHlCQ2NmLFNBQVNDLEdBQVcsQ0FDbEIsS0FBTSxDQUFDQyxFQUFPQyxDQUFRLEVBQUlDLFdBQW1CLENBQzNDLFVBQVcsR0FDWCxTQUFVLEVBQ1YsWUFBYSxFQUNiLE9BQVEsQ0FBQyxFQUNULE9BQVEsQ0FBQSxDQUNULEVBQ0tDLEVBQVdDLFNBQWdDLElBQUksRUFFckRDLEVBQUFBLFVBQVUsSUFBTSxDQUNDQyxJQUVULE1BQUFDLEVBQVlDLEdBRVosQ0FDQUEsRUFBUSxtQkFDVlAsRUFBVVEsSUFBZSxDQUN2QixHQUFHQSxFQUNILFVBQVdELEVBQVEsa0JBQWtCLFFBQ3JDLEVBQUEsQ0FDSixFQUdNLE9BQUFFLEVBQUEsUUFBUSxVQUFVLFlBQVlILENBQVEsRUFFdkMsSUFBTSxDQUNIRyxFQUFBLFFBQVEsVUFBVSxlQUFlSCxDQUFRLENBQUEsQ0FFckQsRUFBRyxDQUFFLENBQUEsRUFFTCxNQUFNRCxFQUFpQixTQUFZLENBQzdCLEdBQUEsQ0FDRixLQUFNLENBQUNLLEVBQWlCQyxFQUFhQyxDQUFZLEVBQUksTUFBTSxRQUFRLElBQUksQ0FDckVILEVBQVEsUUFBUSxZQUFZLENBQzFCLE9BQVEsb0JBQUEsQ0FDVCxFQUNEQSxFQUFRLFFBQVEsTUFBTSxJQUFJLE9BQU8sRUFDakNBLEVBQVEsUUFBUSxNQUFNLElBQUksVUFBVSxDQUFBLENB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
