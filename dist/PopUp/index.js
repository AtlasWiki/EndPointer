import"../assets/modulepreload-polyfill.B5Qt9EMX.js";import{r as p,b as n,j as e}from"../assets/index.1CxfGuLD.js";import{c as F,H as E,R as S,a as L,U as A}from"../assets/urls.hay10t9k.js";const P="/assets/EndPointer.png";function k(){const[o,c]=p.useState({urlParser:!1,urlCount:0,jsFileCount:0,scopes:[],reqAmt:1}),x=p.useRef(null);p.useEffect(()=>{m();const r=l=>{l.autoParserEnabled&&c(i=>({...i,urlParser:l.autoParserEnabled.newValue}))};return n.storage.onChanged.addListener(r),()=>{n.storage.onChanged.removeListener(r)}},[]);const m=async()=>{try{const[r,l,i]=await Promise.all([n.runtime.sendMessage({action:"getAutoParserState"}),n.storage.local.get("scope"),n.storage.local.get("requests")]);c(N=>({...N,urlParser:r.state??!1,scopes:l.scope||[],reqAmt:i.requests||1}));const b=await n.tabs.query({active:!0,currentWindow:!0});if(b[0]?.id){const[N,y]=await Promise.all([n.tabs.sendMessage(b[0].id,{action:"countURLs"}),n.tabs.sendMessage(b[0].id,{action:"countJSFiles"})]);c(C=>({...C,urlCount:N.count??0,jsFileCount:y.count??0}))}}catch(r){console.error("Failed to update state:",r)}},t=async(r,l)=>{try{const i=await n.tabs.query({active:!0,currentWindow:!0});if(i[0]?.id){const b=await n.tabs.sendMessage(i[0].id,{action:r,...l});if(!b.success)throw new Error(b.error);await m()}}catch(i){console.error(`Error in ${r}:`,i)}},s=()=>t("reparse"),a=()=>t("clearURLs"),h=()=>t("countURLs");p.useEffect(()=>{const r=()=>{h()};return n.storage.onChanged.addListener(r),()=>{n.storage.onChanged.removeListener(r)}},[]);const d=async()=>{const r=!o.urlParser;(await n.runtime.sendMessage({action:"setAutoParserState",state:r})).success&&c(i=>({...i,urlParser:r}))},u=()=>{const r=x.current?.value;r&&(c(l=>{const i=[...l.scopes,r];return n.storage.local.set({scope:i}),{...l,scopes:i}}),x.current&&(x.current.value=""))},w=r=>{c(l=>{const i=l.scopes.filter(b=>b!==r);return n.storage.local.set({scope:i}),{...l,scopes:i}})},f=r=>{const l=Number(r.target.value);c(i=>({...i,reqAmt:l})),n.storage.local.set({requests:l}),console.log(`set requests to ${l}`)},g=async()=>{await n.storage.local.clear(),alert("Cache cleared"),m()},j=()=>{n.storage.local.set({scope:[]}),c(r=>({...r,scopes:[]}))},R=({state:r})=>e.jsx("div",{className:"flex",children:e.jsxs("div",{className:"flex items-center",children:[e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsx("path",{fill:r?"#82e467":"#e63946",d:"M12 18a6 6 0 1 0 0-12a6 6 0 0 0 0 12"})}),e.jsx("span",{className:r?"text-white  font-semibold":"text-customFont  font-semibold",children:r?"ON":"OFF"})]})}),v=({scope:r,onRemove:l})=>e.jsxs("div",{className:"flex justify-between items-center gap-3",children:[e.jsx("span",{className:"text-white py-1 px-1",children:r}),e.jsx("button",{className:"text-center pl-1 bg-transparent text-rose-500",onClick:l,children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsx("path",{fill:"#df4950",d:"M19 12.998H5v-2h14z"})})})]});return e.jsxs("div",{className:"bg-customBg w-full md:h-screen m-0  md:justify-center py-5 px-3",children:[e.jsxs("div",{className:"text-center",children:[e.jsx("div",{className:"flex",children:e.jsxs("div",{className:"flex gap-3 justify-center mb-5",children:[e.jsx("img",{src:P,style:{width:"12%",height:"77%"}}),e.jsx("h1",{className:"text-3xl text-customRed font-bold md:text-6xl mb-1",children:"EndPointer"})]})}),e.jsxs("div",{className:"flex flex-col justify-center gap-2 items-center w-full mx-0",children:[e.jsxs("div",{className:"flex flex-col gap-2 md:gap-5 w-full",children:[e.jsxs("button",{className:" w-full font-semibold border-2 rounded-sm p-2 border-customFont bg-gradient-to-r from-customFont to-customBg text-white",children:[e.jsx("span",{className:"text-white",children:"URLs"})," (",o.urlCount,")"]}),e.jsxs("div",{className:"text-md flex w-full gap-2 ",children:[e.jsx("button",{className:" p-2 rounded-sm w-[50%] border-2 border-customFont  bg-customFont flex justify-center items-center",onClick:a,children:e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"20",height:"20",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"none",stroke:"#e96c4c",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"2",d:"M4 7h16m-10 4v6m4-6v6M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2l1-12M9 7V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3"}),e.jsx("title",{children:"Delete URLs"})]})}),e.jsx("button",{className:" p-2 rounded-sm w-[50%] bg-customBg border-2 border-customFont flex justify-center items-center",onClick:g,children:e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"#FFFFFF",d:"M5.505 9.117a7.7 7.7 0 0 1-1.497-.852V12c0 .524.473 1.23 1.8 1.883c1.267.625 3.085 1.071 5.18 1.182a.76.76 0 0 1-.08 1.517c-2.242-.118-4.274-.598-5.772-1.336a7.3 7.3 0 0 1-1.128-.68V18.3c0 .282.127.61.476.973c.352.366.899.732 1.633 1.055c1.466.645 3.545 1.063 5.881 1.063q.867 0 1.683-.074a.76.76 0 0 1 .135 1.513a21 21 0 0 1-1.818.08c-2.496 0-4.792-.443-6.493-1.192c-.849-.374-1.584-.838-2.117-1.393c-.536-.558-.9-1.244-.9-2.025V5.7c0-.782.364-1.467.9-2.025c.533-.555 1.268-1.02 2.117-1.393c1.7-.749 3.997-1.193 6.493-1.193s4.793.444 6.493 1.193c.85.373 1.585.838 2.117 1.393c.537.558.9 1.243.9 2.025s-.363 1.467-.9 2.025c-.532.554-1.267 1.02-2.117 1.393c-1.7.748-3.996 1.192-6.493 1.192c-2.496 0-4.792-.444-6.493-1.192Zm-1.021-4.39c-.35.362-.476.69-.476.972s.127.61.476.972c.352.367.899.732 1.633 1.055c1.466.646 3.545 1.064 5.881 1.064s4.415-.418 5.882-1.064c.734-.323 1.28-.688 1.633-1.055c.35-.363.476-.69.476-.972s-.127-.61-.476-.973c-.353-.367-.9-.732-1.633-1.055c-1.467-.645-3.545-1.063-5.882-1.063s-4.415.418-5.88 1.063c-.735.323-1.282.688-1.634 1.055Z"}),e.jsx("path",{fill:"#FFFFFF",d:"M21.425 11.11a.5.5 0 0 0-.881-.418l-5.438 6.937a.5.5 0 0 0 .394.808h3.268l-.945 4.46a.5.5 0 0 0 .888.405l4.688-6.188a.5.5 0 0 0-.399-.802h-2.745z"}),e.jsx("title",{children:"Delete Cache"})]})})]})]}),e.jsxs("div",{className:"flex w-full mb-3 gap-2 justify-content items-center",children:[e.jsx("a",{href:document.location.origin+"/PopUp/popup.html#urls",target:"_blank",className:" p-2 rounded-sm w-[50%] bg-customFont border-2 border-customFont flex justify-center items-center text-white",children:"Panel"}),e.jsx("button",{className:" p-2 rounded-sm w-[50%] bg-customBg border-2 text-white border-customFont flex justify-center items-center",onClick:s,children:"REPARSE"})]})]})]}),e.jsxs("div",{className:"w-full text-center flex flex-col justify-center items-center",children:[e.jsx("h1",{className:"text-2xl text-customRed font-semibold mb-2",children:"Auto Parser"}),e.jsx("p",{className:"text-white mb-2",children:"Auto parses after page load"}),e.jsx("div",{className:"mb-2",children:e.jsx("button",{className:"bg-customBg border-2 border-customBg p-2",onClick:d,children:e.jsx(R,{state:o.urlParser})})})]}),e.jsxs("div",{className:"w-full text-center flex flex-col justify-center items-center",children:[e.jsx("h1",{className:"text-2xl text-customRed font-semibold mb-2",children:"Concurrent Requests"}),e.jsx("p",{className:"text-white",children:"A request of 1 is recommended for higher accuracy when dealing with big web apps with many dynamic js files"}),e.jsxs("div",{className:"mb-3",children:[e.jsx("div",{className:"mt-5 mb-1",children:e.jsx("span",{className:"w-full py-1 px-3 text-white bg-customFont font-semibold rounded-sm",children:o.reqAmt})}),e.jsx("input",{type:"range",min:"1",max:"10",value:o.reqAmt,onChange:f,className:"mt-1 w-64 h-2 mb-3 bg-customFont rounded-lg appearance-none cursor-pointer"})]})]}),e.jsxs("div",{className:"w-full text-center flex flex-col justify-center items-center p-6  rounded-lg shadow-lg",children:[e.jsx("h1",{className:"text-3xl text-customRed font-semibold mb-4",children:"SCOPE"}),e.jsxs("div",{className:"flex gap-1 items-center",children:[e.jsx("p",{className:"text-gray-300 w-full mb-3 text-sm",children:"Keep scope empty if you want to parse from all scopes"}),e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16",className:"text-gray-500 hover:text-blue-400 cursor-pointer",children:[e.jsx("path",{fill:"currentColor",d:"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.93-9.412l-1 4.705c-.07.34.029.533.304.533c.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598c-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081l.082-.381l2.29-.287zM8 5.5a1 1 0 1 1 0-2a1 1 0 0 1 0 2"}),e.jsx("title",{children:"You can either specify SLD + TLD (example.com) or subdomains (www.example.com). For example, example.com would cover all subdomains (all other hosts belonging to example.com like help.example.com) while www.example.com only covers one host/domain. Or scope can be left empty to parse all web apps you go to."})]})]}),e.jsxs("div",{className:"flex items-center justify-center w-full gap-2 mt-4",children:[e.jsx("input",{type:"text",ref:x,className:"w-full border-gray-600 text-gray-200 outline-none border-2 py-2 rounded-sm px-3 bg-gray-800 placeholder-gray-500 transition duration-200 focus:border-2 focus:border-customFont focus:ring ",placeholder:"example.com or www.example.com"}),e.jsx("button",{className:"bg-customFont text-white rounded-sm py-1 px-2 font-bold transition duration-200 hover:bg-blue-600 focus:outline-none focus:ring focus:border-2 focus:border-customFont",onClick:u,children:"+"})]}),e.jsxs("div",{className:"flex w-full justify-between gap-2 mt-6",children:[e.jsx("div",{className:"flex w-full text-center border-2 border-gray-600 overflow-auto h-20 pb-5 rounded-sm bg-gray-800 shadow-inner",children:e.jsx("div",{className:"mt-5 flex flex-col px-2",children:o.scopes.map((r,l)=>e.jsx(v,{scope:r,onRemove:()=>w(r)},l))})}),e.jsx("button",{className:"mt-14 bg-transparent",onClick:j,children:e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",className:"text-red-500 hover:text-red-400 transition duration-200",children:[e.jsx("path",{fill:"currentColor",d:"M19 4h-3.5l-1-1h-5l-1 1H5v2h14M6 19a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7H6z"}),e.jsx("title",{children:"Clear All"})]})})]})]}),e.jsx("div",{children:e.jsxs("p",{className:"text-customFont mt-8 mb-5 md:text-lg",children:["An endpoint parser and extractor with many flexible features by",e.jsxs("span",{className:"text-white",children:[" ",e.jsx("a",{target:"_blank",href:"https://www.linkedin.com/in/nathan-w-76ba78202/",children:"  AtlasWiki/mrunoriginal "})]})," and"," ",e.jsx("span",{className:"text-white",children:e.jsx("a",{href:"https://www.linkedin.com/in/kristian-alex-kelly/",children:"LordCat"})})," | Designed by ",e.jsx("span",{className:"text-white",children:e.jsx("a",{href:"https://www.linkedin.com/in/mahenoor-salat/",children:"Mahenoor"})})]})}),e.jsx("div",{className:"flex gap-2 justify-center items-center",children:e.jsx("a",{href:"https://github.com/AtlasWiki/endPointer/",target:"_blank",children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"40",height:"34",viewBox:"0 0 24 24",children:e.jsx("path",{fill:"#FFFFFF",d:"M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33s1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2"})})})})]})}function M(){const[o,c]=p.useState([]),x=t=>{let s;const a=t.webpage.replace(/\/$/,"").split("#")[0];return t.url&&(t.url.startsWith("http://")||t.url.startsWith("https://"))?s=t.url:t.url.startsWith("/")?s=a+t.url:s=a+"/"+t.url,s=s.replace(/([^:]\/)\/+/g,"$1"),s},m=()=>{const t=o.map(x).join(`
`),s=new Blob([t],{type:"text/plain"}),a=document.createElement("a");a.href=URL.createObjectURL(s),a.download="urls.txt",a.click()};return p.useEffect(()=>{const t=()=>{let a=[];n.storage.local.get("URL-PARSER").then(h=>{const d=h["URL-PARSER"];Object.keys(d).forEach(u=>{if(u!=="current"){const w=d[u].currPage,f=d[u].externalJSFiles;a.push(...w.map(g=>({url:g,foundAt:decodeURIComponent(u),webpage:decodeURIComponent(u)}))),Object.entries(f).forEach(([g,j])=>{const R=decodeURIComponent(g);a.push(...j.map(v=>({url:v,foundAt:R,webpage:decodeURIComponent(u)})))})}}),c(a)})};t();const s=a=>{a["URL-PARSER"]&&t()};return n.storage.onChanged.addListener(s),()=>{n.storage.onChanged.removeListener(s)}},[]),e.jsxs("div",{className:"mt-2 ml-1",children:[e.jsx("button",{onClick:m,className:"mt-4 p-2 text-white bg-transparent border border-gray-500 mb-5 rounded",children:"Download URLs as .txt"}),e.jsx("pre",{className:"bg-gray-500 p-2 mb-4",children:`
          Showing modified relative paths (format: root webpage + relative paths)
          Example: https://www.example.com + /help: https://www.example.com/help
          and absolute urls
          `}),o.map((t,s)=>e.jsx("p",{className:"",children:x(t)},s))]})}function q(){const[o,c]=p.useState([]),x=t=>{let s;const a=t.webpage.replace(/\/$/,"").split("#")[0];return t.url&&(t.url.startsWith("http://")||t.url.startsWith("https://"))?s=t.url:t.url.startsWith("/")?s=a+t.url:s=a+"/"+t.url,s=s.replace(/([^:]\/)\/+/g,"$1"),s},m=()=>{const t=`endpoint,parsed from,root webpage
`,s=o.map(d=>`${x(d)},${d.foundAt},${d.webpage}`).join(`
`),a=new Blob([t+s],{type:"text/csv"}),h=document.createElement("a");h.href=URL.createObjectURL(a),h.download="urls.csv",h.click()};return p.useEffect(()=>{const t=()=>{let a=[];n.storage.local.get("URL-PARSER").then(h=>{const d=h["URL-PARSER"];Object.keys(d).forEach(u=>{if(u!=="current"){const w=d[u].currPage,f=d[u].externalJSFiles;a.push(...w.map(g=>({url:g,foundAt:decodeURIComponent(u),webpage:decodeURIComponent(u)}))),Object.entries(f).forEach(([g,j])=>{const R=decodeURIComponent(g);a.push(...j.map(v=>({url:v,foundAt:R,webpage:decodeURIComponent(u)})))})}}),c(a)})};t();const s=a=>{a["URL-PARSER"]&&t()};return n.storage.onChanged.addListener(s),()=>{n.storage.onChanged.removeListener(s)}},[]),e.jsxs("div",{className:"mt-2 ml-1",children:[e.jsx("button",{onClick:m,className:"mt-4 p-2 text-white bg-transparent border border-gray-500 mb-5 rounded",children:"Download URLs as .csv"}),e.jsx("pre",{className:"bg-gray-500 p-2 mb-4",children:"endpoint,parsed from,root webpage"}),e.jsx("pre",{className:"text-md p-2",children:o.map((t,s)=>`${x(t)},${t.foundAt},${t.webpage}`).join(`
`)})]})}function B(){const[o,c]=p.useState([]),x=()=>{const m=o.map(a=>a.url).join(`
`),t=new Blob([m],{type:"text/plain"}),s=document.createElement("a");s.href=URL.createObjectURL(t),s.download="urls.txt",s.click()};return p.useEffect(()=>{const m=()=>{let s=[];n.storage.local.get("URL-PARSER").then(a=>{const h=a["URL-PARSER"];Object.keys(h).forEach(d=>{if(d!=="current"){const u=h[d].currPage,w=h[d].externalJSFiles;s.push(...u.map(f=>({url:f}))),Object.values(w).forEach(f=>{s.push(...f.map(g=>({url:g})))})}}),c(s)})};m();const t=s=>{s["URL-PARSER"]&&m()};return n.storage.onChanged.addListener(t),()=>{n.storage.onChanged.removeListener(t)}},[]),e.jsxs("div",{className:"mt-2 ml-1",children:[e.jsx("button",{onClick:x,className:"mt-4 p-2 text-white bg-transparent border border-gray-500 mb-5 rounded",children:"Download URLs as .txt"}),e.jsx("pre",{className:"bg-gray-500 p-2 mb-4",children:"showing umodified relative paths and absolute paths"}),o.map((m,t)=>e.jsx("p",{className:"",children:m.url},t))]})}function D(){const[o,c]=p.useState("txt");return e.jsxs("div",{children:[e.jsxs("div",{className:"flex",children:[e.jsx("button",{className:`px-10 py-2 font-semibold ${o=="txt"?"text-purple-500 bg-black":""}`,onClick:()=>c("txt"),children:"TXT"}),e.jsx("button",{className:`px-10 py-2 font-semibold ${o=="csv"?"text-purple-500 bg-black":""}`,onClick:()=>c("csv"),children:"CSV"}),e.jsx("button",{className:`px-10 py-2 font-semibold ${o=="unmodified"?"text-purple-500 bg-black":""}`,onClick:()=>c("unmodified"),children:"UNMODIFIED"})]}),e.jsx("div",{className:"py-1"}),o==="txt"&&e.jsx(M,{}),o==="csv"&&e.jsx(q,{}),o==="unmodified"&&e.jsx(B,{})]})}const U=document.getElementById("root");U?F(U).render(e.jsx(p.StrictMode,{children:e.jsx(E,{children:e.jsxs(S,{children:[e.jsx(L,{path:"",element:e.jsx(k,{})}),e.jsx(L,{path:"/urls",element:e.jsx(A,{})}),e.jsx(L,{path:"/urls/output",element:e.jsx(D,{})})]})})})):console.error("Root element not found");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
