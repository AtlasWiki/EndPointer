import"../assets/modulepreload-polyfill.B5Qt9EMX.js";import{r as l,d as de,j as e,a as Y,c as he,H as me,R as ue,b as Q}from"../assets/index.BR82A1KU.js";function xe(){const[d,b]=l.useState(!1);l.useState(!1);const[N,v]=l.useState(0);l.useState(0);const[s,r]=de.useState([]);function n(){chrome.tabs.query({active:!0,currentWindow:!0},o=>{var t;(t=o[0])!=null&&t.id&&chrome.tabs.sendMessage(o[0].id,{action:"parseURLs"},h=>{console.log("Popup received response:",h)})})}chrome.storage.local.get(["urlParser","fileDownloader","jsFileCounter","jsFileCount"],o=>{b(o.urlParser||!1)}),chrome.storage.local.get("URL-PARSER",o=>{const t=o["URL-PARSER"],h=t.current,u=t[h].currPage,C=t[h].externalJSFiles,a=u.length,i=Object.values(C).flat().length;v(a+i)});function j(){const o=!d;b(o),chrome.runtime.sendMessage({action:"urlParserChanged",state:o})}function m(o){return e.jsx("div",{className:"flex",children:e.jsxs("div",{className:"flex items-center",children:[e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsx("path",{fill:o?"#82e467":"#e63946",d:"M12 18a6 6 0 1 0 0-12a6 6 0 0 0 0 12"})}),e.jsx("span",{className:o?"text-green-400 font-semibold":"text-red-400 font-semibold",children:o?"ON":"OFF"})]})})}l.useEffect(()=>{chrome.storage.local.get("scope",o=>{r(o.scope||[])})},[]);const x=({scope:o,onRemove:t})=>e.jsxs("div",{className:"flex",children:[e.jsx("span",{className:"text-teal-500 py-1 px-1",children:o}),e.jsx("button",{className:"text-center pl-1 text-rose-500",onClick:t,children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsx("path",{fill:"#df4950",d:"M19 12.998H5v-2h14z"})})})]}),p=l.useRef(null),y=()=>{var t;const o=(t=p.current)==null?void 0:t.value;o&&(r(h=>{const u=[...h,o];return chrome.storage.local.set({scope:u}),u}),p.current&&(p.current.value=""))},S=o=>{r(t=>t.filter(h=>h!==o)),chrome.storage.local.set({scope:s.filter(t=>t!==o)})},[A,R]=l.useState(1);l.useEffect(()=>{chrome.storage.local.get("requests",o=>{R(o.requests)})},[]);const L=o=>{const t=Number(o.target.value);R(t),chrome.storage.local.set({requests:t}),console.log(`set requests to ${t}`)};function M(){chrome.storage.local.set({"URL-PARSER":{}},()=>{alert("Cleared endpoints")}),location.reload()}function F(){chrome.storage.local.clear(()=>{alert("Cache cleared"),location.reload()})}return e.jsxs("div",{className:"w-full md:h-screen m-0  md:justify-center py-5",children:[e.jsxs("div",{className:"mt-5 mb-5 text-center",children:[e.jsx("h1",{className:"text-4xl font-bold md:text-6xl mb-1",children:"EndPointer"}),e.jsx("p",{className:"text-gray-400/60 md:text-lg",children:"An endpoint parser and extractor with many flexible features by AtlasWiki/mrunoriginal and LordCat"}),e.jsx("div",{className:"mt-3 flex flex-col justify-center items-center gap-10 mx-0",children:e.jsx("div",{className:"flex flex-col gap-1 md:gap-5",children:e.jsxs("div",{className:"text-md flex gap-2",children:[e.jsx("button",{className:"a-color a-item",onClick:j,children:m(d)}),e.jsxs("button",{className:"a-item a-color font-semibold text-blue-500",children:[e.jsx("span",{className:"text-violet-500",children:"URLs"})," (",N,")"]}),e.jsx("button",{className:"a-item a-color p-2 rounded-md",onClick:M,children:e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"20",height:"20",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"none",stroke:"#F43F5E","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M4 7h16m-10 4v6m4-6v6M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2l1-12M9 7V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3"}),e.jsx("title",{children:"Delete URLs"})]})}),e.jsx("button",{className:"a-item a-color p-2 rounded-md",onClick:F,children:e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"#726e6e",d:"M5.505 9.117a7.7 7.7 0 0 1-1.497-.852V12c0 .524.473 1.23 1.8 1.883c1.267.625 3.085 1.071 5.18 1.182a.76.76 0 0 1-.08 1.517c-2.242-.118-4.274-.598-5.772-1.336a7.3 7.3 0 0 1-1.128-.68V18.3c0 .282.127.61.476.973c.352.366.899.732 1.633 1.055c1.466.645 3.545 1.063 5.881 1.063q.867 0 1.683-.074a.76.76 0 0 1 .135 1.513a21 21 0 0 1-1.818.08c-2.496 0-4.792-.443-6.493-1.192c-.849-.374-1.584-.838-2.117-1.393c-.536-.558-.9-1.244-.9-2.025V5.7c0-.782.364-1.467.9-2.025c.533-.555 1.268-1.02 2.117-1.393c1.7-.749 3.997-1.193 6.493-1.193s4.793.444 6.493 1.193c.85.373 1.585.838 2.117 1.393c.537.558.9 1.243.9 2.025s-.363 1.467-.9 2.025c-.532.554-1.267 1.02-2.117 1.393c-1.7.748-3.996 1.192-6.493 1.192c-2.496 0-4.792-.444-6.493-1.192Zm-1.021-4.39c-.35.362-.476.69-.476.972s.127.61.476.972c.352.367.899.732 1.633 1.055c1.466.646 3.545 1.064 5.881 1.064s4.415-.418 5.882-1.064c.734-.323 1.28-.688 1.633-1.055c.35-.363.476-.69.476-.972s-.127-.61-.476-.973c-.353-.367-.9-.732-1.633-1.055c-1.467-.645-3.545-1.063-5.882-1.063s-4.415.418-5.88 1.063c-.735.323-1.282.688-1.634 1.055Z"}),e.jsx("path",{fill:"#726e6e",d:"M21.425 11.11a.5.5 0 0 0-.881-.418l-5.438 6.937a.5.5 0 0 0 .394.808h3.268l-.945 4.46a.5.5 0 0 0 .888.405l4.688-6.188a.5.5 0 0 0-.399-.802h-2.745z"}),e.jsx("title",{children:"Delete Cache"})]})})]})})})]}),e.jsxs("div",{className:"w-full text-center flex flex-col justify-center items-center",children:[e.jsxs("div",{className:"flex mb-5 gap-2 justify-content items-center",children:[e.jsx("a",{href:document.location.origin+"/PopUp/popup.html#urls",target:"_blank",className:"bg-gray-950 px-2 py-2 px-6 rounded-md font-semibold text-[#646cff]",children:"Panel"}),e.jsx("button",{className:"a-item a-color rounded-md text-green-500 font-semibold bg-gray-950",onClick:n,children:"MANUAL PARSE"})]}),e.jsx("hr",{className:"w-full border-gray-400/60 mb-5"}),e.jsx("h1",{className:"text-2xl font-bold mb-2",children:"Concurrent Requests"}),e.jsx("p",{className:"text-gray-400/60",children:"A request of 1 is recommended for higher accuracy when dealing with big web apps with many dynamic js files"}),e.jsxs("div",{className:"mb-1",children:[e.jsx("div",{className:"mt-5 mb-1",children:e.jsx("span",{className:"w-full py-1 px-3 bg-slate-600 font-semibold rounded-sm",children:A})}),e.jsx("input",{type:"range",min:"1",max:"10",value:A,onChange:L,className:"mt-1 w-64 h-2 bg-blue-500 rounded-lg appearance-none cursor-pointer"})]})]}),e.jsxs("div",{className:"w-full text-center flex flex-col justify-center items-center",children:[e.jsx("hr",{className:"w-full border-gray-400/60 mb-5"}),e.jsx("h1",{className:"text-2xl font-bold mb-2",children:"SCOPE"}),e.jsxs("div",{className:"flex gap-0.5",children:[e.jsx("p",{className:"text-gray-400/60 mb-1",children:"Keep scope empty if you want to parse from all scopes"}),e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"12",viewBox:"0 0 16 16",children:[e.jsx("path",{fill:"#615c5c",d:"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.93-9.412l-1 4.705c-.07.34.029.533.304.533c.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598c-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081l.082-.381l2.29-.287zM8 5.5a1 1 0 1 1 0-2a1 1 0 0 1 0 2"}),e.jsx("title",{children:"You can either specify SLD + TLD (example.com) or subdomains (www.example.com). For example, example.com would cover all subdomains (all other hosts belonging to example.com like help.example.com) while www.example.com only covers one host/domain. Or scope can be left empty to parse all web apps you go to."})]})]}),e.jsxs("div",{className:"flex items-center justify-center w-full gap-0.5",children:[e.jsx("input",{type:"text",ref:p,className:"w-5/6 border-gray-400/60 text-gray-400/60 outline-none border-2 py-1 rounded-sm px-2 bg-transparent",placeholder:"example.com or www.example.com"}),e.jsx("button",{className:"border-2 border-gray-400/60 text-green-700 rounded-sm py-1 px-2 font-bold",onClick:y,children:"+"})]}),e.jsx("div",{className:"mt-5 w-3/4 flex items-center justify-center text-center border-2 border-gray-400/60 overflow-auto h-20 pb-5 rounded-md",children:e.jsx("div",{className:"mt-5 flex flex-col px-1",children:s.map((o,t)=>e.jsx(x,{scope:o,onRemove:()=>S(o)},t))})}),e.jsx("button",{className:"mt-2",onClick:()=>{chrome.storage.local.set({scope:[]}),r([])},children:e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"#726e6e",d:"M19 4h-3.5l-1-1h-5l-1 1H5v2h14M6 19a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7H6z"}),e.jsx("title",{children:"Clear All"})]})}),e.jsx("hr",{className:"w-full bg-gray-400/60 border-gray-400/60 mb-5 mt-5"})]}),e.jsx("div",{className:"flex gap-2 justify-center items-center",children:e.jsx("a",{href:"https://github.com/AtlasWiki/endPointer/",target:"_blank",children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"40",height:"40",viewBox:"0 0 24 24",children:e.jsx("path",{fill:"#726e6e",d:"M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33s1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2"})})})})]})}function pe(){function d({endpoint:a,searchQuery:i}){const f=".^$*+?\\|()[]{}";let w="";for(const c of i)f.includes(c)&&(w+="\\"),w+=c;const T=a.url.split(new RegExp(`(${w})`,"gi")),[E,I]=l.useState(!1),[U,J]=l.useState(!1),[_,$]=l.useState(!1),[V,B]=l.useState({GET:0,POST:0,PUT:0,OPTIONS:0}),[D,Z]=l.useState({GET:"",POST:"",PUT:"",OPTIONS:""}),[se,K]=l.useState({GET:"",POST:"",PUT:"",OPTIONS:""}),[z,te]=l.useState("GET"),q=()=>{I(!1),J(!1),$(!1)},[le,X]=l.useState({GET:[],POST:[],PUT:[],OPTIONS:[]}),G=()=>{let c;const g=a.webpage.replace(/\/$/,"").split("#")[0];return a.url&&(a.url.startsWith("http://")||a.url.startsWith("https://"))?c=a.url:a.url.startsWith("/")?c=g+a.url:c=g+"/"+a.url,c=c.replace(/([^:]\/)\/+/g,"$1"),c};l.useEffect(()=>{const c=async g=>{const W=G();try{const k=await fetch(W,{method:g}),H=[];k.headers.forEach((O,ie)=>{H.push(`${ie}: ${O}`)}),X(O=>({...O,[g]:H})),B(O=>({...O,[g]:k.status})),Z(O=>({...O,[g]:k.statusText}));const P=await k.text(),ce=Y.js(P,{indent_size:2,indent_char:" ",preserve_newlines:!0,max_preserve_newlines:2,end_with_newline:!0,wrap_line_length:0});K(O=>({...O,[g]:ce}))}catch(k){const H=k.message||"An unknown error occurred";X(P=>({...P,[g]:[`Error: ${H}`]})),B(P=>({...P,[g]:0})),Z(P=>({...P,[g]:"Failed to fetch"})),K(P=>({...P,[g]:"body not found"}))}};_&&(c("GET"),c("POST"),c("PUT"),c("OPTIONS"))},[_]);const[re,ae]=l.useState([]),[ne,oe]=l.useState([]);return l.useEffect(()=>{U&&fetch(a.foundAt).then(c=>c.text()).then(c=>{const g=Y.js(c),W=new RegExp(`(?:^.*?(?:\\n.*?){0,1}(${a.url}).*?(?:\\n.*?){0,1})`,"gs"),k=new RegExp(`${a.url}`,"gs"),H=g.match(W),P=g.match(k);ae(H||[]),oe(P||[])}).catch(()=>{console.error("request failed")})},[U]),e.jsxs("tr",{children:[e.jsxs("td",{className:"break-words max-w-lg",children:[T.map((c,g)=>c.toLowerCase()===i.toLowerCase()?e.jsx("span",{className:"text-red-500 font-semibold",children:c},g):e.jsx("span",{children:c},g)),e.jsxs("div",{className:"flex mt-2 items-center gap-1",children:[e.jsx("button",{className:"i-button",onClick:()=>J(!0),children:e.jsxs("svg",{className:"cursor-pointer hover:opacity-80",xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"#3da28f",d:"m8 18l-6-6l6-6l1.425 1.425l-4.6 4.6L9.4 16.6zm8 0l-1.425-1.425l4.6-4.6L14.6 7.4L16 6l6 6z"}),e.jsx("title",{children:"View Code Snippet"})]})}),e.jsx("button",{className:"i-button",onClick:()=>$(!0),children:e.jsxs("svg",{className:"cursor-pointer hover:opacity-80",xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:[e.jsx("path",{fill:"#3da28f",d:"M20 4H6c-1.103 0-2 .897-2 2v5h2V8l6.4 4.8a1 1 0 0 0 1.2 0L20 8v9h-8v2h8c1.103 0 2-.897 2-2V6c0-1.103-.897-2-2-2m-7 6.75L6.666 6h12.668z"}),e.jsx("path",{fill:"#3da28f",d:"M2 12h7v2H2zm2 3h6v2H4zm3 3h4v2H7z"}),e.jsx("title",{children:"See Response"})]})})]}),E&&e.jsx("div",{className:"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50",onClick:q,children:e.jsxs("div",{className:"bg-white p-5 rounded-lg shadow-lg",onClick:c=>c.stopPropagation(),children:[e.jsxs("h2",{className:"text-xl font-semibold text-black",children:["Generate Report for ",G()]}),e.jsx("p",{className:"text-black",children:"Content for Generate Report modal."}),e.jsx("button",{className:"mt-3 px-4 py-2 bg-blue-500 text-white rounded",onClick:()=>I(!1),children:"Close"})]})}),U&&e.jsx("div",{className:"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50",onClick:q,children:e.jsxs("div",{className:"bg-[#363333] opacity-85 p-5 rounded-lg shadow-lg max-w-6xl max-h-screen overflow-auto",onClick:c=>c.stopPropagation(),children:[e.jsxs("h2",{className:"text-lg font-semibold text-gray-400 mb-5",children:["View Code Snippet for ",G()]}),e.jsx("p",{className:"font-semibold text-gray-400",children:"Content for View Code Snippet modal."}),e.jsxs("p",{className:"mb-5 font-semibold text-purple-200",children:[ne.length," hits found in ",a.foundAt]}),e.jsx("div",{children:re.map((c,g)=>e.jsx("pre",{children:e.jsx("code",{children:c})},g))}),e.jsx("button",{className:"mt-3 px-4 py-2 bg-black text-white rounded",onClick:()=>J(!1),children:"Close"})]})}),_&&e.jsx("div",{className:"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50",onClick:q,children:e.jsxs("div",{className:"bg-[#363333] opacity-85 p-5 rounded-lg shadow-lg max-w-6xl max-h-screen overflow-auto",onClick:c=>c.stopPropagation(),children:[e.jsxs("h2",{className:"text-xl font-bold text-gray-400",children:["See Response for ",G()]}),e.jsxs("div",{className:"mt-3",children:[e.jsx("h3",{className:"text-lg font-semibold text-gray-400 mb-5",children:"Response"}),e.jsxs("ul",{className:"text-black overflow-y-auto p-2 bg-[#363333] opacity-85 rounded-md max-h-160",children:[e.jsxs("select",{className:"font-bold text-2xl text-purple-200 mb-4 bg-gray-600 w-full py-2 px-2",value:z,onChange:c=>te(c.target.value),children:[e.jsxs("option",{value:"GET",children:["[",V.GET,"] ",D.GET," GET"]}),e.jsxs("option",{value:"POST",children:["[",V.POST,"] ",D.POST," POST"]}),e.jsxs("option",{value:"PUT",children:["[",V.PUT,"] ",D.PUT," PUT"]}),e.jsxs("option",{value:"OPTIONS",children:["[",V.OPTIONS,"] ",D.OPTIONS," OPTIONS"]})]}),le[z].map((c,g)=>{const[W,...k]=c.split(": ");return e.jsxs("li",{className:"p-1",children:[e.jsxs("span",{className:"font-bold text-purple-200",children:[W,":"]}),e.jsxs("span",{className:"text-gray-200",children:[" ",k.join(": ")]})]},g)}),e.jsx("li",{children:e.jsx("pre",{className:"mt-5",children:e.jsx("span",{className:"text-gray-200",children:se[z]})})})]})]}),e.jsx("button",{className:"mt-3 px-4 py-2 bg-black text-white rounded",onClick:()=>$(!1),children:"Close"})]})})]}),e.jsx("td",{className:"break-words max-w-lg",children:a.foundAt}),e.jsx("td",{className:"break-words max-w-lg text-center",children:a.webpage})]})}function b({url:a,onClick:i}){return e.jsx("div",{onClick:i,className:"bg-gray-500 text-white p-2 cursor-pointer text-ellipsis overflow-hidden whitespace-nowrap hover:bg-gray-600",children:a})}const[N,v]=l.useState([]),[s,r]=l.useState([]),[n,j]=l.useState("All"),[m,x]=l.useState(!1),[p,y]=l.useState(""),[S,A]=l.useState([]),[R,L]=l.useState(0),M=100,F=l.useRef(null);l.useEffect(()=>{const a=()=>{let f=[],w=[];chrome.storage.local.get("URL-PARSER",T=>{const E=T["URL-PARSER"];Object.keys(E).forEach(U=>{if(U!=="current"){const J=E[U].currPage,_=E[U].externalJSFiles;w.push(decodeURIComponent(U)),f.push(...J.map($=>({url:$,foundAt:decodeURIComponent(U),webpage:decodeURIComponent(U)}))),Object.entries(_).forEach(([$,V])=>{const B=decodeURIComponent($);w.includes(B)||w.push(B),f.push(...V.map(D=>({url:D,foundAt:B,webpage:decodeURIComponent(U)})))})}});const I=Array.from(new Set(["All",...w]));v(f),r(I)})};a();const i=f=>{f["URL-PARSER"]&&a()};return chrome.storage.onChanged.addListener(i),()=>{chrome.storage.onChanged.removeListener(i)}},[]);const o=a=>{j(a),x(!1)},t=a=>{y(a.target.value)},h=N.filter(a=>{const i=n==="All"||a.foundAt===n,f=a.url.toLowerCase().includes(p.toLowerCase());return i&&f});l.useEffect(()=>{A(h.slice(R,R+M))},[N,n,p,R]);const u=()=>{if(F.current){const{scrollTop:a,scrollHeight:i,clientHeight:f}=F.current;i-a-f<200?L(E=>Math.min(E+20,N.length-M)):a<200&&R>0&&L(E=>Math.max(E-20,0))}};function C(){chrome.storage.local.set({"URL-PARSER":{}},()=>{console.log("Clear endpoints")})}return e.jsx("div",{className:"w-full min-h-screen flex justify-center",children:e.jsx("div",{className:"mt-5 flex",children:e.jsxs("div",{className:"py-1 w-full flex flex-col gap-10",children:[e.jsxs("div",{className:"w-full max-h-[760px] overflow-auto",ref:F,onScroll:u,children:["  ",e.jsxs("table",{className:"w-full border-collapse",children:[e.jsx("thead",{children:e.jsxs("tr",{className:"text-5xl",children:[e.jsxs("th",{className:"border-b-2 pb-10",children:["ENDPOINT ",e.jsxs("span",{className:"text-[#3da28f]",children:["(",h.length,")"]})]}),e.jsxs("th",{className:"border-b-2 pb-10",children:["SOURCE ",e.jsxs("span",{className:"text-[#3da28f]",children:["(",s.length,")"]})]}),e.jsx("th",{className:"border-b-2 pb-10",children:"WEBPAGE"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx("div",{className:"mt-5 w-full",children:e.jsx("input",{type:"text",value:p,onChange:t,className:`px-2 border-2 border-gray-300 bg-transparent text-lg w-full pb-3 pt-3 rounded-md\r
                            cursor-pointer text-gray-300 hover:border-gray-500 outline-none focus:border-gray-500 transition-all duration-400`,placeholder:"Search endpoints..."})})}),e.jsx("td",{children:e.jsxs("div",{className:"relative w-full max-w-lg mt-5",children:[e.jsx("button",{onClick:()=>x(!m),className:"a-item w-full px-2 border-2 border-gray-300 bg-transparent text-lg rounded-md overflow-hidden text-ellipsis whitespace-nowrap",children:n}),m&&e.jsx("div",{className:"absolute mt-1 w-full bg-white border-2 border-gray-500 rounded-md shadow-lg z-10 max-h-60 overflow-auto",children:s.map((a,i)=>e.jsx(b,{url:a,onClick:()=>o(a)},i))})]})})]}),S.map((a,i)=>e.jsx(d,{endpoint:a,searchQuery:p},R+i))]})]})]})," ",e.jsxs("div",{className:"text-lg flex items-center space-x-4 px-5",children:[e.jsx("a",{href:document.location.origin+"/PopUp/popup.html#urls",target:"_blank",className:"bg-gray-950 p-3 rounded-md font-semibold text-[#646cff]",children:"WEBPAGE PANEL"}),e.jsx("button",{className:"a-item bg-gray-600 p-3 rounded-md",onClick:C,children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsx("path",{fill:"none",stroke:"black","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M4 7h16m-10 4v6m4-6v6M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2l1-12M9 7V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3"})})}),e.jsx("a",{href:document.location.origin+"/PopUp/popup.html#urls/output",target:"_blank",className:"a-item bg-gray-600 p-3 rounded-md font-semibold text-gray-300",children:"OUTPUT"})]})]})})})}function ge(){const[d,b]=l.useState({}),[N,v]=l.useState([]),[s,r]=l.useState("All"),[n,j]=l.useState(!1),[m,x]=l.useState(""),[p,y]=l.useState(new Set);l.useEffect(()=>{const t=()=>{let u={},C=[];chrome.storage.local.get("URL-PARSER",a=>{const i=a["URL-PARSER"];Object.keys(i).forEach(f=>{if(f!=="current"){const w=decodeURIComponent(f);u[w]={mainPage:[],jsFiles:{}},u[w].mainPage=i[f].currPage.map(T=>({url:T,foundAt:"Main Page",webpage:w})),Object.entries(i[f].externalJSFiles).forEach(([T,E])=>{const I=decodeURIComponent(T);C.push(I),u[w].jsFiles[I]=E.map(U=>({url:U,foundAt:I,webpage:w}))})}}),b(u),v(["All",...Array.from(new Set(C))])})};t();const h=u=>{u["URL-PARSER"]&&t()};return chrome.storage.onChanged.addListener(h),()=>{chrome.storage.onChanged.removeListener(h)}},[]);const S=t=>{r(t),j(!1)},A=t=>{x(t.target.value)},R=t=>{y(h=>{const u=new Set(h);return u.has(t)?u.delete(t):u.add(t),u})},L=t=>t.filter(h=>h.url.toLowerCase().includes(m.toLowerCase())&&(s==="All"||h.foundAt===s||h.webpage===s)),M=t=>{const h=t.url.split(new RegExp(`(${m})`,"gi"));return e.jsxs("div",{className:"ml-8 mt-1 flex items-center",children:[e.jsx("span",{className:"mr-2 text-blue-500",children:"➤"}),h.map((u,C)=>u.toLowerCase()===m.toLowerCase()?e.jsx("span",{className:"text-red-500 font-semibold",children:u},C):e.jsx("span",{children:u},C))]},t.url)},F=()=>Object.entries(d).map(([t,{mainPage:h,jsFiles:u}])=>{const C=L(h),a=Object.entries(u).filter(([i,f])=>L(f).length>0);return C.length===0&&a.length===0?null:e.jsxs("div",{className:"mb-4",children:[e.jsxs("div",{className:"text-xl font-bold cursor-pointer flex items-center",onClick:()=>R(t),children:[e.jsx("span",{className:"mr-2 text-green-500",children:"🌐"}),e.jsx("span",{className:"mr-2",children:p.has(t)?"▼":"▶"}),t]}),p.has(t)&&e.jsxs(e.Fragment,{children:[C.length>0&&e.jsxs("div",{className:"ml-4 mt-2",children:[e.jsxs("div",{className:"text-lg font-semibold cursor-pointer flex items-center",onClick:()=>R(`${t}-main`),children:[e.jsx("span",{className:"mr-2",children:p.has(`${t}-main`)?"▼":"▶"}),"Main Page"]}),p.has(`${t}-main`)&&C.map(M)]}),a.map(([i,f])=>{const w=L(f);return w.length===0?null:e.jsxs("div",{className:"ml-4 mt-2",children:[e.jsxs("div",{className:"text-lg font-semibold cursor-pointer flex items-center",onClick:()=>R(i),children:[e.jsx("span",{className:"mr-2 text-yellow-500",children:"📄"}),e.jsx("span",{className:"mr-2",children:p.has(i)?"▼":"▶"}),i]}),p.has(i)&&w.map(M)]},i)})]})]},t)});function o(){chrome.storage.local.set({"URL-PARSER":{}},()=>{console.log("Clear endpoints")})}return e.jsx("div",{className:"w-full min-h-screen",children:e.jsxs("div",{className:"mt-5 p-5",children:[e.jsxs("div",{className:"mb-5 flex gap-4",children:[e.jsx("input",{type:"text",value:m,onChange:A,className:`px-2 border-2 border-gray-300 bg-transparent text-lg w-full pb-3 pt-3 rounded-md\r
              cursor-pointer hover:border-gray-500 outline-none focus:border-gray-500 transition-all duration-400`,placeholder:"Search endpoints..."}),e.jsxs("div",{className:"relative w-64",children:[e.jsx("button",{onClick:()=>j(!n),className:"w-full py-4 px-2 border-2 border-gray-300 bg-transparent text-lg rounded-md overflow-hidden text-ellipsis whitespace-nowrap",children:s}),n&&e.jsx("div",{className:"absolute mt-1 w-full bg-white border-2 border-gray-500 rounded-md shadow-lg z-10 max-h-60 overflow-auto",children:N.map((t,h)=>e.jsx("div",{onClick:()=>S(t),className:"bg-gray-500 text-white p-2 cursor-pointer text-ellipsis overflow-hidden whitespace-nowrap hover:bg-gray-600",children:t},h))})]})]}),e.jsx("div",{className:"border rounded-lg p-4 max-h-[600px] overflow-auto",children:F()}),e.jsxs("div",{className:"text-lg flex items-center space-x-4 mt-5",children:[e.jsx("a",{href:document.location.origin+"/PopUp/popup.html#urls",target:"_blank",className:"bg-gray-950 p-3 rounded-md font-semibold text-[#646cff]",children:"WEBPAGE PANEL"}),e.jsx("button",{className:"a-item bg-gray-600 p-3 rounded-md",onClick:o,children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",children:e.jsx("path",{fill:"none",stroke:"black","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M4 7h16m-10 4v6m4-6v6M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2l1-12M9 7V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3"})})}),e.jsx("a",{href:document.location.origin+"/PopUp/popup.html#urls/output",target:"_blank",className:"a-item bg-gray-600 p-3 rounded-md font-semibold text-gray-300",children:"OUTPUT"})]})]})})}function fe(){const[d,b]=l.useState("default");return e.jsxs("div",{className:"flex items-center flex-col gap-5",children:[e.jsxs("div",{className:"flex",children:[e.jsx("button",{className:`px-10 py-2 font-semibold ${d=="default"?"text-purple-500 bg-black":""}`,onClick:()=>b("default"),children:"DEFAULT"}),e.jsx("button",{className:`px-10 py-2 font-semibold ${d=="tree"?"text-purple-500 bg-black":""}`,onClick:()=>b("tree"),children:"TREE"})]}),e.jsx("div",{className:"py-1"}),d==="default"?e.jsx(pe,{}):e.jsx(ge,{})]})}function be(){const[d,b]=l.useState([]),N=s=>{let r;const n=s.webpage.replace(/\/$/,"").split("#")[0];return s.url&&(s.url.startsWith("http://")||s.url.startsWith("https://"))?r=s.url:s.url.startsWith("/")?r=n+s.url:r=n+"/"+s.url,r=r.replace(/([^:]\/)\/+/g,"$1"),r},v=()=>{const s=d.map(N).join(`
`),r=new Blob([s],{type:"text/plain"}),n=document.createElement("a");n.href=URL.createObjectURL(r),n.download="urls.txt",n.click()};return l.useEffect(()=>{const s=()=>{let n=[];chrome.storage.local.get("URL-PARSER",j=>{const m=j["URL-PARSER"];Object.keys(m).forEach(x=>{if(x!=="current"){const p=m[x].currPage,y=m[x].externalJSFiles;n.push(...p.map(S=>({url:S,foundAt:decodeURIComponent(x),webpage:decodeURIComponent(x)}))),Object.entries(y).forEach(([S,A])=>{const R=decodeURIComponent(S);n.push(...A.map(L=>({url:L,foundAt:R,webpage:decodeURIComponent(x)})))})}}),b(n)})};s();const r=n=>{n["URL-PARSER"]&&s()};return chrome.storage.onChanged.addListener(r),()=>{chrome.storage.onChanged.removeListener(r)}},[]),e.jsxs("div",{className:"mt-2 ml-1",children:[e.jsx("button",{onClick:v,className:"mt-4 p-2 text-white bg-transparent border border-gray-500 mb-5 rounded",children:"Download URLs as .txt"}),e.jsx("pre",{className:"bg-gray-500 p-2 mb-4",children:`
          Showing modified relative paths (format: root webpage + relative paths)
          Example: https://www.example.com + /help: https://www.example.com/help
          and absolute urls
          `}),d.map((s,r)=>e.jsx("p",{className:"",children:N(s)},r))]})}function je(){const[d,b]=l.useState([]),N=s=>{let r;const n=s.webpage.replace(/\/$/,"").split("#")[0];return s.url&&(s.url.startsWith("http://")||s.url.startsWith("https://"))?r=s.url:s.url.startsWith("/")?r=n+s.url:r=n+"/"+s.url,r=r.replace(/([^:]\/)\/+/g,"$1"),r},v=()=>{const s=`endpoint,parsed from,root webpage
`,r=d.map(m=>`${N(m)},${m.foundAt},${m.webpage}`).join(`
`),n=new Blob([s+r],{type:"text/csv"}),j=document.createElement("a");j.href=URL.createObjectURL(n),j.download="urls.csv",j.click()};return l.useEffect(()=>{const s=()=>{let n=[];chrome.storage.local.get("URL-PARSER",j=>{const m=j["URL-PARSER"];Object.keys(m).forEach(x=>{if(x!=="current"){const p=m[x].currPage,y=m[x].externalJSFiles;n.push(...p.map(S=>({url:S,foundAt:decodeURIComponent(x),webpage:decodeURIComponent(x)}))),Object.entries(y).forEach(([S,A])=>{const R=decodeURIComponent(S);n.push(...A.map(L=>({url:L,foundAt:R,webpage:decodeURIComponent(x)})))})}}),b(n)})};s();const r=n=>{n["URL-PARSER"]&&s()};return chrome.storage.onChanged.addListener(r),()=>{chrome.storage.onChanged.removeListener(r)}},[]),e.jsxs("div",{className:"mt-2 ml-1",children:[e.jsx("button",{onClick:v,className:"mt-4 p-2 text-white bg-transparent border border-gray-500 mb-5 rounded",children:"Download URLs as .csv"}),e.jsx("pre",{className:"bg-gray-500 p-2 mb-4",children:"endpoint,parsed from,root webpage"}),e.jsx("pre",{className:"text-md p-2",children:d.map((s,r)=>`${N(s)},${s.foundAt},${s.webpage}`).join(`
`)})]})}function we(){const[d,b]=l.useState([]),N=()=>{const v=d.map(n=>n.url).join(`
`),s=new Blob([v],{type:"text/plain"}),r=document.createElement("a");r.href=URL.createObjectURL(s),r.download="urls.txt",r.click()};return l.useEffect(()=>{const v=()=>{let r=[];chrome.storage.local.get("URL-PARSER",n=>{const j=n["URL-PARSER"];Object.keys(j).forEach(m=>{if(m!=="current"){const x=j[m].currPage,p=j[m].externalJSFiles;r.push(...x.map(y=>({url:y}))),Object.values(p).forEach(y=>{r.push(...y.map(S=>({url:S})))})}}),b(r)})};v();const s=r=>{r["URL-PARSER"]&&v()};return chrome.storage.onChanged.addListener(s),()=>{chrome.storage.onChanged.removeListener(s)}},[]),e.jsxs("div",{className:"mt-2 ml-1",children:[e.jsx("button",{onClick:N,className:"mt-4 p-2 text-white bg-transparent border border-gray-500 mb-5 rounded",children:"Download URLs as .txt"}),e.jsx("pre",{className:"bg-gray-500 p-2 mb-4",children:"showing umodified relative paths and absolute paths"}),d.map((v,s)=>e.jsx("p",{className:"",children:v.url},s))]})}function ve(){const[d,b]=l.useState("txt");return e.jsxs("div",{children:[e.jsxs("div",{className:"flex",children:[e.jsx("button",{className:`px-10 py-2 font-semibold ${d=="txt"?"text-purple-500 bg-black":""}`,onClick:()=>b("txt"),children:"TXT"}),e.jsx("button",{className:`px-10 py-2 font-semibold ${d=="csv"?"text-purple-500 bg-black":""}`,onClick:()=>b("csv"),children:"CSV"}),e.jsx("button",{className:`px-10 py-2 font-semibold ${d=="unmodified"?"text-purple-500 bg-black":""}`,onClick:()=>b("unmodified"),children:"UNMODIFIED"})]}),e.jsx("div",{className:"py-1"}),d==="txt"&&e.jsx(be,{}),d==="csv"&&e.jsx(je,{}),d==="unmodified"&&e.jsx(we,{})]})}const ee=document.getElementById("root");ee?he(ee).render(e.jsx(l.StrictMode,{children:e.jsx(me,{children:e.jsxs(ue,{children:[e.jsx(Q,{path:"",element:e.jsx(xe,{})}),e.jsx(Q,{path:"/urls",element:e.jsx(fe,{})}),e.jsx(Q,{path:"/urls/output",element:e.jsx(ve,{})})]})})})):console.error("Root element not found");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
