import { ExtensionState } from '../sharedTypes/message_types';
import { REL_REGEX, ABS_REGEX } from '../sharedTypes/regex_constants';

let parsedJSFiles: Set<string> = new Set();
let successfullyFetchedFiles: Set<string> = new Set();

export function parseURLs() {
  console.log("Parsing URLs...");
  parse_curr_page().then(() => parse_external_files());
}

async function parse_curr_page() {
  // ... (keep the existing code for parse_curr_page)
}

async function parse_external_files() {
  let scriptTags = document.getElementsByTagName('script');
  console.log("Found script tags: " + scriptTags.length);

  let js_files = Array.from(scriptTags).filter(script => script.src).map(script => script.src);
  console.log("Total JS files: " + js_files.length);

  let extURLCount = 0;
  const batchSize = 5; // Process 5 files at a time

  while (parsedJSFiles.size < successfullyFetchedFiles.size || parsedJSFiles.size === 0) {
    const unparsedFiles = js_files.filter(file => !parsedJSFiles.has(file));
    
    for (let i = 0; i < unparsedFiles.length; i += batchSize) {
      const batch = unparsedFiles.slice(i, i + batchSize);
      await Promise.all(batch.map(async (js_file) => {
        if (!parsedJSFiles.has(js_file)) {
          try {
            const code = await fetch_file(js_file);
            successfullyFetchedFiles.add(js_file);
            
            const jsFileRelURLs = Array.from(code.matchAll(REL_REGEX), match => match[1]);
            const jsFileAbURLs = Array.from(code.matchAll(ABS_REGEX), match => match[1]);
            const jsFileURLs = new Set([...jsFileRelURLs, ...jsFileAbURLs]);

            extURLCount += jsFileURLs.size;
            console.log(`Found ${jsFileURLs.size} URLs in ${js_file}`);
            
            const encodedURL = encodeURIComponent(js_file);

            await new Promise<void>((resolve) => {
              chrome.storage.local.get("URL-PARSER", (result) => {
                const urlParser = result["URL-PARSER"] || {};
                const currentURL = urlParser["current"];
                
                if (!urlParser[currentURL].externalJSFiles) {
                  urlParser[currentURL].externalJSFiles = {};
                }

                urlParser[currentURL].externalJSFiles[encodedURL] = Array.from(jsFileURLs);

                chrome.storage.local.set({ "URL-PARSER": urlParser }, () => {
                  console.log("Saved endpoints from external JS file:", encodedURL);
                  resolve();
                });
              });
            });

            parsedJSFiles.add(js_file);

            // Check for new script tags that might have been dynamically added
            const newScriptTags = document.getElementsByTagName('script');
            const newJsFiles = Array.from(newScriptTags)
              .filter(script => script.src)
              .map(script => script.src)
              .filter(file => !js_files.includes(file));
            
            js_files = [...js_files, ...newJsFiles];

          } catch (error) {
            console.error('Error fetching script:', error);
          }
        }
      }));

      // Add a small delay between batches to avoid overwhelming the browser
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }

  console.log("Total URLs found in external JS files: " + extURLCount);
  updateJSFileCount(successfullyFetchedFiles.size);
}

async function fetch_file(file: string): Promise<string> {
  const response = await fetch(file);
  const js_code = await response.text();
  return js_code;
}

// ... (keep the rest of the existing code)